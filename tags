!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ACCLOSS	src/weight-server/weightserver.hpp	/^enum CTRL_MSG { MASTERUP, WORKERUP, INITDONE, DATA, ACK, ACCLOSS };$/;"	e	enum:CTRL_MSG
ACK	src/weight-server/weightserver.hpp	/^enum CTRL_MSG { MASTERUP, WORKERUP, INITDONE, DATA, ACK, ACCLOSS };$/;"	e	enum:CTRL_MSG
ACT	src/common/utils.hpp	/^enum TYPE { GRAD, AH, Z, ACT, LAB };$/;"	e	enum:TYPE
ADD	src/common/utils.hpp	/^enum AGGREGATOR { WSUM, MEAN, ADD, MIN, MAX };$/;"	e	enum:AGGREGATOR
AEQueue	src/graph-server/engine/engine.hpp	/^    LockChunkQueue AEQueue;$/;"	m	class:Engine
AGGREGATOR	src/common/utils.hpp	/^enum AGGREGATOR { WSUM, MEAN, ADD, MIN, MAX };$/;"	g
AH	src/common/utils.hpp	/^enum TYPE { GRAD, AH, Z, ACT, LAB };$/;"	e	enum:TYPE
ALLOCATION_TAG	src/graph-server/commmanager/lambda_comm.hpp	44;"	d
APPMSG	src/graph-server/commmanager/commmanager.hpp	/^enum ControlMessageType { CTRLNONE = -1, IAMUP = -2, ISEEYOUUP = -3, APPMSG = -4 };$/;"	e	enum:ControlMessageType
ARCHITECTURE_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	490;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	493;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	496;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	499;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	502;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	506;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	508;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	510;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	514;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	517;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	520;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	525;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	528;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	531;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	536;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	539;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	542;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	545;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	548;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	551;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	554;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	557;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	560;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	563;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	566;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	571;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	574;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	577;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	580;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	583;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	586;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	591;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	594;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	597;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	600;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	603;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	607;"	d	file:
AVQueue	src/graph-server/engine/engine.hpp	/^    LockChunkQueue AVQueue;$/;"	m	class:Engine
AccLoss	src/graph-server/commmanager/lambda_comm.hpp	/^    struct AccLoss {$/;"	s	class:LambdaComm
AccLoss	src/weight-server/weightserver.hpp	/^        AccLoss(unsigned _e, unsigned _v, float _a, float _l) :$/;"	f	struct:WeightServer::AccLoss
AccLoss	src/weight-server/weightserver.hpp	/^    struct AccLoss {$/;"	s	class:WeightServer
AdamOptimizer	src/weight-server/AdamOptimizer.cpp	/^AdamOptimizer::AdamOptimizer(float lr, std::vector<unsigned> dims_) {$/;"	f	class:AdamOptimizer
AdamOptimizer	src/weight-server/AdamOptimizer.hpp	/^    AdamOptimizer() {};$/;"	f	class:AdamOptimizer
AdamOptimizer	src/weight-server/AdamOptimizer.hpp	/^class AdamOptimizer {$/;"	c
Aggregate	miscs/numpy-gnn/check.py	/^from layers import Relu, Linear, Tanh, Aggregate$/;"	i
Aggregate	miscs/numpy-gnn/layers.py	/^class Aggregate(Layer):$/;"	c
Aggregate	miscs/numpy-gnn/train.py	/^from layers import Relu, Linear, Tanh, Aggregate$/;"	i
AmazonDataset	miscs/dgl-sampling/load_amazon.py	/^class AmazonDataset(DGLDataset):$/;"	c
BACKWARD	src/common/utils.hpp	/^enum PROP_TYPE { FORWARD, BACKWARD };$/;"	e	enum:PROP_TYPE
BARRIER	src/graph-server/nodemanager/nodemanager.hpp	/^enum NodeMessageType { NODENONE = -1, MASTERUP = -2, WORKERUP = -3, INITDONE = -4, BARRIER = -5,$/;"	e	enum:NodeMessageType
BASE_DIR	ec2man/__init__.py	/^BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__))) + "\/"$/;"	v
BASE_PATH	inputs/partitioner.cpp	15;"	d	file:
BELHeaderType	inputs/convert2csc.cpp	/^struct BELHeaderType {$/;"	s	file:
BELHeaderType	inputs/partitioner.cpp	/^struct BELHeaderType {$/;"	s	file:
BETA1	src/weight-server/AdamOptimizer.hpp	/^    float BETA1 = .9;$/;"	m	class:AdamOptimizer
BETA2	src/weight-server/AdamOptimizer.hpp	/^    float BETA2 = .999;$/;"	m	class:AdamOptimizer
BLOCK	src/weight-server/weightserver.hpp	/^    bool BLOCK = false;$/;"	m	class:WeightServer
BOUNDARY_VERTEX	src/graph-server/graph/vertex.hpp	15;"	d
BSHeaderType	src/graph-server/graph/dataloader.hpp	/^struct BSHeaderType {$/;"	s
BackoffSleeper	src/common/utils.hpp	/^struct BackoffSleeper {$/;"	s
Barrier	src/graph-server/parallel/barrier.hpp	/^class Barrier {$/;"	c
CFLAGS	inputs/Makefile	/^CFLAGS=-std=c++11 -O3$/;"	m
CHUNK_DNE_ERR	src/common/utils.hpp	58;"	d
CLOSE	src/common/utils.hpp	/^enum CONVERGE_STATE { EARLY, CLOSE, DONE, FLUCT, NUM_STATE };$/;"	e	enum:CONVERGE_STATE
CMAKE_BINARY_DIR	build/Makefile	/^CMAKE_BINARY_DIR = \/anvil\/projects\/x-cis220117\/jingji\/dorylus\/build$/;"	m
CMAKE_BINARY_DIR	build/graph-server/Makefile	/^CMAKE_BINARY_DIR = \/anvil\/projects\/x-cis220117\/jingji\/dorylus\/build$/;"	m
CMAKE_BINARY_DIR	build/graph-server/commmanager/Makefile	/^CMAKE_BINARY_DIR = \/anvil\/projects\/x-cis220117\/jingji\/dorylus\/build$/;"	m
CMAKE_BINARY_DIR	build/graph-server/engine/Makefile	/^CMAKE_BINARY_DIR = \/anvil\/projects\/x-cis220117\/jingji\/dorylus\/build$/;"	m
CMAKE_BINARY_DIR	build/graph-server/graph/Makefile	/^CMAKE_BINARY_DIR = \/anvil\/projects\/x-cis220117\/jingji\/dorylus\/build$/;"	m
CMAKE_BINARY_DIR	build/graph-server/nodemanager/Makefile	/^CMAKE_BINARY_DIR = \/anvil\/projects\/x-cis220117\/jingji\/dorylus\/build$/;"	m
CMAKE_BINARY_DIR	build/graph-server/parallel/Makefile	/^CMAKE_BINARY_DIR = \/anvil\/projects\/x-cis220117\/jingji\/dorylus\/build$/;"	m
CMAKE_BINARY_DIR	build/graph-server/utils/Makefile	/^CMAKE_BINARY_DIR = \/anvil\/projects\/x-cis220117\/jingji\/dorylus\/build$/;"	m
CMAKE_BINARY_DIR	build/src/common/Makefile	/^CMAKE_BINARY_DIR = \/anvil\/projects\/x-cis220117\/jingji\/dorylus\/build$/;"	m
CMAKE_COMMAND	build/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	build/graph-server/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	build/graph-server/commmanager/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	build/graph-server/engine/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	build/graph-server/graph/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	build/graph-server/nodemanager/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	build/graph-server/parallel/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	build/graph-server/utils/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	build/src/common/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_SOURCE_DIR	build/Makefile	/^CMAKE_SOURCE_DIR = \/anvil\/projects\/x-cis220117\/jingji\/dorylus$/;"	m
CMAKE_SOURCE_DIR	build/graph-server/Makefile	/^CMAKE_SOURCE_DIR = \/anvil\/projects\/x-cis220117\/jingji\/dorylus$/;"	m
CMAKE_SOURCE_DIR	build/graph-server/commmanager/Makefile	/^CMAKE_SOURCE_DIR = \/anvil\/projects\/x-cis220117\/jingji\/dorylus$/;"	m
CMAKE_SOURCE_DIR	build/graph-server/engine/Makefile	/^CMAKE_SOURCE_DIR = \/anvil\/projects\/x-cis220117\/jingji\/dorylus$/;"	m
CMAKE_SOURCE_DIR	build/graph-server/graph/Makefile	/^CMAKE_SOURCE_DIR = \/anvil\/projects\/x-cis220117\/jingji\/dorylus$/;"	m
CMAKE_SOURCE_DIR	build/graph-server/nodemanager/Makefile	/^CMAKE_SOURCE_DIR = \/anvil\/projects\/x-cis220117\/jingji\/dorylus$/;"	m
CMAKE_SOURCE_DIR	build/graph-server/parallel/Makefile	/^CMAKE_SOURCE_DIR = \/anvil\/projects\/x-cis220117\/jingji\/dorylus$/;"	m
CMAKE_SOURCE_DIR	build/graph-server/utils/Makefile	/^CMAKE_SOURCE_DIR = \/anvil\/projects\/x-cis220117\/jingji\/dorylus$/;"	m
CMAKE_SOURCE_DIR	build/src/common/Makefile	/^CMAKE_SOURCE_DIR = \/anvil\/projects\/x-cis220117\/jingji\/dorylus$/;"	m
COMM_EXT	inputs/partitioner.cpp	17;"	d	file:
COMPILER_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	103;"	d	file:
COMPILER_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	111;"	d	file:
COMPILER_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	117;"	d	file:
COMPILER_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	123;"	d	file:
COMPILER_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	132;"	d	file:
COMPILER_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	13;"	d	file:
COMPILER_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	141;"	d	file:
COMPILER_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	155;"	d	file:
COMPILER_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	162;"	d	file:
COMPILER_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	169;"	d	file:
COMPILER_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	176;"	d	file:
COMPILER_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	184;"	d	file:
COMPILER_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	191;"	d	file:
COMPILER_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	198;"	d	file:
COMPILER_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	19;"	d	file:
COMPILER_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	206;"	d	file:
COMPILER_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	214;"	d	file:
COMPILER_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	219;"	d	file:
COMPILER_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	226;"	d	file:
COMPILER_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	229;"	d	file:
COMPILER_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	238;"	d	file:
COMPILER_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	241;"	d	file:
COMPILER_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	256;"	d	file:
COMPILER_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	271;"	d	file:
COMPILER_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	278;"	d	file:
COMPILER_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	292;"	d	file:
COMPILER_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	306;"	d	file:
COMPILER_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	324;"	d	file:
COMPILER_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	333;"	d	file:
COMPILER_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	351;"	d	file:
COMPILER_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	354;"	d	file:
COMPILER_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	65;"	d	file:
COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	275;"	d	file:
COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	338;"	d	file:
COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	343;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	104;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	112;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	119;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	125;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	134;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	144;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	149;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	157;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	15;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	164;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	171;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	177;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	186;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	193;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	199;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	207;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	215;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	221;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	232;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	244;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	249;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	260;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	272;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	282;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	294;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	296;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	29;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	308;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	327;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	335;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	340;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	37;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	77;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	81;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	105;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	113;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	120;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	126;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	135;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	145;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	150;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	158;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	165;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	16;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	172;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	178;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	187;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	194;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	200;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	208;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	216;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	222;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	233;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	245;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	250;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	261;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	273;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	283;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	299;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	309;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	30;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	328;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	336;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	341;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	38;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	78;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	82;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	107;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	114;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	128;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	137;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	146;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	151;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	159;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	166;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	173;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	179;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	188;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	195;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	202;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	210;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	223;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	234;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	246;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	251;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	262;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	274;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	284;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	302;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	313;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	316;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	329;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	32;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	337;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	342;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	34;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	41;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	79;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	83;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	180;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	268;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	320;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	45;"	d	file:
CONTROL_MESSAGE_TOPIC	src/graph-server/commmanager/commmanager.hpp	18;"	d
CONVERGE_STATE	src/common/utils.hpp	/^enum CONVERGE_STATE { EARLY, CLOSE, DONE, FLUCT, NUM_STATE };$/;"	g
CONVERGE_STATE_STR	src/common/utils.hpp	/^static std::string CONVERGE_STATE_STR[CONVERGE_STATE::NUM_STATE] = {$/;"	v
CORRECT_CHECK	src/weight-server/weighttensor.hpp	11;"	d
CPP	inputs/Makefile	/^CPP=g++$/;"	m
CPU	src/graph-server/commmanager/resource_comm.hpp	/^enum { LAMBDA, GPU, CPU };$/;"	e	enum:__anon1
CPUComm	src/graph-server/commmanager/CPU_comm.cpp	/^CPUComm::CPUComm(Engine *engine_)$/;"	f	class:CPUComm
CPUComm	src/graph-server/commmanager/CPU_comm.hpp	/^class CPUComm : public ResourceComm {$/;"	c
CSCMatrix	src/graph-server/graph/graph.hpp	/^    CSCMatrix() : columnCnt(0), nnz(0), values(NULL), locations(NULL), columnPtrs(NULL), rowIdxs(NULL) {};$/;"	f	class:CSCMatrix
CSCMatrix	src/graph-server/graph/graph.hpp	/^class CSCMatrix {$/;"	c
CSRMatrix	src/graph-server/graph/graph.hpp	/^    CSRMatrix() : rowCnt(0), nnz(0), values(NULL), locations(NULL), rowPtrs(NULL), columnIdxs(NULL) {};$/;"	f	class:CSRMatrix
CSRMatrix	src/graph-server/graph/graph.hpp	/^class CSRMatrix {$/;"	c
CTRLNONE	src/graph-server/commmanager/commmanager.hpp	/^enum ControlMessageType { CTRLNONE = -1, IAMUP = -2, ISEEYOUUP = -3, APPMSG = -4 };$/;"	e	enum:ControlMessageType
CTRL_MSG	src/weight-server/weightserver.hpp	/^enum CTRL_MSG { MASTERUP, WORKERUP, INITDONE, DATA, ACK, ACCLOSS };$/;"	g
CTX_DIR	ec2man/__init__.py	/^CTX_DIR = EC2_DIR + "contexts\/"$/;"	v
CXX_STD	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	689;"	d	file:
CXX_STD	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	691;"	d	file:
CXX_STD	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	694;"	d	file:
CXX_STD	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	697;"	d	file:
CXX_STD	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	699;"	d	file:
Chunk	src/common/utils.hpp	/^struct Chunk {$/;"	s
ChunkQueue	src/graph-server/utils/utils.hpp	/^typedef std::priority_queue< Chunk > ChunkQueue;$/;"	t
CiteseerGraphDataset	miscs/dgl-non-sampling/train.py	/^from dgl.data import CoraGraphDataset, CiteseerGraphDataset, PubmedGraphDataset, RedditDataset$/;"	i
CommManager	src/graph-server/commmanager/commmanager.hpp	/^class CommManager {$/;"	c
Cond	src/graph-server/parallel/cond.hpp	/^class Cond {$/;"	c
Context	ec2man/__init__.py	/^    from ec2man.classes import Context$/;"	i
Context	ec2man/classes.py	/^class Context:$/;"	c
ControlMessage	src/graph-server/commmanager/commmanager.hpp	/^} ControlMessage;$/;"	t	typeref:struct:controlMessage
ControlMessageType	src/graph-server/commmanager/commmanager.hpp	/^enum ControlMessageType { CTRLNONE = -1, IAMUP = -2, ISEEYOUUP = -3, APPMSG = -4 };$/;"	g
CoraGraphDataset	miscs/dgl-non-sampling/train.py	/^from dgl.data import CoraGraphDataset, CiteseerGraphDataset, PubmedGraphDataset, RedditDataset$/;"	i
CountType	inputs/graphToBinary.cpp	/^typedef unsigned CountType;$/;"	t	file:
CrossEntropyLoss	miscs/dgl-sampling/train_dist_unsupervised.py	/^class CrossEntropyLoss(nn.Module):$/;"	c
DATA	src/weight-server/weightserver.hpp	/^enum CTRL_MSG { MASTERUP, WORKERUP, INITDONE, DATA, ACK, ACCLOSS };$/;"	e	enum:CTRL_MSG
DATA_HEADER_SIZE	src/graph-server/engine/engine.hpp	27;"	d
DEC	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	611;"	d	file:
DGLDataset	miscs/dgl-sampling/load_amazon.py	/^from dgl.data.dgl_dataset import DGLDataset$/;"	i
DGLDataset	miscs/dgl-sampling/load_reddit_large.py	/^from dgl.data.dgl_dataset import DGLDataset$/;"	i
DGLGraph	miscs/dgl-sampling/train_dist.py	/^from dgl import DGLGraph$/;"	i
DGLGraph	miscs/dgl-sampling/train_dist_unsupervised.py	/^from dgl import DGLGraph$/;"	i
DONE	src/common/utils.hpp	/^enum CONVERGE_STATE { EARLY, CLOSE, DONE, FLUCT, NUM_STATE };$/;"	e	enum:CONVERGE_STATE
DUPLICATE_REQ_ERR_FIELD	src/common/utils.hpp	57;"	d
DataLoader	miscs/dgl-sampling/train_dist.py	/^from torch.utils.data import DataLoader$/;"	i
DataLoader	miscs/dgl-sampling/train_dist_unsupervised.py	/^from torch.utils.data import DataLoader$/;"	i
DataLoader	src/graph-server/graph/dataloader.cpp	/^DataLoader::DataLoader(std::string datasetDir, unsigned _nodeId, unsigned _numNodes, bool _undirected) :$/;"	f	class:DataLoader
DataLoader	src/graph-server/graph/dataloader.hpp	/^class DataLoader {$/;"	c
DistDataLoader	miscs/dgl-sampling/train_dist.py	/^from dgl.distributed import DistDataLoader$/;"	i
DistSAGE	miscs/dgl-sampling/train_dist.py	/^class DistSAGE(nn.Module):$/;"	c
DistSAGE	miscs/dgl-sampling/train_dist_unsupervised.py	/^class DistSAGE(SAGE):$/;"	c
EARLY	src/common/utils.hpp	/^enum CONVERGE_STATE { EARLY, CLOSE, DONE, FLUCT, NUM_STATE };$/;"	e	enum:CONVERGE_STATE
EC2_DIR	ec2man/__init__.py	/^EC2_DIR = BASE_DIR + "ec2man\/"$/;"	v
EDGES_EXT	src/graph-server/graph/dataloader.hpp	7;"	d
EPSILON	src/weight-server/AdamOptimizer.hpp	/^    float EPSILON = 1e-07;$/;"	m	class:AdamOptimizer
EQUALS	build/Makefile	/^EQUALS = =$/;"	m
EQUALS	build/graph-server/Makefile	/^EQUALS = =$/;"	m
EQUALS	build/graph-server/commmanager/Makefile	/^EQUALS = =$/;"	m
EQUALS	build/graph-server/engine/Makefile	/^EQUALS = =$/;"	m
EQUALS	build/graph-server/graph/Makefile	/^EQUALS = =$/;"	m
EQUALS	build/graph-server/nodemanager/Makefile	/^EQUALS = =$/;"	m
EQUALS	build/graph-server/parallel/Makefile	/^EQUALS = =$/;"	m
EQUALS	build/graph-server/utils/Makefile	/^EQUALS = =$/;"	m
EQUALS	build/src/common/Makefile	/^EQUALS = =$/;"	m
ERR_HEADER_FIELD	src/common/utils.hpp	55;"	d
ETensorMap	src/common/matrix.hpp	/^typedef std::map<std::string, FeatType**> ETensorMap;$/;"	t
EVAL	src/common/utils.hpp	/^    PUSH, PULL, PULLE, PUSHE, PULLEINFO, FIN, EVAL,$/;"	e	enum:OP
EXP_FACTOR	src/funcs/gat/ops/network_ops.cpp	101;"	d	file:
EXP_FACTOR	src/funcs/gat/ops/network_ops.cpp	41;"	d	file:
EXP_FACTOR	src/funcs/gcn/ops/network_ops.cpp	101;"	d	file:
EXP_FACTOR	src/funcs/gcn/ops/network_ops.cpp	41;"	d	file:
Edge	src/graph-server/graph/edge.hpp	/^    Edge(unsigned oId, EdgeLocationType eLocation, EdgeType eData = EdgeType())$/;"	f	class:Edge
Edge	src/graph-server/graph/edge.hpp	/^class Edge {$/;"	c
EdgeInfo	src/common/matrix.hpp	/^struct EdgeInfo {$/;"	s
EdgeLocationType	src/graph-server/graph/edge.hpp	/^typedef char EdgeLocationType;$/;"	t
EdgeTensor	src/common/matrix.hpp	/^struct EdgeTensor {$/;"	s
EdgeType	src/common/utils.hpp	/^typedef float EdgeType;$/;"	t
Engine	src/graph-server/engine/engine.hpp	/^class Engine {$/;"	c
EuclideanLoss	miscs/numpy-gnn/check.py	/^from loss import EuclideanLoss, SoftmaxCrossEntropyLoss$/;"	i
EuclideanLoss	miscs/numpy-gnn/loss.py	/^class EuclideanLoss(object):$/;"	c
EuclideanLoss	miscs/numpy-gnn/train.py	/^from loss import EuclideanLoss, SoftmaxCrossEntropyLoss$/;"	i
F	miscs/dgl-non-sampling/train.py	/^import torch.nn.functional as F$/;"	i
F	miscs/dgl-sampling/load_amazon.py	/^from dgl import backend as F$/;"	i
F	miscs/dgl-sampling/load_reddit_large.py	/^from dgl import backend as F$/;"	i
F	miscs/dgl-sampling/train_dist.py	/^import torch.nn.functional as F$/;"	i
F	miscs/dgl-sampling/train_dist_unsupervised.py	/^import torch.nn.functional as F$/;"	i
FIN	src/common/utils.hpp	/^    PUSH, PULL, PULLE, PUSHE, PULLEINFO, FIN, EVAL,$/;"	e	enum:OP
FLAGS	miscs/aligraph/train_supervised.py	/^FLAGS = flags.FLAGS$/;"	v
FLUCT	src/common/utils.hpp	/^enum CONVERGE_STATE { EARLY, CLOSE, DONE, FLUCT, NUM_STATE };$/;"	e	enum:CONVERGE_STATE
FORWARD	src/common/utils.hpp	/^enum PROP_TYPE { FORWARD, BACKWARD };$/;"	e	enum:PROP_TYPE
FeatType	inputs/featuresToBinary.cpp	/^typedef float FeatType;$/;"	t	file:
FeatType	src/common/utils.hpp	/^typedef float FeatType;$/;"	t
FeaturesHeader	inputs/featuresToBinary.cpp	/^struct FeaturesHeader{$/;"	s	file:
FeaturesHeaderType	src/graph-server/engine/engine.hpp	/^struct FeaturesHeaderType {$/;"	s
GAQueue	src/graph-server/engine/engine.hpp	/^    LockChunkQueue GAQueue;$/;"	m	class:Engine
GAT	src/common/utils.hpp	/^enum GNN { GCN, GAT };$/;"	e	enum:GNN
GCN	miscs/aligraph/gcn.py	/^class GCN(gl.LearningBasedModel):$/;"	c
GCN	miscs/aligraph/train_supervised.py	/^from gcn import GCN$/;"	i
GCN	miscs/dgl-non-sampling/gcn.py	/^class GCN(nn.Module):$/;"	c
GCN	miscs/dgl-non-sampling/train.py	/^from gcn import GCN$/;"	i
GCN	miscs/numpy-gnn/train.py	/^def GCN(name, adj, weights, layer_config):$/;"	f
GCN	src/common/utils.hpp	/^enum GNN { GCN, GAT };$/;"	e	enum:GNN
GCN_check	miscs/numpy-gnn/check.py	/^def GCN_check(name, adj, weights, layer_config):$/;"	f
GNN	src/common/utils.hpp	/^enum GNN { GCN, GAT };$/;"	g
GPU	src/graph-server/commmanager/resource_comm.hpp	/^enum { LAMBDA, GPU, CPU };$/;"	e	enum:__anon1
GPUComm	src/graph-server/commmanager/GPU_comm.cpp	/^GPUComm::GPUComm(Engine *engine_)$/;"	f	class:GPUComm
GPUComm	src/graph-server/commmanager/GPU_comm.hpp	/^class GPUComm : public ResourceComm {$/;"	c
GPUTimers	src/common/utils.hpp	/^struct GPUTimers {$/;"	s
GRAD	src/common/utils.hpp	/^enum TYPE { GRAD, AH, Z, ACT, LAB };$/;"	e	enum:TYPE
GhostVertex	src/graph-server/graph/vertex.hpp	/^    GhostVertex() : degree(0) { lock.init(); }$/;"	f	class:GhostVertex
GhostVertex	src/graph-server/graph/vertex.hpp	/^class GhostVertex {$/;"	c
Graph	src/graph-server/graph/graph.hpp	/^class Graph {$/;"	c
GraphConv	miscs/dgl-non-sampling/gcn.py	/^from graphconv import GraphConv$/;"	i
GraphConv	miscs/dgl-non-sampling/graphconv.py	/^class GraphConv(nn.Module):$/;"	c
HEADER_SIZE	src/common/utils.hpp	31;"	d
HEX	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	622;"	d	file:
HeaderType	inputs/graphToBinary.cpp	/^struct HeaderType {$/;"	s	file:
IAMUP	src/graph-server/commmanager/commmanager.hpp	/^enum ControlMessageType { CTRLNONE = -1, IAMUP = -2, ISEEYOUUP = -3, APPMSG = -4 };$/;"	e	enum:ControlMessageType
IDENTITY_SIZE	src/funcs/gat/main.cpp	33;"	d	file:
IDENTITY_SIZE	src/funcs/gcn/main.cpp	32;"	d	file:
IDENTITY_SIZE	src/weight-server/weightserver.hpp	33;"	d
INFO	src/common/utils.hpp	/^    RESP, INFO, TERM$/;"	e	enum:OP
INITDONE	src/graph-server/nodemanager/nodemanager.hpp	/^enum NodeMessageType { NODENONE = -1, MASTERUP = -2, WORKERUP = -3, INITDONE = -4, BARRIER = -5,$/;"	e	enum:NodeMessageType
INITDONE	src/weight-server/weightserver.hpp	/^enum CTRL_MSG { MASTERUP, WORKERUP, INITDONE, DATA, ACK, ACCLOSS };$/;"	e	enum:CTRL_MSG
INIT_PERIOD	src/common/utils.hpp	/^    const int INIT_PERIOD = 1024;$/;"	m	struct:BackoffSleeper
INIT_PERIOD	src/funcs/gat/ops/network_ops.cpp	39;"	d	file:
INIT_PERIOD	src/funcs/gat/ops/network_ops.cpp	99;"	d	file:
INIT_PERIOD	src/funcs/gcn/ops/network_ops.cpp	39;"	d	file:
INIT_PERIOD	src/funcs/gcn/ops/network_ops.cpp	99;"	d	file:
INTERNAL_VERTEX	src/graph-server/graph/vertex.hpp	14;"	d
ISEEYOUUP	src/graph-server/commmanager/commmanager.hpp	/^enum ControlMessageType { CTRLNONE = -1, IAMUP = -2, ISEEYOUUP = -3, APPMSG = -4 };$/;"	e	enum:ControlMessageType
InEdge	src/graph-server/graph/edge.hpp	/^    InEdge(unsigned sId, EdgeLocationType eLocation, EdgeType eData = EdgeType()) : Edge(sId, eLocation, eData) { }$/;"	f	class:InEdge
InEdge	src/graph-server/graph/edge.hpp	/^class InEdge: public Edge {$/;"	c
Instance	ec2man/__init__.py	/^    from ec2man.classes import Instance$/;"	i
Instance	ec2man/classes.py	/^class Instance:$/;"	c
LAB	src/common/utils.hpp	/^enum TYPE { GRAD, AH, Z, ACT, LAB };$/;"	e	enum:TYPE
LAMBDA	src/graph-server/commmanager/resource_comm.hpp	/^enum { LAMBDA, GPU, CPU };$/;"	e	enum:__anon1
LAMBDA_NAME	src/graph-server/commmanager/lambda_comm.hpp	/^    std::string LAMBDA_NAME;$/;"	m	class:LambdaComm
LOCAL_EDGE_TYPE	src/graph-server/graph/edge.hpp	10;"	d
LOG_INFO	miscs/numpy-gnn/check.py	/^from utils import LOG_INFO$/;"	i
LOG_INFO	miscs/numpy-gnn/solve_net.py	/^from utils import LOG_INFO, onehot_encoding, calculate_acc$/;"	i
LOG_INFO	miscs/numpy-gnn/train.py	/^from utils import LOG_INFO$/;"	i
LOG_INFO	miscs/numpy-gnn/utils.py	/^def LOG_INFO(msg):$/;"	f
LR_DECAY	src/weight-server/weightserver.hpp	37;"	d
LR_UPD_FREQ	src/weight-server/weightserver.hpp	36;"	d
LabelType	inputs/labelsToBinary.cpp	/^typedef unsigned LabelType;$/;"	t	file:
LabelsHeader	inputs/labelsToBinary.cpp	/^struct LabelsHeader {$/;"	s	file:
LabelsHeaderType	src/graph-server/engine/engine.hpp	/^struct LabelsHeaderType {$/;"	s
LambdaComm	src/graph-server/commmanager/lambda_comm.cpp	/^LambdaComm::LambdaComm(Engine *_engine) :$/;"	f	class:LambdaComm
LambdaComm	src/graph-server/commmanager/lambda_comm.hpp	/^class LambdaComm : public ResourceComm {$/;"	c
LambdaWorker	src/graph-server/commmanager/lambdaworker.cpp	/^LambdaWorker::LambdaWorker(LambdaComm *manager_) :$/;"	f	class:LambdaWorker
LambdaWorker	src/graph-server/commmanager/lambdaworker.hpp	/^class LambdaWorker {$/;"	c
Layer	miscs/numpy-gnn/layers.py	/^class Layer(object):$/;"	c
Linear	miscs/numpy-gnn/check.py	/^from layers import Relu, Linear, Tanh, Aggregate$/;"	i
Linear	miscs/numpy-gnn/layers.py	/^class Linear(Layer):$/;"	c
Linear	miscs/numpy-gnn/train.py	/^from layers import Relu, Linear, Tanh, Aggregate$/;"	i
Linear	src/funcs/operators.hpp	/^    Linear(std::string _name = "Anonymous Linear", bool _trainable = false): Operator(_name, _trainable) {}$/;"	f	struct:Linear
Linear	src/funcs/operators.hpp	/^struct Linear: public Operator {$/;"	s
Lock	src/graph-server/parallel/lock.hpp	/^class Lock {$/;"	c
LockChunkQueue	src/graph-server/engine/engine.hpp	/^class LockChunkQueue {$/;"	c
MASTERUP	src/graph-server/nodemanager/nodemanager.hpp	/^enum NodeMessageType { NODENONE = -1, MASTERUP = -2, WORKERUP = -3, INITDONE = -4, BARRIER = -5,$/;"	e	enum:NodeMessageType
MASTERUP	src/weight-server/weightserver.hpp	/^enum CTRL_MSG { MASTERUP, WORKERUP, INITDONE, DATA, ACK, ACCLOSS };$/;"	e	enum:CTRL_MSG
MASTER_NODEID	src/graph-server/nodemanager/nodemanager.hpp	14;"	d
MAX	src/common/utils.hpp	/^enum AGGREGATOR { WSUM, MEAN, ADD, MIN, MAX };$/;"	e	enum:AGGREGATOR
MAXEPOCH	src/graph-server/nodemanager/nodemanager.hpp	/^                       MINEPOCH = -6, MAXEPOCH = -7 };$/;"	e	enum:NodeMessageType
MAX_IDTYPE	src/graph-server/utils/utils.hpp	22;"	d
MAX_MSG_SIZE	src/graph-server/engine/engine.hpp	24;"	d
MAX_PERIOD	src/common/utils.hpp	/^    const int MAX_PERIOD = 16384;$/;"	m	struct:BackoffSleeper
MAX_PERIOD	src/funcs/gat/ops/network_ops.cpp	100;"	d	file:
MAX_PERIOD	src/funcs/gat/ops/network_ops.cpp	40;"	d	file:
MAX_PERIOD	src/funcs/gcn/ops/network_ops.cpp	100;"	d	file:
MAX_PERIOD	src/funcs/gcn/ops/network_ops.cpp	40;"	d	file:
MEAN	src/common/utils.hpp	/^enum AGGREGATOR { WSUM, MEAN, ADD, MIN, MAX };$/;"	e	enum:AGGREGATOR
MIN	src/common/utils.hpp	/^enum AGGREGATOR { WSUM, MEAN, ADD, MIN, MAX };$/;"	e	enum:AGGREGATOR
MINEPOCH	src/graph-server/nodemanager/nodemanager.hpp	/^                       MINEPOCH = -6, MAXEPOCH = -7 };$/;"	e	enum:NodeMessageType
MIN_TIMEOUT	src/graph-server/commmanager/lambda_comm.cpp	123;"	d	file:
MIN_TIMEOUT	src/graph-server/commmanager/lambda_comm.cpp	91;"	d	file:
MLP	miscs/numpy-gnn/train.py	/^def MLP(name, weights, layer_config):$/;"	f
Matrix	src/common/matrix.cpp	/^Matrix::Matrix() {$/;"	f	class:Matrix
Matrix	src/common/matrix.cpp	/^Matrix::Matrix(const char* _name, unsigned _rows, unsigned _cols) {$/;"	f	class:Matrix
Matrix	src/common/matrix.cpp	/^Matrix::Matrix(const char* _name, unsigned _rows, unsigned _cols, FeatType *_data) {$/;"	f	class:Matrix
Matrix	src/common/matrix.cpp	/^Matrix::Matrix(unsigned _rows, unsigned _cols) {$/;"	f	class:Matrix
Matrix	src/common/matrix.cpp	/^Matrix::Matrix(unsigned _rows, unsigned _cols, FeatType *_data) {$/;"	f	class:Matrix
Matrix	src/common/matrix.cpp	/^Matrix::Matrix(unsigned _rows, unsigned _cols, char *_data) {$/;"	f	class:Matrix
Matrix	src/common/matrix.hpp	/^class Matrix {$/;"	c
MessageService	src/graph-server/commmanager/message_service.cpp	/^MessageService::MessageService(unsigned wPort_, unsigned nodeId_,$/;"	f	class:MessageService
MessageService	src/graph-server/commmanager/message_service.hpp	/^class MessageService {$/;"	c
Module	miscs/dgl-non-sampling/zeroopt.py	/^from torch.nn.modules.module import Module$/;"	i
MutexMap	src/weight-server/weighttensor.hpp	/^typedef std::map<std::string, std::mutex> MutexMap;$/;"	t
NNCompute	src/graph-server/commmanager/CPU_comm.cpp	/^void CPUComm::NNCompute(Chunk &chunk) {$/;"	f	class:CPUComm
NNCompute	src/graph-server/commmanager/GPU_comm.cpp	/^void GPUComm::NNCompute(Chunk &chunk) {$/;"	f	class:GPUComm
NNCompute	src/graph-server/commmanager/lambda_comm.cpp	/^void LambdaComm::NNCompute(Chunk &chunk) {$/;"	f	class:LambdaComm
NNRecv	src/graph-server/commmanager/lambda_comm.cpp	/^bool LambdaComm::NNRecv(Chunk &chunk) {$/;"	f	class:LambdaComm
NNRecvCallback	src/graph-server/commmanager/resource_comm.cpp	/^void ResourceComm::NNRecvCallback(Engine *engine, Chunk &chunk) {$/;"	f	class:ResourceComm
NNRecvCallbackGAT	src/graph-server/commmanager/resource_comm.cpp	/^void ResourceComm::NNRecvCallbackGAT(Engine *engine, Chunk &chunk) {$/;"	f	class:ResourceComm
NNRecvCallbackGCN	src/graph-server/commmanager/resource_comm.cpp	/^void ResourceComm::NNRecvCallbackGCN(Engine *engine, Chunk &chunk) {$/;"	f	class:ResourceComm
NODENONE	src/graph-server/nodemanager/nodemanager.hpp	/^enum NodeMessageType { NODENONE = -1, MASTERUP = -2, WORKERUP = -3, INITDONE = -4, BARRIER = -5,$/;"	e	enum:NodeMessageType
NODE_ID_DIGITS	src/graph-server/engine/engine.hpp	25;"	d
NODE_ID_HEADER	src/graph-server/engine/engine.hpp	26;"	d
NODE_MESSAGE_TOPIC	src/graph-server/nodemanager/nodemanager.hpp	18;"	d
NOT_FOUND_ERR_FIELD	src/common/utils.hpp	56;"	d
NO_MORE	src/funcs/dnnl-forward-gcn/forward.cpp	22;"	d	file:
NO_MORE	src/funcs/gat/ops/network_ops.hpp	16;"	d
NO_MORE	src/funcs/gcn/ops/network_ops.hpp	16;"	d
NULL_CHAR	src/graph-server/commmanager/commmanager.hpp	14;"	d
NUM_LISTENERS	src/weight-server/weightserver.hpp	30;"	d
NUM_STATE	src/common/utils.hpp	/^enum CONVERGE_STATE { EARLY, CLOSE, DONE, FLUCT, NUM_STATE };$/;"	e	enum:CONVERGE_STATE
NegativeSampler	miscs/dgl-sampling/train_dist_unsupervised.py	/^class NegativeSampler(object):$/;"	c
NeighborSampler	miscs/dgl-sampling/train_dist.py	/^class NeighborSampler(object):$/;"	c
NeighborSampler	miscs/dgl-sampling/train_dist_unsupervised.py	/^class NeighborSampler(object):$/;"	c
Network	miscs/numpy-gnn/check.py	/^from network import Network$/;"	i
Network	miscs/numpy-gnn/network.py	/^class Network(object):$/;"	c
Network	miscs/numpy-gnn/train.py	/^from network import Network$/;"	i
Node	src/graph-server/nodemanager/nodemanager.hpp	/^} Node;$/;"	t	typeref:struct:node
NodeManager	src/graph-server/nodemanager/nodemanager.hpp	/^class NodeManager {$/;"	c
NodeMessage	src/graph-server/nodemanager/nodemanager.hpp	/^} NodeMessage;$/;"	t	typeref:struct:nodeMessage
NodeMessageType	src/graph-server/nodemanager/nodemanager.hpp	/^enum NodeMessageType { NODENONE = -1, MASTERUP = -2, WORKERUP = -3, INITDONE = -4, BARRIER = -5,$/;"	g
OP	src/common/utils.hpp	/^enum OP {$/;"	g
Operator	src/funcs/operators.hpp	/^    Operator(std::string _name = "Unknown OP", bool _trainable = false):$/;"	f	struct:Operator
Operator	src/funcs/operators.hpp	/^struct Operator {$/;"	s
Optimizer	miscs/dgl-non-sampling/zeroopt.py	/^from torch.optim.optimizer import Optimizer, required$/;"	i
Optional	miscs/dgl-non-sampling/zeroopt.py	/^from typing import Optional$/;"	i
OutEdge	src/graph-server/graph/edge.hpp	/^    OutEdge(unsigned dId, EdgeLocationType eLocation, EdgeType eData = EdgeType()) : Edge(dId, eLocation, eData) { }$/;"	f	class:OutEdge
OutEdge	src/graph-server/graph/edge.hpp	/^class OutEdge: public Edge {$/;"	c
PARTS_EXT	src/graph-server/graph/dataloader.hpp	8;"	d
PARTS_PATH	inputs/partitioner.cpp	16;"	d	file:
PART_EXT	inputs/partitioner.cpp	18;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	379;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	382;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	385;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	388;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	391;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	394;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	397;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	400;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	403;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	406;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	409;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	412;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	415;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	418;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	421;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	424;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	427;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	430;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	433;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	436;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	439;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	442;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	445;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	448;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	452;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	455;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	458;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	461;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	464;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	467;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	472;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	475;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	479;"	d	file:
PROP_TYPE	src/common/utils.hpp	/^enum PROP_TYPE { FORWARD, BACKWARD };$/;"	g
PULL	src/common/utils.hpp	/^    PUSH, PULL, PULLE, PUSHE, PULLEINFO, FIN, EVAL,$/;"	e	enum:OP
PULLE	src/common/utils.hpp	/^    PUSH, PULL, PULLE, PUSHE, PULLEINFO, FIN, EVAL,$/;"	e	enum:OP
PULLEINFO	src/common/utils.hpp	/^    PUSH, PULL, PULLE, PUSHE, PULLEINFO, FIN, EVAL,$/;"	e	enum:OP
PULL_EDG_BACKWARD	src/common/utils.hpp	/^    REQ_EDG_BACKWARD, PUSH_EDG_BACKWARD, PULL_EDG_BACKWARD,$/;"	e	enum:OP
PULL_EDG_EVAL	src/common/utils.hpp	/^    PULL_EDG_EVAL, PUSH_EDG_EVAL,$/;"	e	enum:OP
PULL_EDG_FORWARD	src/common/utils.hpp	/^    REQ_EDG_FORWARD, PUSH_EDG_FORWARD, PULL_EDG_FORWARD,$/;"	e	enum:OP
PULL_VTX_BACKWARD	src/common/utils.hpp	/^    REQ_VTX_BACKWARD, PUSH_VTX_BACKWARD, PULL_VTX_BACKWARD,$/;"	e	enum:OP
PULL_VTX_EVAL	src/common/utils.hpp	/^    PULL_VTX_EVAL, PUSH_VTX_EVAL,$/;"	e	enum:OP
PULL_VTX_FORWARD	src/common/utils.hpp	/^    REQ_VTX_FORWARD, PUSH_VTX_FORWARD, PULL_VTX_FORWARD,$/;"	e	enum:OP
PUSH	src/common/utils.hpp	/^    PUSH, PULL, PULLE, PUSHE, PULLEINFO, FIN, EVAL,$/;"	e	enum:OP
PUSHE	src/common/utils.hpp	/^    PUSH, PULL, PULLE, PUSHE, PULLEINFO, FIN, EVAL,$/;"	e	enum:OP
PUSH_EDG_BACKWARD	src/common/utils.hpp	/^    REQ_EDG_BACKWARD, PUSH_EDG_BACKWARD, PULL_EDG_BACKWARD,$/;"	e	enum:OP
PUSH_EDG_EVAL	src/common/utils.hpp	/^    PULL_EDG_EVAL, PUSH_EDG_EVAL,$/;"	e	enum:OP
PUSH_EDG_FORWARD	src/common/utils.hpp	/^    REQ_EDG_FORWARD, PUSH_EDG_FORWARD, PULL_EDG_FORWARD,$/;"	e	enum:OP
PUSH_VTX_BACKWARD	src/common/utils.hpp	/^    REQ_VTX_BACKWARD, PUSH_VTX_BACKWARD, PULL_VTX_BACKWARD,$/;"	e	enum:OP
PUSH_VTX_EVAL	src/common/utils.hpp	/^    PULL_VTX_EVAL, PUSH_VTX_EVAL,$/;"	e	enum:OP
PUSH_VTX_FORWARD	src/common/utils.hpp	/^    REQ_VTX_FORWARD, PUSH_VTX_FORWARD, PULL_VTX_FORWARD,$/;"	e	enum:OP
Path	miscs/aligraph/convert-to-aligraph.py	/^from pathlib import Path$/;"	i
PosNeighborSampler	miscs/dgl-sampling/train_dist_unsupervised.py	/^class PosNeighborSampler(object):$/;"	c
Process	miscs/dgl-sampling/train_dist.py	/^from multiprocessing import Process$/;"	i
Process	miscs/dgl-sampling/train_dist_unsupervised.py	/^from multiprocessing import Process$/;"	i
Profiler	miscs/dgl-sampling/train_dist.py	/^from pyinstrument import Profiler$/;"	i
PubmedGraphDataset	miscs/dgl-non-sampling/train.py	/^from dgl.data import CoraGraphDataset, CiteseerGraphDataset, PubmedGraphDataset, RedditDataset$/;"	i
RAWGRAPH_EXT	src/graph-server/graph/dataloader.hpp	6;"	d
REMOTE_EDGE_TYPE	src/graph-server/graph/edge.hpp	11;"	d
REQ_EDG_BACKWARD	src/common/utils.hpp	/^    REQ_EDG_BACKWARD, PUSH_EDG_BACKWARD, PULL_EDG_BACKWARD,$/;"	e	enum:OP
REQ_EDG_FORWARD	src/common/utils.hpp	/^    REQ_EDG_FORWARD, PUSH_EDG_FORWARD, PULL_EDG_FORWARD,$/;"	e	enum:OP
REQ_VTX_BACKWARD	src/common/utils.hpp	/^    REQ_VTX_BACKWARD, PUSH_VTX_BACKWARD, PULL_VTX_BACKWARD,$/;"	e	enum:OP
REQ_VTX_FORWARD	src/common/utils.hpp	/^    REQ_VTX_FORWARD, PUSH_VTX_FORWARD, PULL_VTX_FORWARD,$/;"	e	enum:OP
RESEND	src/funcs/gat/ops/network_ops.hpp	18;"	d
RESEND	src/funcs/gcn/ops/network_ops.hpp	18;"	d
RESP	src/common/utils.hpp	/^    RESP, INFO, TERM$/;"	e	enum:OP
RM	build/Makefile	/^RM = \/usr\/bin\/cmake -E rm -f$/;"	m
RM	build/graph-server/Makefile	/^RM = \/usr\/bin\/cmake -E rm -f$/;"	m
RM	build/graph-server/commmanager/Makefile	/^RM = \/usr\/bin\/cmake -E rm -f$/;"	m
RM	build/graph-server/engine/Makefile	/^RM = \/usr\/bin\/cmake -E rm -f$/;"	m
RM	build/graph-server/graph/Makefile	/^RM = \/usr\/bin\/cmake -E rm -f$/;"	m
RM	build/graph-server/nodemanager/Makefile	/^RM = \/usr\/bin\/cmake -E rm -f$/;"	m
RM	build/graph-server/parallel/Makefile	/^RM = \/usr\/bin\/cmake -E rm -f$/;"	m
RM	build/graph-server/utils/Makefile	/^RM = \/usr\/bin\/cmake -E rm -f$/;"	m
RM	build/src/common/Makefile	/^RM = \/usr\/bin\/cmake -E rm -f$/;"	m
RWLock	src/graph-server/parallel/rwlock.hpp	/^class RWLock {$/;"	c
RawGraph	src/graph-server/graph/graph.hpp	/^class RawGraph {$/;"	c
RedditDataset	miscs/dgl-non-sampling/train.py	/^from dgl.data import CoraGraphDataset, CiteseerGraphDataset, PubmedGraphDataset, RedditDataset$/;"	i
RedditLargeDataset	miscs/dgl-sampling/load_reddit_large.py	/^class RedditLargeDataset(DGLDataset):$/;"	c
RefMat	src/weight-server/weighttensor.cpp	/^RefMat::RefMat(unsigned _refCnt, Matrix _mat) :$/;"	f	class:RefMat
RefMat	src/weight-server/weighttensor.hpp	/^    RefMat() {};$/;"	f	struct:RefMat
RefMat	src/weight-server/weighttensor.hpp	/^struct RefMat {$/;"	s
Relu	miscs/numpy-gnn/check.py	/^from layers import Relu, Linear, Tanh, Aggregate$/;"	i
Relu	miscs/numpy-gnn/layers.py	/^class Relu(Layer):$/;"	c
Relu	miscs/numpy-gnn/train.py	/^from layers import Relu, Linear, Tanh, Aggregate$/;"	i
Reshape	miscs/numpy-gnn/layers.py	/^class Reshape(Layer):$/;"	c
ResourceComm	src/graph-server/commmanager/resource_comm.hpp	/^class ResourceComm {$/;"	c
SAGE	miscs/dgl-sampling/train_dist_unsupervised.py	/^class SAGE(nn.Module):$/;"	c
SCQueue	src/graph-server/engine/engine.hpp	/^    LockChunkQueue SCQueue;$/;"	m	class:Engine
SCStashQueue	src/graph-server/engine/engine.hpp	/^    LockChunkQueue SCStashQueue;$/;"	m	class:Engine
SHELL	build/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build/graph-server/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build/graph-server/commmanager/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build/graph-server/engine/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build/graph-server/graph/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build/graph-server/nodemanager/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build/graph-server/parallel/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build/graph-server/utils/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build/src/common/Makefile	/^SHELL = \/bin\/sh$/;"	m
SIMULATE_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	21;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	24;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	258;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	280;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	67;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	70;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	265;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	287;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	49;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	53;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	55;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	87;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	91;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	93;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	266;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	288;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	50;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	58;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	88;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	96;"	d	file:
SIMULATE_VERSION_PATCH	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	61;"	d	file:
SIMULATE_VERSION_PATCH	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	99;"	d	file:
SLEEP_PERIOD	src/common/utils.hpp	/^    int SLEEP_PERIOD = INIT_PERIOD;$/;"	m	struct:BackoffSleeper
SLEEP_PERIOD	src/funcs/dnnl-forward-gcn/forward.cpp	18;"	d	file:
SLEEP_PERIOD	src/graph-server/commmanager/lambda_comm.cpp	125;"	d	file:
SLEEP_PERIOD	src/graph-server/commmanager/lambda_comm.cpp	93;"	d	file:
SND_MORE	src/funcs/dnnl-forward-gcn/forward.cpp	21;"	d	file:
SND_MORE	src/funcs/gat/ops/network_ops.hpp	15;"	d
SND_MORE	src/funcs/gcn/ops/network_ops.hpp	15;"	d
START_EPOCH	src/graph-server/engine/engine.hpp	/^    const unsigned START_EPOCH = 0;$/;"	m	class:Engine
STRINGIFY	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	375;"	d	file:
STRINGIFY_HELPER	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	374;"	d	file:
S_mat	miscs/check-correctness/check-correctness.py	/^S_mat = np.dot(normed_deg_mat, np.dot(adj_mat, normed_deg_mat))$/;"	v
ServerWorker	src/weight-server/serverworker.cpp	/^ServerWorker::ServerWorker(zmq::context_t& ctx_, WeightServer& _ws, unsigned _tid)$/;"	f	class:ServerWorker
ServerWorker	src/weight-server/serverworker.hpp	/^class ServerWorker {$/;"	c
Sigmoid	miscs/numpy-gnn/layers.py	/^class Sigmoid(Layer):$/;"	c
Softmax	src/funcs/operators.hpp	/^struct Softmax {$/;"	s
SoftmaxCrossEntropyLoss	miscs/numpy-gnn/check.py	/^from loss import EuclideanLoss, SoftmaxCrossEntropyLoss$/;"	i
SoftmaxCrossEntropyLoss	miscs/numpy-gnn/loss.py	/^class SoftmaxCrossEntropyLoss(object):$/;"	c
SoftmaxCrossEntropyLoss	miscs/numpy-gnn/train.py	/^from loss import EuclideanLoss, SoftmaxCrossEntropyLoss$/;"	i
TENSOR_HDR_SIZE	src/common/utils.hpp	/^static const size_t TENSOR_HDR_SIZE = sizeof(unsigned) * 5 + TENSOR_NAME_SIZE;$/;"	v
TENSOR_NAME_SIZE	src/common/utils.hpp	/^static const size_t TENSOR_NAME_SIZE = 8;$/;"	v
TENSOR_NAME_SIZE	src/weight-server/weightserver.hpp	34;"	d
TERM	src/common/utils.hpp	/^    RESP, INFO, TERM$/;"	e	enum:OP
TEST_PORTION	miscs/aligraph/convert-to-aligraph.py	/^TEST_PORTION = 0.24$/;"	v
TEST_PORTION	miscs/dgl-non-sampling/gendata.py	/^TEST_PORTION = 0.24$/;"	v
TEST_PORTION	src/common/utils.hpp	62;"	d
TIMEOUT_PERIOD	src/funcs/dnnl-forward-gcn/forward.cpp	19;"	d	file:
TIMEOUT_PERIOD	src/funcs/gat/ops/network_ops.hpp	13;"	d
TIMEOUT_PERIOD	src/funcs/gcn/ops/network_ops.hpp	13;"	d
TIMEOUT_PERIOD	src/graph-server/commmanager/lambda_comm.cpp	124;"	d	file:
TIMEOUT_PERIOD	src/graph-server/commmanager/lambda_comm.cpp	92;"	d	file:
TRAIN_PORTION	miscs/aligraph/convert-to-aligraph.py	/^TRAIN_PORTION = 0.66$/;"	v
TRAIN_PORTION	miscs/dgl-non-sampling/gendata.py	/^TRAIN_PORTION = 0.66$/;"	v
TRAIN_PORTION	src/common/utils.hpp	60;"	d
TYPE	src/common/utils.hpp	/^enum TYPE { GRAD, AH, Z, ACT, LAB };$/;"	g
Tanh	miscs/numpy-gnn/check.py	/^from layers import Relu, Linear, Tanh, Aggregate$/;"	i
Tanh	miscs/numpy-gnn/layers.py	/^class Tanh(Layer):$/;"	c
Tanh	miscs/numpy-gnn/train.py	/^from layers import Relu, Linear, Tanh, Aggregate$/;"	i
Tanh	src/funcs/operators.hpp	/^    Tanh(std::string _name = "Anonymous Tanh", bool _trainable = false) : Operator(_name, _trainable) {}$/;"	f	struct:Tanh
Tanh	src/funcs/operators.hpp	/^struct Tanh: public Operator {$/;"	s
Tensor	miscs/dgl-non-sampling/zeroopt.py	/^from torch import Tensor$/;"	i
TensorMap	src/common/matrix.hpp	/^typedef std::map<std::string, Matrix> TensorMap;$/;"	t
ThreadInfo	src/graph-server/parallel/threadpool.hpp	/^} ThreadInfo;$/;"	t	typeref:struct:threadInfo
ThreadPool	src/graph-server/parallel/threadpool.cpp	/^ThreadPool::ThreadPool(unsigned nThreads)$/;"	f	class:ThreadPool
ThreadPool	src/graph-server/parallel/threadpool.hpp	/^class ThreadPool {$/;"	c
Timer	src/common/utils.hpp	/^struct Timer {$/;"	s
TimerPlus	src/common/utils.hpp	/^    TimerPlus() {}$/;"	f	struct:TimerPlus
TimerPlus	src/common/utils.hpp	/^    TimerPlus(const string& name_) {name = name_;}$/;"	f	struct:TimerPlus
TimerPlus	src/common/utils.hpp	/^struct TimerPlus {$/;"	s
UPD_HEADER_SIZE	src/weight-server/weightserver.hpp	32;"	d
VAL_PORTION	miscs/aligraph/convert-to-aligraph.py	/^VAL_PORTION = 0.1$/;"	v
VAL_PORTION	miscs/dgl-non-sampling/gendata.py	/^VAL_PORTION = 0.1$/;"	v
VAL_PORTION	src/common/utils.hpp	61;"	d
Vertex	src/graph-server/graph/vertex.hpp	/^    Vertex() : localId(0), globalId(0), parentId(MAX_IDTYPE), graph_ptr(NULL) { lock.init(); }$/;"	f	class:Vertex
Vertex	src/graph-server/graph/vertex.hpp	/^class Vertex {$/;"	c
VertexLocationType	src/graph-server/graph/vertex.hpp	/^typedef char VertexLocationType;$/;"	t
VertexType	inputs/convert2csc.cpp	/^typedef unsigned VertexType;$/;"	t	file:
VertexType	inputs/graphToBinary.cpp	/^typedef unsigned VertexType;$/;"	t	file:
VertexType	inputs/partitioner.cpp	/^typedef unsigned VertexType;$/;"	t	file:
W	src/funcs/operators.hpp	/^    Matrix &W, &b;$/;"	m	struct:Linear
WEIGHT_DECAY	src/weight-server/AdamOptimizer.hpp	/^    const float WEIGHT_DECAY = 0;$/;"	m	class:AdamOptimizer
WORKERUP	src/graph-server/nodemanager/nodemanager.hpp	/^enum NodeMessageType { NODENONE = -1, MASTERUP = -2, WORKERUP = -3, INITDONE = -4, BARRIER = -5,$/;"	e	enum:NodeMessageType
WORKERUP	src/weight-server/weightserver.hpp	/^enum CTRL_MSG { MASTERUP, WORKERUP, INITDONE, DATA, ACK, ACCLOSS };$/;"	e	enum:CTRL_MSG
WSUM	src/common/utils.hpp	/^enum AGGREGATOR { WSUM, MEAN, ADD, MIN, MAX };$/;"	e	enum:AGGREGATOR
WeightComm	src/graph-server/commmanager/weight_comm.cpp	/^WeightComm::WeightComm(std::string wserversFile, unsigned _wserverPort) :$/;"	f	class:WeightComm
WeightComm	src/graph-server/commmanager/weight_comm.hpp	/^class WeightComm {$/;"	c
WeightServer	src/weight-server/weightserver.cpp	/^WeightServer::WeightServer(std::string &wserverFile, std::string &myPrIpFile, std::string &gserverFile,$/;"	f	class:WeightServer
WeightServer	src/weight-server/weightserver.hpp	/^class WeightServer {$/;"	c
WeightTensor	src/weight-server/weighttensor.cpp	/^WeightTensor::WeightTensor(Matrix &mat, std::mutex *_wmtx, std::mutex *_umtx, bool _sync) :$/;"	f	class:WeightTensor
WeightTensor	src/weight-server/weighttensor.hpp	/^    WeightTensor() {}; \/\/ shouldn't be called$/;"	f	struct:WeightTensor
WeightTensor	src/weight-server/weighttensor.hpp	/^struct WeightTensor {$/;"	s
WeightTensorMap	src/weight-server/weighttensor.hpp	/^typedef std::map<std::string, WeightTensor> WeightTensorMap;$/;"	t
Z	src/common/utils.hpp	/^enum TYPE { GRAD, AH, Z, ACT, LAB };$/;"	e	enum:TYPE
ZMQ_ASSERT	src/common/zmq.hpp	92;"	d
ZMQ_ASSERT	src/common/zmq.hpp	94;"	d
ZMQ_CPP03	src/common/zmq.hpp	33;"	d
ZMQ_CPP11	src/common/zmq.hpp	29;"	d
ZMQ_DELETED_FUNCTION	src/common/zmq.hpp	/^        context_t (const context_t&) ZMQ_DELETED_FUNCTION;$/;"	m	class:zmq::context_t
ZMQ_DELETED_FUNCTION	src/common/zmq.hpp	/^        message_t (const message_t&) ZMQ_DELETED_FUNCTION;$/;"	m	class:zmq::message_t
ZMQ_DELETED_FUNCTION	src/common/zmq.hpp	/^        socket_t (const socket_t&) ZMQ_DELETED_FUNCTION;$/;"	m	class:zmq::socket_type::socket_t
ZMQ_DELETED_FUNCTION	src/common/zmq.hpp	/^        void operator = (const context_t&) ZMQ_DELETED_FUNCTION;$/;"	m	class:zmq::context_t
ZMQ_DELETED_FUNCTION	src/common/zmq.hpp	/^        void operator = (const message_t&) ZMQ_DELETED_FUNCTION;$/;"	m	class:zmq::message_t
ZMQ_DELETED_FUNCTION	src/common/zmq.hpp	/^        void operator = (const socket_t&) ZMQ_DELETED_FUNCTION;$/;"	m	class:zmq::socket_type::socket_t
ZMQ_DELETED_FUNCTION	src/common/zmq.hpp	58;"	d
ZMQ_DELETED_FUNCTION	src/common/zmq.hpp	65;"	d
ZMQ_DELETED_FUNCTION	src/common/zmq.hpp	67;"	d
ZMQ_DELETED_FUNCTION	src/common/zmq.hpp	71;"	d
ZMQ_DELETED_FUNCTION	src/common/zmq.hpp	73;"	d
ZMQ_EXPLICIT	src/common/zmq.hpp	31;"	d
ZMQ_EXPLICIT	src/common/zmq.hpp	35;"	d
ZMQ_HAS_PROXY_STEERABLE	src/common/zmq.hpp	81;"	d
ZMQ_HAS_RVALUE_REFS	src/common/zmq.hpp	57;"	d
ZMQ_HAS_RVALUE_REFS	src/common/zmq.hpp	61;"	d
ZMQ_HAS_RVALUE_REFS	src/common/zmq.hpp	70;"	d
ZMQ_NEW_MONITOR_EVENT_LAYOUT	src/common/zmq.hpp	77;"	d
ZMQ_NOTHROW	src/common/zmq.hpp	30;"	d
ZMQ_NOTHROW	src/common/zmq.hpp	34;"	d
ZeroAdam	miscs/dgl-non-sampling/train.py	/^from zeroopt import ZeroSGD, ZeroAdam, ZeroCrossEntropyLoss$/;"	i
ZeroAdam	miscs/dgl-non-sampling/zeroopt.py	/^class ZeroAdam(Optimizer):$/;"	c
ZeroCrossEntropyLoss	miscs/dgl-non-sampling/train.py	/^from zeroopt import ZeroSGD, ZeroAdam, ZeroCrossEntropyLoss$/;"	i
ZeroCrossEntropyLoss	miscs/dgl-non-sampling/zeroopt.py	/^class ZeroCrossEntropyLoss(torch.nn.Module):$/;"	c
ZeroSGD	miscs/dgl-non-sampling/train.py	/^from zeroopt import ZeroSGD, ZeroAdam, ZeroCrossEntropyLoss$/;"	i
ZeroSGD	miscs/dgl-non-sampling/zeroopt.py	/^class ZeroSGD(Optimizer):$/;"	c
_Loss	miscs/dgl-non-sampling/zeroopt.py	/^from torch.nn.modules.loss import _Loss, _WeightedLoss$/;"	i
_WeightedLoss	miscs/dgl-non-sampling/zeroopt.py	/^from torch.nn.modules.loss import _Loss, _WeightedLoss$/;"	i
__ADAM_HPP__	src/weight-server/AdamOptimizer.hpp	2;"	d
__BARRIER_HPP__	src/graph-server/parallel/barrier.hpp	2;"	d
__BKWD_OPS_HPP__	src/funcs/gat/ops/backward_ops.hpp	2;"	d
__BKWD_OPS_HPP__	src/funcs/gcn/ops/backward_ops.hpp	2;"	d
__COMM_MANAGER_HPP__	src/graph-server/commmanager/commmanager.hpp	2;"	d
__COND_HPP__	src/graph-server/parallel/cond.hpp	2;"	d
__CPU_COMM_HPP__	src/graph-server/commmanager/CPU_comm.hpp	2;"	d
__EDGE_HPP__	src/graph-server/graph/edge.hpp	2;"	d
__ENGINE_HPP__	src/graph-server/engine/engine.hpp	2;"	d
__FWD_OPS_HPP__	src/funcs/gat/ops/forward_ops.hpp	2;"	d
__FWD_OPS_HPP__	src/funcs/gcn/ops/forward_ops.hpp	2;"	d
__GCN_UTILS_HPP__	src/funcs/gat/utils.hpp	2;"	d
__GCN_UTILS_HPP__	src/funcs/gcn/utils.hpp	2;"	d
__GLOBAL_UTILS_HPP__	src/common/utils.hpp	2;"	d
__GPU_COMM_HPP__	src/graph-server/commmanager/GPU_comm.hpp	2;"	d
__GRAPH_HPP__	src/graph-server/graph/graph.hpp	2;"	d
__GRAPH_UTILS_HPP__	src/graph-server/utils/utils.hpp	2;"	d
__LAMBDA_COMM_HPP__	src/graph-server/commmanager/lambda_comm.hpp	2;"	d
__LAMBDA_UTILS_HPP__	src/funcs/utils.hpp	2;"	d
__LAMBDA_WORKER_HPP__	src/graph-server/commmanager/lambdaworker.hpp	2;"	d
__LOCK_HPP__	src/graph-server/parallel/lock.hpp	2;"	d
__MATRIX_HPP__	src/common/matrix.hpp	2;"	d
__MSG_SRV_HPP__	src/graph-server/commmanager/message_service.hpp	2;"	d
__NODE_MANAGER_HPP__	src/graph-server/nodemanager/nodemanager.hpp	2;"	d
__NTWK_OPS_HPP__	src/funcs/gat/ops/network_ops.hpp	2;"	d
__NTWK_OPS_HPP__	src/funcs/gcn/ops/network_ops.hpp	2;"	d
__OPERATORS_HPP__	src/funcs/operators.hpp	2;"	d
__RESOURCE_COMM_HPP__	src/graph-server/commmanager/resource_comm.hpp	2;"	d
__RWLOCK_HPP__	src/graph-server/parallel/rwlock.hpp	2;"	d
__SERVER_WORKER_HPP__	src/weight-server/serverworker.hpp	2;"	d
__THREAD_POOL_HPP__	src/graph-server/parallel/threadpool.hpp	2;"	d
__VERTEX_HPP__	src/graph-server/graph/vertex.hpp	2;"	d
__WEIGHT_COMM_HPP__	src/graph-server/commmanager/weight_comm.hpp	2;"	d
__WEIGHT_SERVER_HPP__	src/weight-server/weightserver.hpp	2;"	d
__WEIGHT_TENSOR_HPP__	src/weight-server/weighttensor.hpp	2;"	d
__ZMQ_HPP_INCLUDED__	src/common/zmq.hpp	26;"	d
__call__	miscs/dgl-sampling/train_dist_unsupervised.py	/^    def __call__(self, num_samples):$/;"	m	class:NegativeSampler	file:
__getitem__	miscs/dgl-sampling/load_amazon.py	/^    def __getitem__(self, idx):$/;"	m	class:AmazonDataset	file:
__getitem__	miscs/dgl-sampling/load_reddit_large.py	/^    def __getitem__(self, idx):$/;"	m	class:RedditLargeDataset	file:
__init__	ec2man/classes.py	/^    def __init__(self, _id='', _type='', _placement = '', _pr_ip='', _pub_ip='0', _user='', _key=''):$/;"	m	class:Instance
__init__	ec2man/classes.py	/^    def __init__(self, _name='', _instances=[]):$/;"	m	class:Context
__init__	miscs/aligraph/gcn.py	/^  def __init__(self,$/;"	m	class:GCN
__init__	miscs/dgl-non-sampling/gcn.py	/^    def __init__(self,$/;"	m	class:GCN
__init__	miscs/dgl-non-sampling/graphconv.py	/^    def __init__(self,$/;"	m	class:GraphConv
__init__	miscs/dgl-non-sampling/zeroopt.py	/^    def __init__(self, params, lr=1e-3, betas=(0.9, 0.999), eps=1e-7,$/;"	m	class:ZeroAdam
__init__	miscs/dgl-non-sampling/zeroopt.py	/^    def __init__(self, params, lr=required, momentum=0, dampening=0,$/;"	m	class:ZeroSGD
__init__	miscs/dgl-sampling/load_amazon.py	/^    def __init__(self, raw_dir='\/filepool\/amazon\/dgl-dataset', force_reload=False, verbose=False):$/;"	m	class:AmazonDataset
__init__	miscs/dgl-sampling/load_reddit_large.py	/^    def __init__(self, raw_dir='\/home\/yifan\/dataset\/reddit_large', force_reload=False, verbose=False):$/;"	m	class:RedditLargeDataset
__init__	miscs/dgl-sampling/train_dist.py	/^    def __init__(self, g, fanouts, sample_neighbors, device):$/;"	m	class:NeighborSampler
__init__	miscs/dgl-sampling/train_dist.py	/^    def __init__(self, in_feats, n_hidden, n_classes, n_layers,$/;"	m	class:DistSAGE
__init__	miscs/dgl-sampling/train_dist_unsupervised.py	/^    def __init__(self, g, fanouts, neg_nseeds, sample_neighbors, num_negs, remove_edge):$/;"	m	class:NeighborSampler
__init__	miscs/dgl-sampling/train_dist_unsupervised.py	/^    def __init__(self, g, fanouts, sample_neighbors):$/;"	m	class:PosNeighborSampler
__init__	miscs/dgl-sampling/train_dist_unsupervised.py	/^    def __init__(self, g, neg_nseeds):$/;"	m	class:NegativeSampler
__init__	miscs/dgl-sampling/train_dist_unsupervised.py	/^    def __init__(self, in_feats, n_hidden, n_classes, n_layers,$/;"	m	class:DistSAGE
__init__	miscs/dgl-sampling/train_dist_unsupervised.py	/^    def __init__(self,$/;"	m	class:SAGE
__init__	miscs/numpy-gnn/layers.py	/^    def __init__(self, name):$/;"	m	class:Relu
__init__	miscs/numpy-gnn/layers.py	/^    def __init__(self, name):$/;"	m	class:Sigmoid
__init__	miscs/numpy-gnn/layers.py	/^    def __init__(self, name):$/;"	m	class:Tanh
__init__	miscs/numpy-gnn/layers.py	/^    def __init__(self, name, adj):$/;"	m	class:Aggregate
__init__	miscs/numpy-gnn/layers.py	/^    def __init__(self, name, in_num, out_num, init_method, init_std=0.5):$/;"	m	class:Linear
__init__	miscs/numpy-gnn/layers.py	/^    def __init__(self, name, new_shape):$/;"	m	class:Reshape
__init__	miscs/numpy-gnn/layers.py	/^    def __init__(self, name, trainable=False):$/;"	m	class:Layer
__init__	miscs/numpy-gnn/loss.py	/^    def __init__(self, name):$/;"	m	class:EuclideanLoss
__init__	miscs/numpy-gnn/loss.py	/^    def __init__(self, name):$/;"	m	class:SoftmaxCrossEntropyLoss
__init__	miscs/numpy-gnn/network.py	/^    def __init__(self):$/;"	m	class:Network
__len__	miscs/dgl-sampling/load_amazon.py	/^    def __len__(self):$/;"	m	class:AmazonDataset	file:
__len__	miscs/dgl-sampling/load_reddit_large.py	/^    def __len__(self):$/;"	m	class:RedditLargeDataset	file:
__repr__	miscs/numpy-gnn/layers.py	/^    def __repr__(self):$/;"	m	class:Aggregate	file:
__repr__	miscs/numpy-gnn/layers.py	/^    def __repr__(self):$/;"	m	class:Layer	file:
__repr__	miscs/numpy-gnn/layers.py	/^    def __repr__(self):$/;"	m	class:Linear	file:
__repr__	miscs/numpy-gnn/layers.py	/^    def __repr__(self):$/;"	m	class:Relu	file:
__repr__	miscs/numpy-gnn/layers.py	/^    def __repr__(self):$/;"	m	class:Sigmoid	file:
__repr__	miscs/numpy-gnn/layers.py	/^    def __repr__(self):$/;"	m	class:Tanh	file:
__repr__	miscs/numpy-gnn/loss.py	/^    def __repr__(self):$/;"	m	class:EuclideanLoss	file:
__repr__	miscs/numpy-gnn/loss.py	/^    def __repr__(self):$/;"	m	class:SoftmaxCrossEntropyLoss	file:
__setstate__	miscs/dgl-non-sampling/zeroopt.py	/^    def __setstate__(self, state):$/;"	m	class:ZeroAdam	file:
__setstate__	miscs/dgl-non-sampling/zeroopt.py	/^    def __setstate__(self, state):$/;"	m	class:ZeroSGD	file:
_accuracy	miscs/aligraph/gcn.py	/^  def _accuracy(self, logits, labels):$/;"	m	class:GCN
_calculate_fan_in_and_fan_out	miscs/dgl-non-sampling/graphconv.py	/^from torch.nn.init import _calculate_fan_in_and_fan_out, _no_grad_uniform_$/;"	i
_encoders	miscs/aligraph/gcn.py	/^  def _encoders(self):$/;"	m	class:GCN
_get_dgl_url	miscs/dgl-sampling/load_amazon.py	/^from dgl.data.utils import _get_dgl_url, generate_mask_tensor, load_graphs, save_graphs, deprecate_property$/;"	i
_get_dgl_url	miscs/dgl-sampling/load_reddit_large.py	/^from dgl.data.utils import _get_dgl_url, generate_mask_tensor, load_graphs, save_graphs, deprecate_property$/;"	i
_no_grad_uniform_	miscs/dgl-non-sampling/graphconv.py	/^from torch.nn.init import _calculate_fan_in_and_fan_out, _no_grad_uniform_$/;"	i
_positive_sample	miscs/aligraph/gcn.py	/^  def _positive_sample(self, t):$/;"	m	class:GCN
_print_info	miscs/dgl-sampling/load_amazon.py	/^    def _print_info(self):$/;"	m	class:AmazonDataset
_print_info	miscs/dgl-sampling/load_reddit_large.py	/^    def _print_info(self):$/;"	m	class:RedditLargeDataset
_receptive_fn	miscs/aligraph/gcn.py	/^  def _receptive_fn(self, nodes):$/;"	m	class:GCN
_sample_seed	miscs/aligraph/gcn.py	/^  def _sample_seed(self):$/;"	m	class:GCN
_savedForBackward	src/funcs/operators.hpp	/^    virtual void _savedForBackward(Matrix &tensor) {$/;"	f	struct:Operator
_saved_for_backward	miscs/numpy-gnn/layers.py	/^    def _saved_for_backward(self, tensor):$/;"	m	class:Layer
_saved_tensor	src/funcs/operators.hpp	/^    Matrix &_saved_tensor;$/;"	m	struct:Operator
_supervised_loss	miscs/aligraph/gcn.py	/^  def _supervised_loss(self, emb, label):$/;"	m	class:GCN
_test_sample_seed	miscs/aligraph/gcn.py	/^  def _test_sample_seed(self):$/;"	m	class:GCN
_val_sample_seed	miscs/aligraph/gcn.py	/^  def _val_sample_seed(self):$/;"	m	class:GCN
abort	src/common/zmq.hpp	/^        void abort()$/;"	f	class:zmq::socket_type::monitor_t
absolute_import	miscs/aligraph/gcn.py	/^from __future__ import absolute_import$/;"	i
absolute_import	miscs/aligraph/train_supervised.py	/^from __future__ import absolute_import$/;"	i
absolute_import	miscs/dgl-sampling/load_amazon.py	/^from __future__ import absolute_import$/;"	i
absolute_import	miscs/dgl-sampling/load_reddit_large.py	/^from __future__ import absolute_import$/;"	i
acc	src/graph-server/commmanager/lambda_comm.hpp	/^        float acc = 0.0;$/;"	m	struct:LambdaComm::AccLoss
acc	src/weight-server/weightserver.hpp	/^        float acc = 0.0;$/;"	m	struct:WeightServer::AccLoss
accLossTable	src/graph-server/commmanager/lambda_comm.hpp	/^    std::map<unsigned, AccLoss> accLossTable; \/\/ epoch -> AccLoss$/;"	m	class:LambdaComm
accLossTable	src/weight-server/weightserver.hpp	/^    std::map<unsigned, AccLoss> accLossTable; \/\/ chunkId -> accloss$/;"	m	class:WeightServer
accMtx	src/graph-server/commmanager/lambda_comm.hpp	/^    std::mutex accMtx;$/;"	m	class:LambdaComm
accMtx	src/weight-server/weightserver.hpp	/^    std::mutex accMtx;$/;"	m	class:WeightServer
accuracy	src/graph-server/engine/engine.hpp	/^    float accuracy = 0.0;$/;"	m	class:Engine
ackCnt	src/weight-server/weightserver.hpp	/^    int ackCnt = 0;$/;"	m	class:WeightServer
ackCntCV	src/weight-server/weightserver.hpp	/^    std::condition_variable ackCntCV;$/;"	m	class:WeightServer
ackCntMtx	src/weight-server/weightserver.hpp	/^    std::mutex ackCntMtx;$/;"	m	class:WeightServer
act_mat0	miscs/check-correctness/check-correctness.py	/^act_mat0 = input_feats$/;"	v
act_mat1	miscs/check-correctness/check-correctness.py	/^act_mat1 = activate(z_mat1)$/;"	v
act_mat2	miscs/check-correctness/check-correctness.py	/^act_mat2 = activate(z_mat2)$/;"	v
activate	miscs/check-correctness/check-correctness.py	/^def activate(mat):$/;"	f
activate	src/funcs/dnnl-forward-gcn/forward.cpp	/^activate(Matrix& mat) {$/;"	f	file:
activate	src/graph-server/commmanager/CPU_comm.cpp	/^Matrix activate(Matrix &mat) {$/;"	f
activateDerivative	src/graph-server/commmanager/CPU_comm.cpp	/^Matrix activateDerivative(Matrix &mat) {$/;"	f
activate_derivate	miscs/check-correctness/check-correctness.py	/^def activate_derivate(mat):$/;"	f
adam	src/weight-server/weightserver.hpp	/^    bool adam;  \/\/ whether to use standard SGD or Adam Opt$/;"	m	class:WeightServer
adamOpt	src/weight-server/weightserver.hpp	/^    AdamOptimizer *adamOpt;$/;"	m	class:WeightServer
add	miscs/numpy-gnn/network.py	/^    def add(self, layer):$/;"	m	class:Network
addAssocEdge	src/graph-server/graph/vertex.hpp	/^    void addAssocEdge(unsigned dId) { edges.push_back(dId); }$/;"	f	class:GhostVertex
addEpochTime	src/graph-server/engine/utils.cpp	/^void Engine::addEpochTime(double epochTime) { epochTimes.push_back(epochTime); }$/;"	f	class:Engine
addInEdge	src/graph-server/graph/vertex.hpp	/^    void addInEdge(InEdge edge) { inEdges.push_back(edge); }$/;"	f	class:Vertex
addOutEdge	src/graph-server/graph/vertex.hpp	/^    void addOutEdge(OutEdge edge) { outEdges.push_back(edge); }$/;"	f	class:Vertex
add_managed_ec2_instance	ec2man/instance_manager.py	/^def add_managed_ec2_instance(input_args):$/;"	f
adj_mat	miscs/check-correctness/check-correctness.py	/^adj_mat = np.identity(num_vertices)$/;"	v
aggregateGAT	src/graph-server/engine/ops/gat_ops.cpp	/^void Engine::aggregateGAT(Chunk &c) {$/;"	f	class:Engine
aggregateGCN	src/graph-server/engine/ops/gcn_ops.cpp	/^void Engine::aggregateGCN(Chunk &c) {$/;"	f	class:Engine
allNodes	src/graph-server/nodemanager/nodemanager.hpp	/^    std::vector<Node> allNodes;$/;"	m	class:NodeManager
amIMaster	src/graph-server/nodemanager/nodemanager.cpp	/^NodeManager::amIMaster() {$/;"	f	class:NodeManager
appendVertexPartitionId	src/graph-server/graph/graph.hpp	/^    void appendVertexPartitionId(short pid) { vertexPartitionIds.push_back(pid); }$/;"	f	class:RawGraph
applyEdgeGAT	src/graph-server/engine/ops/gat_ops.cpp	/^void Engine::applyEdgeGAT(Chunk &c) {$/;"	f	class:Engine
applyEdgeGCN	src/graph-server/engine/ops/gcn_ops.cpp	/^void Engine::applyEdgeGCN(Chunk &chunk) {$/;"	f	class:Engine
applyEdgeWorkFunc	src/graph-server/engine/ops/pipeline.cpp	/^void Engine::applyEdgeWorkFunc(unsigned tid) {$/;"	f	class:Engine
applyUpdate	src/weight-server/weightserver.cpp	/^void WeightServer::applyUpdate(unsigned layer, std::string& name) {$/;"	f	class:WeightServer
applyVertexGAT	src/graph-server/engine/ops/gat_ops.cpp	/^void Engine::applyVertexGAT(Chunk &c) {$/;"	f	class:Engine
applyVertexGCN	src/graph-server/engine/ops/gcn_ops.cpp	/^void Engine::applyVertexGCN(Chunk &c) {$/;"	f	class:Engine
applyVertexWorkFunc	src/graph-server/engine/ops/pipeline.cpp	/^void Engine::applyVertexWorkFunc(unsigned tid) {$/;"	f	class:Engine
apply_edge	src/funcs/gat/main.cpp	/^apply_edge(zmq::socket_t& data_socket, zmq::socket_t& weights_socket, Chunk &chunk) {$/;"	f
apply_edge_backward	src/funcs/gat/main.cpp	/^apply_edge_backward(zmq::socket_t& data_socket, zmq::socket_t& weights_socket, Chunk &chunk) {$/;"	f
apply_phase	src/funcs/gat/main.cpp	/^apply_phase(std::string dataserver, std::string weightserver, unsigned dport, unsigned wport, Chunk &chunk, bool eval) {$/;"	f
apply_phase	src/funcs/gcn/main-new-identity.cpp	/^apply_phase(std::string dataserver, std::string weightserver, unsigned dport, unsigned wport,$/;"	f
apply_phase	src/funcs/gcn/main.cpp	/^apply_phase(std::string dataserver, std::string weightserver, unsigned dport, unsigned wport,$/;"	f
apply_vertex	src/funcs/gat/main.cpp	/^apply_vertex(zmq::socket_t& data_socket, zmq::socket_t& weights_socket, Chunk &chunk) {$/;"	f
apply_vertex_backward	src/funcs/gat/main.cpp	/^apply_vertex_backward(zmq::socket_t& data_socket, zmq::socket_t& weights_socket, Chunk &chunk) {$/;"	f
argmax	src/common/utils.hpp	/^inline size_t argmax(FeatType* first, FeatType* last) { return std::distance(first, std::max_element(first, last)); }$/;"	f
argparse	ec2man/__init__.py	/^import argparse$/;"	i
argparse	ec2man/instance_manager.py	/^import argparse$/;"	i
argparse	miscs/dgl-non-sampling/train.py	/^import argparse, time$/;"	i
argparse	miscs/dgl-sampling/train_dist.py	/^import argparse, time, math$/;"	i
argparse	miscs/dgl-sampling/train_dist_unsupervised.py	/^import argparse, time, math$/;"	i
args	miscs/dgl-non-sampling/train.py	/^    args = parser.parse_args()$/;"	v
args	miscs/dgl-sampling/train_dist.py	/^    args = parser.parse_args()$/;"	v
args	miscs/dgl-sampling/train_dist_unsupervised.py	/^    args = parser.parse_args()$/;"	v
args	src/graph-server/parallel/threadpool.hpp	/^    void *args;$/;"	m	struct:threadInfo
as	src/graph-server/commmanager/message_service.hpp	/^    std::vector<Matrix> as;$/;"	m	class:MessageService
async	src/graph-server/engine/engine.hpp	/^    bool async = false;$/;"	m	class:Engine
asyncAvgEpochTime	src/graph-server/engine/engine.hpp	/^    double asyncAvgEpochTime;$/;"	m	class:Engine
asyncRelaunchLoop	src/graph-server/commmanager/lambda_comm.cpp	/^void LambdaComm::asyncRelaunchLoop() {$/;"	f	class:LambdaComm
b	src/funcs/operators.hpp	/^    Matrix &W, &b;$/;"	m	struct:Linear
backend	src/graph-server/commmanager/lambda_comm.hpp	/^    zmq::socket_t backend;$/;"	m	class:LambdaComm
backend	src/weight-server/weightserver.hpp	/^    zmq::socket_t backend;$/;"	m	class:WeightServer
backward	miscs/numpy-gnn/layers.py	/^    def backward(self, grad_output):$/;"	m	class:Aggregate
backward	miscs/numpy-gnn/layers.py	/^    def backward(self, grad_output):$/;"	m	class:Layer
backward	miscs/numpy-gnn/layers.py	/^    def backward(self, grad_output):$/;"	m	class:Linear
backward	miscs/numpy-gnn/layers.py	/^    def backward(self, grad_output):$/;"	m	class:Relu
backward	miscs/numpy-gnn/layers.py	/^    def backward(self, grad_output):$/;"	m	class:Reshape
backward	miscs/numpy-gnn/layers.py	/^    def backward(self, grad_output):$/;"	m	class:Sigmoid
backward	miscs/numpy-gnn/layers.py	/^    def backward(self, grad_output):$/;"	m	class:Tanh
backward	miscs/numpy-gnn/loss.py	/^    def backward(self, input, target):$/;"	m	class:EuclideanLoss
backward	miscs/numpy-gnn/loss.py	/^    def backward(self, input, target):$/;"	m	class:SoftmaxCrossEntropyLoss
backward	miscs/numpy-gnn/network.py	/^    def backward(self, grad_output):$/;"	m	class:Network
backward	src/funcs/operators.hpp	/^    Matrix& backward(Matrix &gradTensor) {$/;"	f	struct:Linear
backward	src/funcs/operators.hpp	/^    Matrix& backward(Matrix &gradTensor) {$/;"	f	struct:Tanh
backward	src/funcs/operators.hpp	/^    Matrix& backward(Matrix &inputTensor, Matrix &target) {$/;"	f	struct:Softmax
backwardAdj	src/graph-server/graph/graph.hpp	/^    CSRMatrix<EdgeType> backwardAdj;$/;"	m	class:Graph
backwardAdj	src/graph-server/graph/graph.hpp	/^    CSRMatrix<EdgeType> backwardAdj;$/;"	m	class:RawGraph
backwardDstTables	src/graph-server/graph/dataloader.hpp	/^    bool **backwardDstTables;$/;"	m	class:DataLoader
backwardGhostMap	src/graph-server/graph/graph.hpp	/^    std::map<unsigned, std::vector<unsigned>> backwardGhostMap;$/;"	m	class:Graph
backwardGhostsList	src/graph-server/graph/graph.hpp	/^    std::vector<unsigned> *backwardGhostsList;$/;"	m	class:RawGraph
backwardLayer	src/funcs/gcn/main-new-identity.cpp	/^backwardLayer(zmq::socket_t& data_socket, zmq::socket_t& weights_socket, Chunk &chunk) {$/;"	f
backwardLayer	src/funcs/gcn/main.cpp	/^backwardLayer(zmq::socket_t& data_socket, zmq::socket_t& weights_socket, Chunk &chunk) {$/;"	f
backwardLocalVtxDsts	src/graph-server/graph/graph.hpp	/^    std::vector<std::vector<unsigned>> backwardLocalVtxDsts;$/;"	m	class:Graph
bar	src/graph-server/parallel/barrier.hpp	/^    pthread_barrier_t bar;$/;"	m	class:Barrier
bar	src/graph-server/parallel/threadpool.hpp	/^    pthread_barrier_t bar;$/;"	m	class:ThreadPool
barrier	src/graph-server/nodemanager/nodemanager.cpp	/^NodeManager::barrier() {$/;"	f	class:NodeManager
begin	src/common/utils.hpp	/^    std::chrono::high_resolution_clock::time_point begin;$/;"	m	struct:Timer
begin	src/common/utils.hpp	/^    std::chrono::high_resolution_clock::time_point begin;$/;"	m	struct:TimerPlus
binary_to_feat_vec	miscs/aligraph/convert-to-aligraph.py	/^def binary_to_feat_vec(num_feats, bin_string):$/;"	f
bind	src/common/zmq.hpp	/^        inline void bind (const char *addr_)$/;"	f	class:zmq::socket_type::socket_t
bind	src/common/zmq.hpp	/^        inline void bind(std::string const& addr)$/;"	f	class:zmq::socket_type::socket_t
block_size	miscs/dgl-non-sampling/gendata.py	/^block_size = vtcs \/\/ parts$/;"	v
boto3	calculate-price.py	/^import boto3$/;"	i
boto3	ec2man/__init__.py	/^import boto3$/;"	i
boto3	ec2man/command.py	/^import boto3$/;"	i
boto3	ec2man/instance_manager.py	/^import boto3$/;"	i
build	miscs/aligraph/gcn.py	/^  def build(self):$/;"	m	class:GCN
cThreads	src/graph-server/engine/engine.hpp	/^    unsigned cThreads;$/;"	m	class:Engine
calcAcc	src/graph-server/engine/utils.cpp	/^inline void Engine::calcAcc(FeatType *predicts, FeatType *labels,$/;"	f	class:Engine
calc_ec2_cost	miscs/awslogs/calc-ec2-cost.py	/^def calc_ec2_cost(graph_type, n_graph, weight_type, n_weight, start, end):$/;"	f
calculate_acc	miscs/numpy-gnn/solve_net.py	/^from utils import LOG_INFO, onehot_encoding, calculate_acc$/;"	i
calculate_acc	miscs/numpy-gnn/utils.py	/^def calculate_acc(output, label, num_masked_instances):$/;"	f
callback	src/graph-server/commmanager/lambda_comm.cpp	/^void LambdaComm::callback(const Aws::Lambda::LambdaClient *client,$/;"	f	class:LambdaComm
check	miscs/numpy-gnn/check.py	/^def check(adj, input_feats, target_labels, config, weights=None):$/;"	f
checkAccuracy	src/funcs/dnnl-forward-gcn/forward.cpp	/^checkAccuracy(Matrix& predictions, Matrix& labels) {$/;"	f	file:
checkAccuracy	src/funcs/gat/ops/forward_ops.cpp	/^checkAccuracy(Matrix& predictions, Matrix& labels) {$/;"	f
checkAccuracy	src/funcs/gcn/ops/forward_ops.cpp	/^checkAccuracy(Matrix& predictions, Matrix& labels) {$/;"	f
checkLoss	src/funcs/dnnl-forward-gcn/forward.cpp	/^checkLoss(Matrix& preds, Matrix& labels) {$/;"	f	file:
checkLoss	src/funcs/gat/ops/forward_ops.cpp	/^checkLoss(Matrix& preds, Matrix& labels) {$/;"	f
checkLoss	src/funcs/gcn/ops/forward_ops.cpp	/^checkLoss(Matrix& preds, Matrix& labels) {$/;"	f
chunk2Ver	src/weight-server/weighttensor.hpp	/^    std::map<Chunk, unsigned> chunk2Ver;$/;"	m	struct:WeightTensor
chunkCnt	src/graph-server/commmanager/lambda_comm.hpp	/^        unsigned chunkCnt = 0;$/;"	m	struct:LambdaComm::AccLoss
chunkData	src/common/matrix.hpp	/^    FeatType* chunkData;$/;"	m	struct:EdgeTensor
clear	src/graph-server/engine/engine.hpp	/^    void clear() {$/;"	f	class:LockChunkQueue
clearAccLoss	src/weight-server/weightserver.cpp	/^void WeightServer::clearAccLoss() {$/;"	f	class:WeightServer
client	calculate-price.py	/^client = boto3.client('lambda')$/;"	v
closeAwsClient	src/graph-server/commmanager/lambda_comm.cpp	/^void LambdaComm::closeAwsClient() {$/;"	f	class:LambdaComm
closeOutputFile	src/weight-server/weightserver.cpp	/^void WeightServer::closeOutputFile() {$/;"	f	class:WeightServer
closeSockets	src/graph-server/commmanager/lambda_comm.cpp	/^void LambdaComm::closeSockets() {$/;"	f	class:LambdaComm
closeSockets	src/weight-server/weightserver.cpp	/^void WeightServer::closeSockets() {$/;"	f	class:WeightServer
cols	src/common/matrix.hpp	/^    unsigned cols;$/;"	m	class:Matrix
columnCnt	src/graph-server/graph/graph.hpp	/^    unsigned columnCnt;$/;"	m	class:CSCMatrix
columnIdxs	src/graph-server/graph/graph.hpp	/^    unsigned *columnIdxs;        \/\/ indices of nz elements in each row$/;"	m	class:CSRMatrix
columnPtrs	src/graph-server/graph/graph.hpp	/^    unsigned long long *columnPtrs; \/\/ pointers to the start of each column$/;"	m	class:CSCMatrix
commManager	src/graph-server/engine/engine.hpp	/^    CommManager commManager;$/;"	m	class:Engine
comp_server	src/graph-server/commmanager/GPU_comm.hpp	/^    ComputingServer *comp_server;$/;"	m	class:GPUComm
compactGraph	src/graph-server/graph/graph.cpp	/^RawGraph::compactGraph() {$/;"	f	class:RawGraph
compactVertex	src/graph-server/graph/vertex.cpp	/^GhostVertex::compactVertex() {$/;"	f	class:GhostVertex
compactVertex	src/graph-server/graph/vertex.cpp	/^Vertex::compactVertex() {$/;"	f	class:Vertex
compute_acc	miscs/dgl-sampling/train_dist.py	/^def compute_acc(pred, labels):$/;"	f
compute_acc	miscs/dgl-sampling/train_dist_unsupervised.py	/^def compute_acc(emb, labels, train_nids, val_nids, test_nids):$/;"	f
confirm	src/graph-server/commmanager/message_service.hpp	/^    zmq::message_t confirm;$/;"	m	class:MessageService
connect	src/common/zmq.hpp	/^        inline void connect (const char *addr_)$/;"	f	class:zmq::socket_type::socket_t
connect	src/common/zmq.hpp	/^        inline void connect(std::string const& addr)$/;"	f	class:zmq::socket_type::socket_t
constructIdentity	src/funcs/gat/main.cpp	/^std::vector<char> constructIdentity(Chunk &chunk) {$/;"	f
constructIdentity	src/funcs/gcn/main-new-identity.cpp	/^std::vector<char> constructIdentity(unsigned glbId, unsigned layer, unsigned dir, std::string& ip) {$/;"	f
constructIdentity	src/funcs/gcn/main.cpp	/^std::vector<char> constructIdentity(Chunk &chunk) {$/;"	f
constructResp	src/funcs/gat/utils.hpp	/^constructResp(bool success, unsigned id, std::string msg) {$/;"	f
constructResp	src/funcs/gcn/utils.hpp	/^constructResp(bool success, unsigned id, std::string msg) {$/;"	f
containsDstGhostVtx	src/graph-server/graph/graph.cpp	/^bool Graph::containsDstGhostVtx(unsigned gvid) {$/;"	f	class:Graph
containsInEdgeGhostVertex	src/graph-server/graph/graph.cpp	/^RawGraph::containsInEdgeGhostVertex(unsigned gvid) {$/;"	f	class:RawGraph
containsOutEdgeGhostVertex	src/graph-server/graph/graph.cpp	/^RawGraph::containsOutEdgeGhostVertex(unsigned gvid) {$/;"	f	class:RawGraph
containsSrcGhostVtx	src/graph-server/graph/graph.cpp	/^bool Graph::containsSrcGhostVtx(unsigned gvid) {$/;"	f	class:Graph
containsVertex	src/graph-server/graph/graph.cpp	/^RawGraph::containsVertex(unsigned gvid) {$/;"	f	class:RawGraph
containsVtx	src/graph-server/graph/graph.cpp	/^bool Graph::containsVtx(unsigned gvid) {$/;"	f	class:Graph
context_t	src/common/zmq.hpp	/^        inline context_t ()$/;"	f	class:zmq::context_t
context_t	src/common/zmq.hpp	/^        inline explicit context_t (int io_threads_, int max_sockets_ = ZMQ_MAX_SOCKETS_DFLT)$/;"	f	class:zmq::context_t
context_t	src/common/zmq.hpp	/^    class context_t$/;"	c	namespace:zmq
controlContext	src/graph-server/commmanager/commmanager.hpp	/^    zmq::context_t controlContext;$/;"	m	class:CommManager
controlMessage	src/graph-server/commmanager/commmanager.hpp	/^    controlMessage(ControlMessageType mType = CTRLNONE) : topic(CONTROL_MESSAGE_TOPIC), messageType(mType) { }$/;"	f	struct:controlMessage
controlMessage	src/graph-server/commmanager/commmanager.hpp	/^typedef struct controlMessage {$/;"	s
controlPortStart	src/graph-server/commmanager/commmanager.hpp	/^    unsigned controlPortStart;$/;"	m	class:CommManager
controlPublishers	src/graph-server/commmanager/commmanager.hpp	/^    zmq::socket_t **controlPublishers = NULL;$/;"	m	class:CommManager
controlPullIn	src/graph-server/commmanager/commmanager.cpp	/^CommManager::controlPullIn(unsigned from, void *value, unsigned maxValSize) {$/;"	f	class:CommManager
controlPushOut	src/graph-server/commmanager/commmanager.cpp	/^CommManager::controlPushOut(unsigned to, void *value, unsigned valSize) {$/;"	f	class:CommManager
controlSubscribers	src/graph-server/commmanager/commmanager.hpp	/^    zmq::socket_t **controlSubscribers = NULL;$/;"	m	class:CommManager
convergeState	src/graph-server/engine/engine.hpp	/^    volatile CONVERGE_STATE convergeState = CONVERGE_STATE::EARLY;$/;"	m	class:Engine
convergeState	src/weight-server/weightserver.hpp	/^    CONVERGE_STATE convergeState = CONVERGE_STATE::EARLY;$/;"	m	class:WeightServer
convert_all	miscs/aligraph/convert-to-aligraph.py	/^def convert_all(dataset):$/;"	f
convert_dict	miscs/aligraph/train_supervised.py	/^def convert_dict(d):$/;"	f
convert_graph	miscs/aligraph/convert-to-aligraph.py	/^def convert_graph(graph_file):$/;"	f
convert_node_data	miscs/aligraph/convert-to-aligraph.py	/^def convert_node_data(features_file, labels_file):$/;"	f
copy	src/common/zmq.hpp	/^        inline void copy (message_t const *msg_)$/;"	f	class:zmq::message_t
cq	src/graph-server/engine/engine.hpp	/^    ChunkQueue cq;$/;"	m	class:LockChunkQueue
createChunk	src/common/utils.cpp	/^Chunk createChunk(unsigned rows, unsigned nChunks, unsigned id, unsigned globalId, unsigned layer,$/;"	f
createOutputFile	src/weight-server/weightserver.cpp	/^void WeightServer::createOutputFile(std::string &fileName) {$/;"	f	class:WeightServer
createPool	src/graph-server/parallel/threadpool.cpp	/^ThreadPool::createPool() {$/;"	f	class:ThreadPool
createWorkers	src/graph-server/commmanager/lambda_comm.cpp	/^void LambdaComm::createWorkers() {$/;"	f	class:LambdaComm
ctx	src/graph-server/commmanager/lambda_comm.hpp	/^    zmq::context_t ctx;$/;"	m	class:LambdaComm
ctx	src/graph-server/commmanager/weight_comm.hpp	/^    zmq::context_t ctx;$/;"	m	class:WeightComm
ctx	src/weight-server/serverworker.hpp	/^    zmq::context_t &ctx;$/;"	m	class:ServerWorker
ctx	src/weight-server/weightserver.hpp	/^    zmq::context_t ctx;$/;"	m	class:WeightServer
ctxptr	src/common/zmq.hpp	/^        void *ctxptr;$/;"	m	class:zmq::socket_type::socket_t
currDir	src/graph-server/engine/engine.hpp	/^    PROP_TYPE currDir;$/;"	m	class:Engine
currEpoch	src/graph-server/engine/engine.hpp	/^    unsigned currEpoch = START_EPOCH;$/;"	m	class:Engine
currLayer	src/graph-server/commmanager/GPU_comm.hpp	/^    unsigned currLayer;$/;"	m	class:GPUComm
currMat	src/weight-server/weighttensor.hpp	/^    Matrix& currMat() { return ver2Mat[currVer].mat; };$/;"	f	struct:WeightTensor
currVer	src/weight-server/weighttensor.hpp	/^    unsigned currVer = 0;$/;"	m	struct:WeightTensor
current	miscs/compare_output.py	/^        current = lines1[l]$/;"	v
current	miscs/compare_output.py	/^current = ''$/;"	v
dPort	src/graph-server/commmanager/CPU_comm.hpp	/^    unsigned dPort;$/;"	m	class:CPUComm
dPort	src/graph-server/commmanager/GPU_comm.hpp	/^    unsigned dPort;$/;"	m	class:GPUComm
dThreads	src/graph-server/engine/engine.hpp	/^    unsigned dThreads;$/;"	m	class:Engine
data	src/common/matrix.hpp	/^    FeatType *data;$/;"	m	class:Matrix
dataContext	src/graph-server/commmanager/commmanager.hpp	/^    zmq::context_t dataContext;$/;"	m	class:CommManager
dataCtx	src/weight-server/weightserver.hpp	/^    zmq::context_t dataCtx;$/;"	m	class:WeightServer
dataPort	src/graph-server/commmanager/commmanager.hpp	/^    unsigned dataPort;$/;"	m	class:CommManager
dataPublisher	src/graph-server/commmanager/commmanager.hpp	/^    zmq::socket_t *dataPublisher = NULL;$/;"	m	class:CommManager
dataPullIn	src/graph-server/commmanager/commmanager.cpp	/^CommManager::dataPullIn(unsigned *sender, unsigned *topic, void *value, unsigned maxValSize) {$/;"	f	class:CommManager
dataPushOut	src/graph-server/commmanager/commmanager.cpp	/^CommManager::dataPushOut(unsigned receiver, unsigned sender, unsigned topic, void *value, unsigned valSize) {$/;"	f	class:CommManager
dataSubscriber	src/graph-server/commmanager/commmanager.hpp	/^    zmq::socket_t *dataSubscriber = NULL;$/;"	m	class:CommManager
dataserverPort	src/graph-server/engine/engine.hpp	/^    unsigned dataserverPort;$/;"	m	class:Engine
dataset	miscs/aligraph/convert-to-aligraph.py	/^    dataset = sys.argv[1]$/;"	v
datasetDir	src/graph-server/engine/engine.hpp	/^    std::string datasetDir;$/;"	m	class:Engine
dataset_dir	miscs/generate-dataset/generate.py	/^dataset_dir = "..\/..\/..\/data\/" + dataset_name + "\/"$/;"	v
dataset_name	miscs/generate-dataset/generate.py	/^dataset_name = "large"$/;"	v
datetime	miscs/numpy-gnn/utils.py	/^from datetime import datetime$/;"	i
dealer	src/common/zmq.hpp	/^        dealer = ZMQ_DEALER,$/;"	m	class:zmq::socket_type
decRef	src/weight-server/weighttensor.cpp	/^void WeightTensor::decRef(Chunk &chunk) {$/;"	f	class:WeightTensor
decay	src/weight-server/AdamOptimizer.hpp	/^    std::vector<FeatType *> decay;$/;"	m	class:AdamOptimizer
decayAlpha	src/weight-server/AdamOptimizer.hpp	/^    void decayAlpha(float decayRate) { BETA1 *= decayRate; };$/;"	f	class:AdamOptimizer
deg_mat	miscs/check-correctness/check-correctness.py	/^deg_mat = np.identity(num_vertices)$/;"	v
degree	src/graph-server/graph/vertex.hpp	/^    unsigned degree;$/;"	m	class:GhostVertex
deleteEdgeInfo	src/funcs/gat/utils.hpp	/^deleteEdgeInfo(EdgeInfo& ei) {$/;"	f
deleteEdgeTensor	src/funcs/gat/utils.hpp	/^deleteEdgeTensor(EdgeTensor& et) {$/;"	f
deleteMatrix	src/funcs/gat/utils.hpp	/^deleteMatrix(Matrix &mat) {$/;"	f
deleteMatrix	src/funcs/gcn/utils.hpp	/^deleteMatrix(Matrix &mat) {$/;"	f
deleteMatrix	src/graph-server/commmanager/CPU_comm.cpp	/^void deleteMatrix(Matrix &mat) {$/;"	f
deleteMatrix	src/graph-server/commmanager/message_service.cpp	/^static void deleteMatrix(Matrix &mat) {$/;"	f	file:
deprecate_property	miscs/dgl-sampling/load_amazon.py	/^from dgl.data.utils import _get_dgl_url, generate_mask_tensor, load_graphs, save_graphs, deprecate_property$/;"	i
deprecate_property	miscs/dgl-sampling/load_reddit_large.py	/^from dgl.data.utils import _get_dgl_url, generate_mask_tensor, load_graphs, save_graphs, deprecate_property$/;"	i
destroy	src/graph-server/commmanager/commmanager.cpp	/^CommManager::destroy() {$/;"	f	class:CommManager
destroy	src/graph-server/engine/engine.cpp	/^void Engine::destroy() {$/;"	f	class:Engine
destroy	src/graph-server/nodemanager/nodemanager.cpp	/^NodeManager::destroy() {$/;"	f	class:NodeManager
destroy	src/graph-server/parallel/barrier.hpp	/^    void destroy() {$/;"	f	class:Barrier
destroy	src/graph-server/parallel/cond.hpp	/^    void destroy() {$/;"	f	class:Cond
destroy	src/graph-server/parallel/lock.hpp	/^    void destroy() {$/;"	f	class:Lock
destroy	src/graph-server/parallel/rwlock.hpp	/^    void destroy() {$/;"	f	class:RWLock
destroyPool	src/graph-server/parallel/threadpool.cpp	/^ThreadPool::destroyPool() {$/;"	f	class:ThreadPool
dgl	miscs/dgl-non-sampling/train.py	/^import dgl$/;"	i
dgl	miscs/dgl-sampling/train_dist.py	/^import dgl$/;"	i
dgl	miscs/dgl-sampling/train_dist.py	/^import dgl.function as fn$/;"	i
dgl	miscs/dgl-sampling/train_dist.py	/^import dgl.nn.pytorch as dglnn$/;"	i
dgl	miscs/dgl-sampling/train_dist_unsupervised.py	/^import dgl$/;"	i
dgl	miscs/dgl-sampling/train_dist_unsupervised.py	/^import dgl.function as fn$/;"	i
dgl	miscs/dgl-sampling/train_dist_unsupervised.py	/^import dgl.nn.pytorch as dglnn$/;"	i
dglnn	miscs/dgl-sampling/train_dist.py	/^import dgl.nn.pytorch as dglnn$/;"	i
dglnn	miscs/dgl-sampling/train_dist_unsupervised.py	/^import dgl.nn.pytorch as dglnn$/;"	i
die	src/graph-server/parallel/threadpool.hpp	/^    bool die;$/;"	m	class:ThreadPool
diff_list	miscs/compare_output.py	/^diff_list = list()$/;"	v
diff_set	miscs/compare_output.py	/^diff_set = set()$/;"	v
dims	src/weight-server/AdamOptimizer.hpp	/^    std::vector<unsigned> dims;$/;"	m	class:AdamOptimizer
dims	src/weight-server/weightserver.hpp	/^    std::vector<unsigned> dims;$/;"	m	class:WeightServer
dir	src/common/utils.hpp	/^    PROP_TYPE dir;$/;"	m	struct:Chunk
disconnect	src/common/zmq.hpp	/^        inline void disconnect (const char *addr_)$/;"	f	class:zmq::socket_type::socket_t
disconnect	src/common/zmq.hpp	/^        inline void disconnect(std::string const& addr)$/;"	f	class:zmq::socket_type::socket_t
distributeWeights	src/weight-server/weightserver.cpp	/^WeightServer::distributeWeights() {$/;"	f	class:WeightServer
distributeWeightsGAT	src/weight-server/weightserver.cpp	/^WeightServer::distributeWeightsGAT() {$/;"	f	class:WeightServer
distributeWeightsGCN	src/weight-server/weightserver.cpp	/^WeightServer::distributeWeightsGCN() {$/;"	f	class:WeightServer
division	miscs/aligraph/gcn.py	/^from __future__ import division$/;"	i
division	miscs/aligraph/train_supervised.py	/^from __future__ import division$/;"	i
division	miscs/numpy-gnn/loss.py	/^from __future__ import division$/;"	i
division	miscs/numpy-gnn/utils.py	/^from __future__ import division$/;"	i
doNotFreeBuffer	src/graph-server/commmanager/message_service.cpp	/^static void doNotFreeBuffer(void *data, void *hint) {}$/;"	f	file:
dot	src/common/matrix.cpp	/^Matrix Matrix::dot(Matrix& M, bool transpose1, bool transpose2, float scale) {$/;"	f	class:Matrix
dot	src/funcs/dnnl-forward-gcn/forward.cpp	/^dot(Matrix& features, Matrix& weights) {$/;"	f	file:
dport	src/graph-server/commmanager/lambda_comm.hpp	/^    unsigned dport;$/;"	m	class:LambdaComm
dshMachinesFile	src/graph-server/engine/engine.hpp	/^    std::string dshMachinesFile;$/;"	m	class:Engine
dstGhostCnt	src/graph-server/graph/graph.hpp	/^    unsigned dstGhostCnt;$/;"	m	class:Graph
dstGhostVtcs	src/graph-server/graph/graph.hpp	/^    std::map<unsigned, unsigned> dstGhostVtcs;$/;"	m	class:Graph
dstVFeats2eFeats	src/graph-server/engine/utils.cpp	/^FeatType **Engine::dstVFeats2eFeats(FeatType *vtcsTensor, FeatType *ghostTensor,$/;"	f	class:Engine
dump	src/graph-server/graph/graph.cpp	/^RawGraph::dump(std::string filename, unsigned numNodes) {$/;"	f	class:RawGraph
durations	src/common/utils.hpp	/^    vector<mili_duration> durations;$/;"	m	struct:TimerPlus
dynamic_matmul_create	src/funcs/dnnl-forward-gcn/forward.cpp	/^matmul dynamic_matmul_create() {$/;"	f
ec2_cli	ec2man/__init__.py	/^ec2_cli = boto3.client('ec2', region_name=region)$/;"	v
ec2_cost	miscs/awslogs/calc-ec2-cost.py	/^    ec2_cost = calc_ec2_cost(graph_type, n_graph, weight_type, n_weight, startdt, enddt)$/;"	v
ec2man	ec2man/__init__.py	/^import ec2man$/;"	i
ec2man	ec2man/__init__.py	/^import ec2man.instance_manager$/;"	i
ec2man	ec2man/__main__.py	/^import ec2man$/;"	i
ec2man	ec2man/classes.py	/^import ec2man$/;"	i
ec2man	ec2man/command.py	/^import ec2man$/;"	i
edgNNBackward	src/graph-server/commmanager/CPU_comm.cpp	/^void CPUComm::edgNNBackward(unsigned layer) {$/;"	f	class:CPUComm
edgNNBackwardGAT	src/graph-server/commmanager/CPU_comm.cpp	/^void CPUComm::edgNNBackwardGAT(unsigned layer) {$/;"	f	class:CPUComm
edgNNBackwardGCN	src/graph-server/commmanager/CPU_comm.hpp	/^    void edgNNBackwardGCN(unsigned layer) {}$/;"	f	class:CPUComm
edgNNForward	src/graph-server/commmanager/CPU_comm.cpp	/^void CPUComm::edgNNForward(unsigned layer, bool lastLayer) {$/;"	f	class:CPUComm
edgNNForwardGAT	src/graph-server/commmanager/CPU_comm.cpp	/^void CPUComm::edgNNForwardGAT(unsigned layer, bool lastLayer) {$/;"	f	class:CPUComm
edgNNForwardGCN	src/graph-server/commmanager/CPU_comm.hpp	/^    void edgNNForwardGCN(unsigned layer, bool lastLayer) {}$/;"	f	class:CPUComm
edgNNSavedTensors	src/graph-server/engine/engine.hpp	/^    std::vector<Matrix> *edgNNSavedTensors;$/;"	m	class:Engine
edgeData	src/graph-server/graph/edge.hpp	/^    EdgeType edgeData;$/;"	m	class:Edge
edgeLocation	src/graph-server/graph/edge.hpp	/^    EdgeLocationType edgeLocation;$/;"	m	class:Edge
edgeMapping	src/common/matrix.hpp	/^    unsigned* edgeMapping;$/;"	m	struct:EdgeTensor
edgeMatMul	src/funcs/gat/ops/forward_ops.cpp	/^edgeMatMul(EdgeInfo& eInfo, Matrix& A, Matrix& B) {$/;"	f
edgePtrs	src/common/matrix.hpp	/^    unsigned long long* edgePtrs;$/;"	m	struct:EdgeInfo
edge_probability	miscs/generate-dataset/generate.py	/^edge_probability = 0.0005$/;"	v
edges	src/graph-server/graph/vertex.hpp	/^    std::vector<unsigned> edges;$/;"	m	class:GhostVertex
empty	src/common/matrix.cpp	/^bool Matrix::empty() { return rows == 0 || cols == 0; }$/;"	f	class:Matrix
empty	src/graph-server/engine/engine.hpp	/^    bool empty() const { return cq.empty(); }$/;"	f	class:LockChunkQueue
end	src/common/utils.hpp	/^    std::chrono::high_resolution_clock::time_point end;$/;"	m	struct:Timer
end	src/common/utils.hpp	/^    std::chrono::high_resolution_clock::time_point end;$/;"	m	struct:TimerPlus
end_time	calculate-price.py	/^            end_time = " ".join(end_time)$/;"	v
end_time	calculate-price.py	/^            end_time = line.split()[8:]$/;"	v
end_time	calculate-price.py	/^end_time=-1$/;"	v
end_time	src/graph-server/engine/engine.hpp	/^    std::time_t end_time;$/;"	m	class:Engine
enddt	miscs/awslogs/calc-ec2-cost.py	/^    enddt = parse(sys.argv[6])$/;"	v
engine	src/graph-server/commmanager/CPU_comm.hpp	/^    Engine *engine;$/;"	m	class:CPUComm
engine	src/graph-server/commmanager/GPU_comm.hpp	/^    Engine *engine;$/;"	m	class:GPUComm
engine	src/graph-server/commmanager/lambda_comm.hpp	/^    Engine *engine;$/;"	m	class:LambdaComm
engine	src/graph-server/engine/engine.cpp	/^Engine engine;$/;"	v
engine	src/graph-server/nodemanager/nodemanager.hpp	/^    Engine* engine;$/;"	m	class:NodeManager
epoch	src/common/utils.hpp	/^    unsigned epoch;$/;"	m	struct:Chunk
epoch	src/graph-server/commmanager/message_service.hpp	/^    unsigned epoch;$/;"	m	class:MessageService
epoch	src/weight-server/weightserver.hpp	/^        unsigned epoch = 0;$/;"	m	struct:WeightServer::AccLoss
epoch	src/weight-server/weightserver.hpp	/^    unsigned epoch = 0;$/;"	m	class:WeightServer
epochTimes	src/graph-server/engine/engine.hpp	/^    std::vector<double> epochTimes;$/;"	m	class:Engine
epochs	src/weight-server/AdamOptimizer.hpp	/^    unsigned epochs;$/;"	m	class:AdamOptimizer
errnum	src/common/zmq.hpp	/^        int errnum;$/;"	m	class:zmq::error_t
error_t	src/common/zmq.hpp	/^        error_t () : errnum (zmq_errno ()) {}$/;"	f	class:zmq::error_t
error_t	src/common/zmq.hpp	/^    class error_t : public std::exception$/;"	c	namespace:zmq
evaluate	miscs/dgl-non-sampling/train.py	/^def evaluate(model, features, labels, mask):$/;"	f
evaluate	miscs/dgl-sampling/train_dist.py	/^def evaluate(model, g, inputs, labels, val_nid, test_nid, batch_size, device):$/;"	f
evaluateModel	src/funcs/dnnl-forward-gcn/forward.cpp	/^evaluateModel(Matrix& activations, zmq::socket_t& datasocket, unsigned partId) {$/;"	f	file:
event	src/common/zmq.hpp	/^    uint16_t event;  \/\/ id of the event as bitfield$/;"	m	struct:__anon3
example_GCN	miscs/numpy-gnn/train.py	/^def example_GCN(name, adj, weights, layer_config):$/;"	f
execute_dynamic_matmul	src/funcs/dnnl-forward-gcn/forward.cpp	/^void execute_dynamic_matmul(matmul& matmul_p, bool transA, bool transB,$/;"	f
expand	src/funcs/gat/ops/backward_ops.cpp	/^Matrix expand(Matrix &mat, EdgeInfo &eInfo) {$/;"	f
expandDot	src/funcs/gat/ops/backward_ops.cpp	/^Matrix expandDot(Matrix &m, Matrix &v, EdgeInfo &eInfo) {$/;"	f
expandDot	src/graph-server/commmanager/CPU_comm.cpp	/^Matrix expandDot(Matrix &m, Matrix &v, CSCMatrix<EdgeType> &forwardAdj) {$/;"	f
expandHadamardMul	src/funcs/gat/ops/backward_ops.cpp	/^Matrix expandHadamardMul(Matrix &m, Matrix &v, EdgeInfo &eInfo) {$/;"	f
expandHadamardMul	src/graph-server/commmanager/CPU_comm.cpp	/^Matrix expandHadamardMul(Matrix &m, Matrix &v, CSCMatrix<EdgeType> &forwardAdj) {$/;"	f
expandMulZZ	src/graph-server/commmanager/CPU_comm.cpp	/^Matrix expandMulZZ(FeatType **eFeats, unsigned edgCnt, unsigned featDim) {$/;"	f
extra_repr	miscs/dgl-non-sampling/graphconv.py	/^    def extra_repr(self):$/;"	m	class:GraphConv
f1	miscs/compare_output.py	/^f1 = open(filename1, 'r')$/;"	v
f2	miscs/compare_output.py	/^f2 = open(filename2, 'r')$/;"	v
failedTrials	src/common/utils.hpp	/^    unsigned failedTrials = 0;$/;"	m	struct:BackoffSleeper
featDim	src/common/matrix.hpp	/^    unsigned featDim;$/;"	m	struct:EdgeTensor
feat_file	miscs/check-correctness/check-correctness.py	/^feat_file = file_dir + "features"$/;"	v
feat_values	miscs/check-correctness/feat-bsnap-to-text.py	/^        feat_values = struct.unpack(fmt_str, read_data[idx_start:idx_end])$/;"	v
features	miscs/dgl-sampling/load_amazon.py	/^    def features(self):$/;"	m	class:AmazonDataset
features	miscs/dgl-sampling/load_reddit_large.py	/^    def features(self):$/;"	m	class:RedditLargeDataset
featuresFile	src/graph-server/engine/engine.hpp	/^    std::string featuresFile;$/;"	m	class:Engine
features_file_name	miscs/aligraph/convert-to-aligraph.py	/^features_file_name = 'features.bsnap'$/;"	v
feed_evaluation_args	miscs/aligraph/gcn.py	/^  def feed_evaluation_args(self):$/;"	m	class:GCN
feed_training_args	miscs/aligraph/gcn.py	/^  def feed_training_args(self):$/;"	m	class:GCN
fileMutex	src/common/utils.cpp	/^std::mutex fileMutex;$/;"	v
file_dir	miscs/check-correctness/check-correctness.py	/^file_dir = "..\/..\/..\/data\/"$/;"	v
filename	calculate-price.py	/^filename = sys.argv[1]$/;"	v
filename1	miscs/compare_output.py	/^filename1 = sys.argv[1]$/;"	v
filename2	miscs/compare_output.py	/^filename2 = sys.argv[2]$/;"	v
fillHeader	src/weight-server/weightserver.cpp	/^void WeightServer::fillHeader(zmq::message_t &header, unsigned receiver, unsigned topic) {$/;"	f	class:WeightServer
fillTensorDescriber	src/weight-server/weightserver.cpp	/^void WeightServer::fillTensorDescriber(zmq::message_t &td, std::string &name, unsigned layer) {$/;"	f	class:WeightServer
finalLayer	src/funcs/gcn/main-new-identity.cpp	/^finalLayer(zmq::socket_t& data_socket, zmq::socket_t& weights_socket, Chunk &chunk,$/;"	f
finalLayer	src/funcs/gcn/main.cpp	/^finalLayer(zmq::socket_t& data_socket, zmq::socket_t& weights_socket, Chunk &chunk,$/;"	f
findGhostDegrees	src/graph-server/graph/dataloader.cpp	/^void DataLoader::findGhostDegrees() {$/;"	f	class:DataLoader
finishedChunkLock	src/graph-server/engine/engine.hpp	/^    Lock finishedChunkLock;$/;"	m	class:Engine
finishedChunks	src/graph-server/engine/engine.hpp	/^    unsigned finishedChunks;$/;"	m	class:Engine
finishedNodeLock	src/graph-server/engine/engine.hpp	/^    Lock finishedNodeLock;$/;"	m	class:Engine
flags	miscs/aligraph/train_supervised.py	/^flags = tf.app.flags$/;"	v
flushControl	src/graph-server/commmanager/commmanager.cpp	/^void CommManager::flushControl() {$/;"	f	class:CommManager
flushData	src/graph-server/commmanager/commmanager.cpp	/^CommManager::flushData() {$/;"	f	class:CommManager
fmt_str	miscs/check-correctness/feat-bsnap-to-text.py	/^    fmt_str = num_features * "f"$/;"	v
fn	miscs/dgl-non-sampling/graphconv.py	/^from dgl import function as fn$/;"	i
fn	miscs/dgl-sampling/train_dist.py	/^import dgl.function as fn$/;"	i
fn	miscs/dgl-sampling/train_dist_unsupervised.py	/^import dgl.function as fn$/;"	i
forcePreprocess	src/graph-server/engine/engine.hpp	/^    bool forcePreprocess = false;$/;"	m	class:Engine
forward	miscs/dgl-non-sampling/gcn.py	/^    def forward(self, features):$/;"	m	class:GCN
forward	miscs/dgl-non-sampling/graphconv.py	/^    def forward(self, graph, feat, weight=None):$/;"	m	class:GraphConv
forward	miscs/dgl-non-sampling/zeroopt.py	/^    def forward(self, input: Tensor, target: Tensor) -> Tensor:$/;"	m	class:ZeroCrossEntropyLoss
forward	miscs/dgl-sampling/train_dist.py	/^    def forward(self, blocks, x):$/;"	m	class:DistSAGE
forward	miscs/dgl-sampling/train_dist_unsupervised.py	/^    def forward(self, block_outputs, pos_graph, neg_graph):$/;"	m	class:CrossEntropyLoss
forward	miscs/dgl-sampling/train_dist_unsupervised.py	/^    def forward(self, blocks, x):$/;"	m	class:SAGE
forward	miscs/numpy-gnn/layers.py	/^    def forward(self, input_feat):$/;"	m	class:Aggregate
forward	miscs/numpy-gnn/layers.py	/^    def forward(self, input_feat):$/;"	m	class:Layer
forward	miscs/numpy-gnn/layers.py	/^    def forward(self, input_feat):$/;"	m	class:Linear
forward	miscs/numpy-gnn/layers.py	/^    def forward(self, input_feat):$/;"	m	class:Relu
forward	miscs/numpy-gnn/layers.py	/^    def forward(self, input_feat):$/;"	m	class:Reshape
forward	miscs/numpy-gnn/layers.py	/^    def forward(self, input_feat):$/;"	m	class:Sigmoid
forward	miscs/numpy-gnn/layers.py	/^    def forward(self, input_feat):$/;"	m	class:Tanh
forward	miscs/numpy-gnn/loss.py	/^    def forward(self, input, target):$/;"	m	class:EuclideanLoss
forward	miscs/numpy-gnn/loss.py	/^    def forward(self, input, target):$/;"	m	class:SoftmaxCrossEntropyLoss
forward	miscs/numpy-gnn/network.py	/^    def forward(self, input):$/;"	m	class:Network
forward	src/funcs/operators.hpp	/^    Matrix& forward(Matrix &inputTensor) {$/;"	f	struct:Linear
forward	src/funcs/operators.hpp	/^    Matrix& forward(Matrix &inputTensor) {$/;"	f	struct:Tanh
forwardAdj	src/graph-server/graph/graph.hpp	/^    CSCMatrix<EdgeType> forwardAdj;$/;"	m	class:Graph
forwardAdj	src/graph-server/graph/graph.hpp	/^    CSCMatrix<EdgeType> forwardAdj;$/;"	m	class:RawGraph
forwardDstTables	src/graph-server/graph/dataloader.hpp	/^    bool **forwardDstTables;$/;"	m	class:DataLoader
forwardGhostInitData	src/graph-server/engine/engine.hpp	/^    FeatType *forwardGhostInitData;$/;"	m	class:Engine
forwardGhostMap	src/graph-server/graph/graph.hpp	/^    std::map<unsigned, std::vector<unsigned>> forwardGhostMap;$/;"	m	class:Graph
forwardGhostsList	src/graph-server/graph/graph.hpp	/^    std::vector<unsigned> *forwardGhostsList;$/;"	m	class:RawGraph
forwardLayer	src/funcs/gcn/main-new-identity.cpp	/^forwardLayer(zmq::socket_t& data_socket, zmq::socket_t& weights_socket, Chunk &chunk) {$/;"	f
forwardLayer	src/funcs/gcn/main.cpp	/^forwardLayer(zmq::socket_t& data_socket, zmq::socket_t& weights_socket, Chunk &chunk) {$/;"	f
forwardLocalVtxDsts	src/graph-server/graph/graph.hpp	/^    std::vector<std::vector<unsigned>> forwardLocalVtxDsts;$/;"	m	class:Graph
forwardVerticesInitData	src/graph-server/engine/engine.hpp	/^    FeatType *forwardVerticesInitData;$/;"	m	class:Engine
forward_prop_layer	src/funcs/dnnl-forward-gcn/forward.cpp	/^forward_prop_layer(std::string dataserver, std::string weightserver, std::string dport, std::string wport,$/;"	f	file:
foward	src/funcs/operators.hpp	/^    Matrix& foward(Matrix &inputTensor, Matrix &target) {$/;"	f	struct:Softmax
fractional_matrix_power	miscs/check-correctness/check-correctness.py	/^from scipy.linalg import fractional_matrix_power$/;"	i
free	src/common/matrix.cpp	/^void Matrix::free() {$/;"	f	class:Matrix
free	src/weight-server/weighttensor.cpp	/^void WeightTensor::free() {$/;"	f	class:WeightTensor
freeAdamOpt	src/weight-server/weightserver.cpp	/^void WeightServer::freeAdamOpt() {$/;"	f	class:WeightServer
freeWeights	src/weight-server/weightserver.cpp	/^void WeightServer::freeWeights() {$/;"	f	class:WeightServer
free_fn	src/common/zmq.hpp	/^    typedef zmq_free_fn free_fn;$/;"	t	namespace:zmq
fromFile	src/common/matrix.cpp	/^void Matrix::fromFile(std::string filename) {$/;"	f	class:Matrix
from_scipy	miscs/dgl-sampling/load_amazon.py	/^from dgl.convert import from_scipy$/;"	i
from_scipy	miscs/dgl-sampling/load_reddit_large.py	/^from dgl.convert import from_scipy$/;"	i
frontend	src/graph-server/commmanager/lambda_comm.hpp	/^    zmq::socket_t frontend;$/;"	m	class:LambdaComm
frontend	src/weight-server/weightserver.hpp	/^    zmq::socket_t frontend;$/;"	m	class:WeightServer
gatherWorkFunc	src/graph-server/engine/ops/pipeline.cpp	/^void Engine::gatherWorkFunc(unsigned tid) {$/;"	f	class:Engine
gd_mat1	miscs/check-correctness/check-correctness.py	/^gd_mat1 = np.multiply(np.matmul(gd_mat2, weights[1].transpose()), activate_derivate(z_mat1))$/;"	v
gd_mat2	miscs/check-correctness/check-correctness.py	/^gd_mat2 = np.multiply(softmax_row(act_mat2) - target_labels, activate_derivate(z_mat2))$/;"	v
generate_emb	miscs/dgl-sampling/train_dist_unsupervised.py	/^def generate_emb(model, g, inputs, batch_size, device):$/;"	f
generate_mask_tensor	miscs/dgl-sampling/load_amazon.py	/^from dgl.data.utils import _get_dgl_url, generate_mask_tensor, load_graphs, save_graphs, deprecate_property$/;"	i
generate_mask_tensor	miscs/dgl-sampling/load_reddit_large.py	/^from dgl.data.utils import _get_dgl_url, generate_mask_tensor, load_graphs, save_graphs, deprecate_property$/;"	i
generate_masks	miscs/aligraph/convert-to-aligraph.py	/^def generate_masks(idx_set):$/;"	f
get	src/common/matrix.cpp	/^FeatType Matrix::get(unsigned row, unsigned col) { return data[row * cols + col]; }$/;"	f	class:Matrix
get	src/common/matrix.cpp	/^FeatType* Matrix::get(unsigned row) { return data + (row * cols); }$/;"	f	class:Matrix
getAbsLayer	src/graph-server/engine/utils.cpp	/^unsigned Engine::getAbsLayer(const Chunk &chunk) {$/;"	f	class:Engine
getCols	src/common/matrix.cpp	/^unsigned Matrix::getCols() { return cols; }$/;"	f	class:Matrix
getCurrentTime	src/graph-server/utils/utils.cpp	/^std::time_t getCurrentTime() {$/;"	f
getData	src/common/matrix.cpp	/^FeatType* Matrix::getData() const { return data; }$/;"	f	class:Matrix
getData	src/graph-server/graph/edge.hpp	/^    EdgeType getData() { return edgeData; }$/;"	f	class:Edge
getDataSize	src/common/matrix.cpp	/^size_t Matrix::getDataSize() const { return rows * cols * sizeof(FeatType); }$/;"	f	class:Matrix
getDegree	src/graph-server/graph/vertex.hpp	/^    unsigned getDegree() { return degree; }$/;"	f	class:GhostVertex
getDestId	src/graph-server/graph/edge.hpp	/^    unsigned getDestId() { return otherId; }$/;"	f	class:OutEdge
getDestVertexGlobalId	src/graph-server/graph/vertex.cpp	/^Vertex::getDestVertexGlobalId(unsigned i) {$/;"	f	class:Vertex
getDestVertexLocalId	src/graph-server/graph/vertex.cpp	/^Vertex::getDestVertexLocalId(unsigned i) {$/;"	f	class:Vertex
getEdgeLocation	src/graph-server/graph/edge.hpp	/^    EdgeLocationType getEdgeLocation() { return edgeLocation; }$/;"	f	class:Edge
getFeatDim	src/graph-server/engine/engine.hpp	/^    inline unsigned getFeatDim(unsigned layer) {$/;"	f	class:Engine
getFileSize	src/common/utils.hpp	/^inline size_t getFileSize(const char* fname) {$/;"	f
getGlobalId	src/graph-server/graph/vertex.hpp	/^    unsigned getGlobalId() { return globalId; }$/;"	f	class:Vertex
getGraphPtr	src/graph-server/graph/vertex.hpp	/^    RawGraph *getGraphPtr() { return graph_ptr; }$/;"	f	class:Vertex
getInEdge	src/graph-server/graph/vertex.hpp	/^    InEdge& getInEdge(unsigned i) { return inEdges[i]; }$/;"	f	class:Vertex
getInEdgeGhostVertex	src/graph-server/graph/graph.cpp	/^RawGraph::getInEdgeGhostVertex(unsigned gvid) {$/;"	f	class:RawGraph
getInEdgeGhostVertices	src/graph-server/graph/graph.hpp	/^    std::map<unsigned, GhostVertex>& getInEdgeGhostVertices()  { return inEdgeGhostVertices; }$/;"	f	class:RawGraph
getLabelIndex	src/funcs/dnnl-forward-gcn/forward.cpp	/^getLabelIndex(FeatType* row, unsigned length) {$/;"	f	file:
getLabelIndex	src/funcs/gat/ops/forward_ops.cpp	/^getLabelIndex(FeatType* row, unsigned length) {$/;"	f
getLabelIndex	src/funcs/gcn/ops/forward_ops.cpp	/^getLabelIndex(FeatType* row, unsigned length) {$/;"	f
getLocalId	src/graph-server/graph/vertex.hpp	/^    unsigned getLocalId() { return localId; }$/;"	f	class:GhostVertex
getLocalId	src/graph-server/graph/vertex.hpp	/^    unsigned getLocalId() { return localId; }$/;"	f	class:Vertex
getMat	src/weight-server/weighttensor.cpp	/^Matrix& WeightTensor::getMat(Chunk &chunk) {$/;"	f	class:WeightTensor
getMaxIndex	src/funcs/dnnl-forward-gcn/forward.cpp	/^getMaxIndex(FeatType* row, unsigned length) {$/;"	f	file:
getMaxIndex	src/funcs/gat/ops/forward_ops.cpp	/^getMaxIndex(FeatType* row, unsigned length) {$/;"	f
getMaxIndex	src/funcs/gcn/ops/forward_ops.cpp	/^getMaxIndex(FeatType* row, unsigned length) {$/;"	f
getMyNodeId	src/graph-server/nodemanager/nodemanager.cpp	/^NodeManager::getMyNodeId() {$/;"	f	class:NodeManager
getNode	src/graph-server/nodemanager/nodemanager.cpp	/^NodeManager::getNode(unsigned i) {$/;"	f	class:NodeManager
getNodeId	src/graph-server/engine/utils.cpp	/^unsigned Engine::getNodeId() { return nodeId; }$/;"	f	class:Engine
getNormFactor	src/graph-server/graph/vertex.hpp	/^    EdgeType getNormFactor() { return normFactor; }$/;"	f	class:Vertex
getNumElemts	src/common/matrix.cpp	/^unsigned Matrix::getNumElemts() { return rows * cols; }$/;"	f	class:Matrix
getNumEpochs	src/graph-server/engine/utils.cpp	/^unsigned Engine::getNumEpochs() { return numEpochs; }$/;"	f	class:Engine
getNumGlobalEdges	src/graph-server/graph/graph.hpp	/^    unsigned long long getNumGlobalEdges() { return numGlobalEdges; }$/;"	f	class:RawGraph
getNumGlobalVertices	src/graph-server/graph/graph.hpp	/^    unsigned getNumGlobalVertices() { return numGlobalVertices; }$/;"	f	class:RawGraph
getNumInEdgeGhostVertices	src/graph-server/graph/graph.hpp	/^    unsigned getNumInEdgeGhostVertices()  { return numInEdgeGhostVertices; }$/;"	f	class:RawGraph
getNumInEdges	src/graph-server/graph/vertex.hpp	/^    unsigned getNumInEdges() { return inEdges.size(); }$/;"	f	class:Vertex
getNumLocalInEdges	src/graph-server/graph/graph.hpp	/^    unsigned long long getNumLocalInEdges() { return numLocalInEdges; }$/;"	f	class:RawGraph
getNumLocalOutEdges	src/graph-server/graph/graph.hpp	/^    unsigned long long getNumLocalOutEdges() { return numLocalOutEdges; }$/;"	f	class:RawGraph
getNumLocalVertices	src/graph-server/graph/graph.hpp	/^    unsigned getNumLocalVertices() { return numLocalVertices; }$/;"	f	class:RawGraph
getNumNodes	src/graph-server/nodemanager/nodemanager.cpp	/^NodeManager::getNumNodes() {$/;"	f	class:NodeManager
getNumOutEdgeGhostVertices	src/graph-server/graph/graph.hpp	/^    unsigned getNumOutEdgeGhostVertices() { return numOutEdgeGhostVertices; }$/;"	f	class:RawGraph
getNumOutEdges	src/graph-server/graph/vertex.hpp	/^    unsigned getNumOutEdges() { return outEdges.size(); }$/;"	f	class:Vertex
getOutEdge	src/graph-server/graph/vertex.hpp	/^    OutEdge& getOutEdge(unsigned i) { return outEdges[i]; }$/;"	f	class:Vertex
getOutEdgeGhostVertex	src/graph-server/graph/graph.cpp	/^RawGraph::getOutEdgeGhostVertex(unsigned gvid) {$/;"	f	class:RawGraph
getOutEdgeGhostVertices	src/graph-server/graph/graph.hpp	/^    std::map<unsigned, GhostVertex>& getOutEdgeGhostVertices() { return outEdgeGhostVertices; }$/;"	f	class:RawGraph
getParent	src/graph-server/graph/vertex.hpp	/^    unsigned getParent() { return parentId; }$/;"	f	class:Vertex
getPrIP	src/graph-server/utils/utils.cpp	/^getPrIP(std::string& myPrIpFile, std::string& ip) {$/;"	f
getRelaunchCnt	src/graph-server/commmanager/lambda_comm.hpp	/^    unsigned getRelaunchCnt() { return relaunchCnt; };$/;"	f	class:LambdaComm
getRelaunchCnt	src/graph-server/commmanager/resource_comm.hpp	/^    virtual unsigned getRelaunchCnt() { return 0u; };$/;"	f	class:ResourceComm
getRows	src/common/matrix.cpp	/^unsigned Matrix::getRows() { return rows; }$/;"	f	class:Matrix
getSourceId	src/graph-server/graph/edge.hpp	/^    unsigned getSourceId() { return otherId; }$/;"	f	class:InEdge
getSourceVertexGlobalId	src/graph-server/graph/vertex.cpp	/^Vertex::getSourceVertexGlobalId(unsigned i) {$/;"	f	class:Vertex
getSourceVertexLocalId	src/graph-server/graph/vertex.cpp	/^Vertex::getSourceVertexLocalId(unsigned i) {$/;"	f	class:Vertex
getTime	src/common/utils.hpp	/^    double getTime() {      \/\/ Get floating-point milliseconds.$/;"	f	struct:Timer
getTimer	src/common/utils.hpp	/^    TimerPlus* getTimer(const string& str) {$/;"	f	struct:GPUTimers
getTimer	src/graph-server/utils/utils.cpp	/^double getTimer() {$/;"	f
getTrainStat	src/graph-server/commmanager/CPU_comm.cpp	/^void CPUComm::getTrainStat(Matrix &preds, Matrix &labels, float &acc,$/;"	f	class:CPUComm
getValFreq	src/graph-server/engine/utils.cpp	/^unsigned Engine::getValFreq() { return valFreq; }$/;"	f	class:Engine
getVertex	src/graph-server/graph/graph.cpp	/^RawGraph::getVertex(unsigned lvid) {$/;"	f	class:RawGraph
getVertexByGlobal	src/graph-server/graph/graph.cpp	/^RawGraph::getVertexByGlobal(unsigned gvid) {$/;"	f	class:RawGraph
getVertexLocation	src/graph-server/graph/vertex.hpp	/^    VertexLocationType getVertexLocation() { return vertexLocation; }$/;"	f	class:Vertex
getVertexPartitionId	src/graph-server/graph/graph.hpp	/^    short getVertexPartitionId(unsigned vid) { return vertexPartitionIds[vid]; }$/;"	f	class:RawGraph
getVertices	src/graph-server/graph/graph.hpp	/^    std::vector<Vertex>& getVertices() { return vertices; }$/;"	f	class:RawGraph
getVtxFeat	src/graph-server/engine/engine.hpp	279;"	d
getWeightMatrix	src/graph-server/commmanager/message_service.cpp	/^Matrix MessageService::getWeightMatrix(unsigned layer) {$/;"	f	class:MessageService
get_W	miscs/numpy-gnn/layers.py	/^    def get_W(self):$/;"	m	class:Linear
get_instances_info	ec2man/__init__.py	/^def get_instances_info(id_list):$/;"	f
get_logs	calculate-price.py	/^def get_logs(lambda_function):$/;"	f
get_logs	miscs/awslogs/sum_lambda_time.py	/^def get_logs(log_type):$/;"	f
getaMatrix	src/graph-server/commmanager/message_service.cpp	/^Matrix MessageService::getaMatrix(unsigned layer) {$/;"	f	class:MessageService
getsockopt	src/common/zmq.hpp	/^        inline void getsockopt (int option_, void *optval_,$/;"	f	class:zmq::socket_type::socket_t
getsockopt	src/common/zmq.hpp	/^        template<typename T> T getsockopt(int option_)$/;"	f	class:zmq::socket_type::socket_t
ghostReceiverFunc	src/graph-server/engine/ops/pipeline.cpp	/^void Engine::ghostReceiverFunc(unsigned tid) {$/;"	f	class:Engine
ghostReceiverGAT	src/graph-server/engine/ops/gat_ops.cpp	/^void Engine::ghostReceiverGAT(unsigned tid) {$/;"	f	class:Engine
ghostReceiverGCN	src/graph-server/engine/ops/gcn_ops.cpp	/^void Engine::ghostReceiverGCN(unsigned tid) {$/;"	f	class:Engine
ghostUpdCnt	src/weight-server/weighttensor.hpp	/^    unsigned ghostUpdCnt;$/;"	m	struct:WeightTensor
ghostUpdMat	src/weight-server/weighttensor.hpp	/^    Matrix ghostUpdMat;$/;"	m	struct:WeightTensor
ghostUpdTot	src/weight-server/weighttensor.hpp	/^    unsigned ghostUpdTot;$/;"	m	struct:WeightTensor
ghostUpdate	src/weight-server/weighttensor.cpp	/^unsigned WeightTensor::ghostUpdate(FeatType *updTensor) {$/;"	f	class:WeightTensor
ghostVtcsRecvd	src/graph-server/engine/engine.hpp	/^    int ghostVtcsRecvd;$/;"	m	class:Engine
gl	miscs/aligraph/gcn.py	/^import graphlearn as gl$/;"	i
gl	miscs/aligraph/train_supervised.py	/^import graphlearn as gl$/;"	i
globalEdgeCnt	src/graph-server/graph/graph.hpp	/^    unsigned long long globalEdgeCnt = 0;$/;"	m	class:Graph
globalId	src/common/utils.hpp	/^    unsigned globalId;$/;"	m	struct:Chunk
globalId	src/graph-server/graph/vertex.hpp	/^    unsigned globalId;$/;"	m	class:Vertex
globalToLocalId	src/graph-server/graph/graph.hpp	/^    std::map<unsigned, unsigned> globalToLocalId;$/;"	m	class:RawGraph
globalVtxCnt	src/graph-server/graph/graph.hpp	/^    unsigned globalVtxCnt;$/;"	m	class:Graph
globaltoLocalId	src/graph-server/graph/graph.hpp	/^    std::map<unsigned, unsigned> globaltoLocalId;$/;"	m	class:Graph
gnn_type	src/graph-server/commmanager/CPU_comm.hpp	/^    GNN gnn_type;$/;"	m	class:CPUComm
gnn_type	src/graph-server/commmanager/message_service.hpp	/^    GNN gnn_type;$/;"	m	class:MessageService
gnn_type	src/graph-server/engine/engine.hpp	/^    GNN gnn_type;$/;"	m	class:Engine
gnn_type	src/weight-server/weightserver.hpp	/^    GNN gnn_type;$/;"	m	class:WeightServer
gport	src/weight-server/weightserver.hpp	/^    unsigned gport;$/;"	m	class:WeightServer
gradLoss	src/funcs/dnnl-forward-gcn/forward.cpp	/^gradLoss(Matrix& z, Matrix& weights, Matrix& AH, zmq::socket_t& datasocket, zmq::socket_t& weightSocket,$/;"	f	file:
gradW	src/funcs/operators.hpp	/^    Matrix &gradW, &gradb;$/;"	m	struct:Linear
gradb	src/funcs/operators.hpp	/^    Matrix &gradW, &gradb;$/;"	m	struct:Linear
graph	miscs/dgl-sampling/load_amazon.py	/^    def graph(self):$/;"	m	class:AmazonDataset
graph	miscs/dgl-sampling/load_reddit_large.py	/^    def graph(self):$/;"	m	class:RedditLargeDataset
graph	src/graph-server/engine/engine.hpp	/^    Graph graph;$/;"	m	class:Engine
graphFile	src/graph-server/graph/dataloader.hpp	/^    std::string graphFile;$/;"	m	class:DataLoader
graph_file_name	miscs/aligraph/convert-to-aligraph.py	/^graph_file_name = 'graph.bsnap'$/;"	v
graph_ptr	src/graph-server/graph/vertex.hpp	/^    RawGraph *graph_ptr;$/;"	m	class:Vertex
graph_type	miscs/awslogs/calc-ec2-cost.py	/^    graph_type = sys.argv[1]$/;"	v
gserverIps	src/weight-server/weightserver.hpp	/^    std::vector<std::string> gserverIps;$/;"	m	class:WeightServer
gsockets	src/weight-server/weightserver.hpp	/^    std::vector<zmq::socket_t> gsockets; \/\/ send stop message to master graph server$/;"	m	class:WeightServer
gtimers	src/common/utils.cpp	/^GPUTimers gtimers;$/;"	v
hadamardMul	src/graph-server/commmanager/CPU_comm.cpp	/^Matrix hadamardMul(Matrix &A, Matrix &B) {$/;"	f
hadamardSub	src/graph-server/commmanager/CPU_comm.cpp	/^Matrix hadamardSub(Matrix &A, Matrix &B) {$/;"	f
halt	src/graph-server/commmanager/lambda_comm.hpp	/^    bool halt;$/;"	m	class:LambdaComm
handle_command	ec2man/__init__.py	/^    from ec2man.command import handle_command$/;"	i
handle_command	ec2man/command.py	/^def handle_command(ec2_cli, ctx, instance, op, args):$/;"	f
has_cache	miscs/dgl-sampling/load_amazon.py	/^    def has_cache(self):$/;"	m	class:AmazonDataset
has_cache	miscs/dgl-sampling/load_reddit_large.py	/^    def has_cache(self):$/;"	m	class:RedditLargeDataset
head	inputs/featuresToBinary.cpp	/^static FeaturesHeader head;$/;"	v	file:
head	inputs/labelsToBinary.cpp	/^static LabelsHeader head;$/;"	v	file:
header	inputs/graphToBinary.cpp	/^HeaderType header;$/;"	v
help	miscs/dgl-non-sampling/train.py	/^            help="Weight for L2 loss")$/;"	v
help	miscs/dgl-non-sampling/train.py	/^            help="dropout probability")$/;"	v
help	miscs/dgl-non-sampling/train.py	/^            help="gpu")$/;"	v
help	miscs/dgl-non-sampling/train.py	/^            help="graph self-loop (default=False)")$/;"	v
help	miscs/dgl-non-sampling/train.py	/^            help="learning rate")$/;"	v
help	miscs/dgl-non-sampling/train.py	/^            help="number of hidden gcn layers")$/;"	v
help	miscs/dgl-non-sampling/train.py	/^            help="number of hidden gcn units")$/;"	v
help	miscs/dgl-non-sampling/train.py	/^            help="number of training epochs")$/;"	v
help	miscs/dgl-sampling/train_dist.py	/^                        help="the number of GPU device. Use -1 for CPU training")$/;"	v
help	miscs/dgl-sampling/train_dist.py	/^        help="Number of sampling processes. Use 0 for no extra process.")$/;"	v
help	miscs/dgl-sampling/train_dist_unsupervised.py	/^                        help="the number of GPU device. Use -1 for CPU training")$/;"	v
help	miscs/dgl-sampling/train_dist_unsupervised.py	/^        help="Number of sampling processes. Use 0 for no extra process.")$/;"	v
help	miscs/dgl-sampling/train_dist_unsupervised.py	/^        help="sharing neg nodes for positive nodes")$/;"	v
help	miscs/dgl-sampling/train_dist_unsupervised.py	/^        help="whether to remove edges during sampling")$/;"	v
help_str	ec2man/__init__.py	/^help_str = ("Usage: python3 -m ec2man help\\n"$/;"	v
id	src/graph-server/nodemanager/nodemanager.hpp	/^    unsigned id;$/;"	m	struct:node
id	src/graph-server/nodemanager/nodemanager.hpp	/^    unsigned id;$/;"	m	struct:nodeMessage
idx_end	miscs/check-correctness/feat-bsnap-to-text.py	/^        idx_end = idx_start + num_features * 4$/;"	v
idx_start	miscs/check-correctness/feat-bsnap-to-text.py	/^        idx_start = 4 + i * num_features * 4$/;"	v
inBarrier	src/graph-server/nodemanager/nodemanager.hpp	/^    bool inBarrier = false;$/;"	m	class:NodeManager
inDim	src/funcs/operators.hpp	/^    unsigned inDim, outDim;$/;"	m	struct:Linear
inEdgeGhostVertices	src/graph-server/graph/graph.hpp	/^    std::map<unsigned, GhostVertex> inEdgeGhostVertices;$/;"	m	class:RawGraph
inEdges	src/graph-server/graph/vertex.hpp	/^    std::vector<InEdge> inEdges;$/;"	m	class:Vertex
incLayerGAT	src/graph-server/engine/utils.cpp	/^Chunk Engine::incLayerGAT(const Chunk &chunk) {$/;"	f	class:Engine
incLayerGCN	src/graph-server/engine/utils.cpp	/^Chunk Engine::incLayerGCN(const Chunk &chunk) {$/;"	f	class:Engine
incrementDegree	src/graph-server/graph/vertex.hpp	/^    void incrementDegree() { ++degree; }$/;"	f	class:GhostVertex
incrementNumGlobalEdges	src/graph-server/graph/graph.hpp	/^    void incrementNumGlobalEdges() { ++numGlobalEdges; }$/;"	f	class:RawGraph
incrementNumLocalInEdges	src/graph-server/graph/graph.hpp	/^    void incrementNumLocalInEdges() { ++numLocalInEdges; }$/;"	f	class:RawGraph
incrementNumLocalOutEdges	src/graph-server/graph/graph.hpp	/^    void incrementNumLocalOutEdges() { ++numLocalOutEdges; }$/;"	f	class:RawGraph
inference	miscs/dgl-sampling/train_dist.py	/^    def inference(self, g, x, batch_size, device):$/;"	m	class:DistSAGE
inference	miscs/dgl-sampling/train_dist_unsupervised.py	/^    def inference(self, g, x, batch_size, device):$/;"	m	class:DistSAGE
inference	miscs/dgl-sampling/train_dist_unsupervised.py	/^    def inference(self, g, x, batch_size, device):$/;"	m	class:SAGE
info	src/graph-server/nodemanager/nodemanager.hpp	/^    unsigned info;$/;"	m	struct:nodeMessage
info_arch	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_compiler	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_cray	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v
info_language_dialect_default	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^const char* info_language_dialect_default = "INFO" ":" "dialect_default["$/;"	v
info_platform	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_simulate	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v
info_simulate_version	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_simulate_version[] = {$/;"	v
info_version	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version[] = {$/;"	v
info_version_internal	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version_internal[] = {$/;"	v
init	miscs/dgl-non-sampling/graphconv.py	/^from torch.nn import init$/;"	i
init	src/common/zmq.hpp	/^        inline void init(context_t& context_, int type_)$/;"	f	class:zmq::socket_type::socket_t
init	src/graph-server/commmanager/commmanager.cpp	/^CommManager::init(NodeManager& nodeManager, unsigned ctxThds) {$/;"	f	class:CommManager
init	src/graph-server/engine/engine.cpp	/^void Engine::init(int argc, char *argv[]) {$/;"	f	class:Engine
init	src/graph-server/graph/graph.cpp	/^void Graph::init(std::string graphFile) {$/;"	f	class:Graph
init	src/graph-server/graph/graph.hpp	/^void CSCMatrix<T>::init(RawGraph &rgraph) {$/;"	f	class:CSCMatrix
init	src/graph-server/graph/graph.hpp	/^void CSRMatrix<T>::init(RawGraph &rgraph) {$/;"	f	class:CSRMatrix
init	src/graph-server/nodemanager/nodemanager.cpp	/^NodeManager::init(std::string dshMachinesFile, std::string myPrIpFile,$/;"	f	class:NodeManager
init	src/graph-server/parallel/barrier.hpp	/^    void init(unsigned n = 0) {$/;"	f	class:Barrier
init	src/graph-server/parallel/cond.hpp	/^    void init(Lock& mutex_lock) {$/;"	f	class:Cond
init	src/graph-server/parallel/lock.hpp	/^    void init() {$/;"	f	class:Lock
init	src/graph-server/parallel/rwlock.hpp	/^    void init() {$/;"	f	class:RWLock
initAdamOpt	src/weight-server/weightserver.cpp	/^void WeightServer::initAdamOpt(bool adam) {$/;"	f	class:WeightServer
initBias	src/weight-server/weightserver.cpp	/^WeightServer::initBias(unsigned dim, float initVal) {$/;"	f	class:WeightServer
initWServerComm	src/weight-server/weightserver.cpp	/^WeightServer::initWServerComm(std::vector<std::string> &allNodeIps) {$/;"	f	class:WeightServer
initWeights	src/weight-server/weightserver.cpp	/^WeightServer::initWeights() {$/;"	f	class:WeightServer
initWeightsMasterGAT	src/weight-server/weightserver.cpp	/^WeightServer::initWeightsMasterGAT() {$/;"	f	class:WeightServer
initWeightsMasterGCN	src/weight-server/weightserver.cpp	/^WeightServer::initWeightsMasterGCN() {$/;"	f	class:WeightServer
input_feats	miscs/check-correctness/check-correctness.py	/^input_feats = np.empty(shape=[num_vertices, layer_config[0]], dtype=float)$/;"	v
install_aws_runtime	gnnman/helpers/aws-lambda-runtime.install	/^function install_aws_runtime {$/;"	f
install_aws_sdk	gnnman/helpers/aws-cpp-sdk.install	/^function install_aws_sdk {$/;"	f
instance_manager	ec2man/__init__.py	/^import ec2man.instance_manager$/;"	i
internal_ptr	src/graph-server/parallel/cond.hpp	/^    pthread_cond_t *internal_ptr() {$/;"	f	class:Cond
internal_ptr	src/graph-server/parallel/lock.hpp	/^    pthread_mutex_t *internal_ptr() {$/;"	f	class:Lock
invokeLambda	src/graph-server/commmanager/lambda_comm.cpp	/^void LambdaComm::invokeLambda(const Chunk &chunk) {$/;"	f	class:LambdaComm
ip	src/graph-server/nodemanager/nodemanager.hpp	/^    std::string ip;$/;"	m	struct:node
isFirstLayer	src/common/utils.hpp	/^    bool isFirstLayer() {$/;"	f	struct:Chunk
isLastLayer	src/common/utils.hpp	/^    bool isLastLayer() {$/;"	f	struct:Chunk
isLastLayer	src/graph-server/engine/utils.cpp	/^bool Engine::isLastLayer(const Chunk &chunk) {$/;"	f	class:Engine
json	ec2man/__init__.py	/^import json$/;"	i
json	miscs/aligraph/train_supervised.py	/^import json$/;"	i
kaimingInitializer	src/weight-server/weightserver.cpp	/^WeightServer::kaimingInitializer(unsigned dim1, unsigned dim2) {$/;"	f	class:WeightServer
kbind	src/common/zmq.hpp	/^        inline bool kbind (const char *addr_)$/;"	f	class:zmq::socket_type::socket_t
krecv	src/common/zmq.hpp	/^        inline bool krecv (message_t *msg_, int flags_ = 0)$/;"	f	class:zmq::socket_type::socket_t
ksend	src/common/zmq.hpp	/^        inline bool ksend (message_t &msg_, int flags_ = 0)$/;"	f	class:zmq::socket_type::socket_t
ksetsockopt	src/common/zmq.hpp	/^        inline bool ksetsockopt (int option_, const void *optval_,$/;"	f	class:zmq::socket_type::socket_t
ksetsockopt	src/common/zmq.hpp	/^        template<typename T> bool ksetsockopt(int option_, T const& optval)$/;"	f	class:zmq::socket_type::socket_t
labelKinds	inputs/labelsToBinary.cpp	/^    LabelType labelKinds;$/;"	m	struct:LabelsHeader	file:
labelKinds	src/graph-server/engine/engine.hpp	/^    unsigned labelKinds;$/;"	m	struct:LabelsHeaderType
label_file	miscs/check-correctness/check-correctness.py	/^label_file = file_dir + "labels"$/;"	v
label_kinds	miscs/generate-dataset/generate.py	/^label_kinds = 41$/;"	v
labels	miscs/dgl-sampling/load_amazon.py	/^    def labels(self):$/;"	m	class:AmazonDataset
labels	miscs/dgl-sampling/load_reddit_large.py	/^    def labels(self):$/;"	m	class:RedditLargeDataset
labelsFile	src/graph-server/engine/engine.hpp	/^    std::string labelsFile;$/;"	m	class:Engine
labels_file_name	miscs/aligraph/convert-to-aligraph.py	/^labels_file_name = 'labels.bsnap'$/;"	v
lambdaName	src/graph-server/engine/engine.hpp	/^    std::string lambdaName;$/;"	m	class:Engine
lambdaOut	src/graph-server/commmanager/lambda_comm.hpp	/^    std::ofstream lambdaOut;$/;"	m	class:LambdaComm
lambda_base_price	calculate-price.py	/^lambda_base_price = 0.0000166667$/;"	v
lambda_function_price	calculate-price.py	/^lambda_function_price = lambda_base_price \/ (1024 \/ lambda_memory_size) \/ 1000$/;"	v
lambda_memory_size	calculate-price.py	/^lambda_memory_size = float(response['MemorySize'])$/;"	v
lambda_name	calculate-price.py	/^            lambda_name = line.split()[6].split(':')[1]$/;"	v
lambda_name	calculate-price.py	/^lambda_name=''$/;"	v
launch_ec2_instances	ec2man/instance_manager.py	/^def launch_ec2_instances(input_args):$/;"	f
layer	src/common/utils.hpp	/^    unsigned layer;$/;"	m	struct:Chunk
layer	src/graph-server/engine/engine.hpp	/^    unsigned layer = 0;$/;"	m	class:Engine
layerConfig	src/graph-server/engine/engine.hpp	/^    std::vector<unsigned> layerConfig;$/;"	m	class:Engine
layerConfigFile	src/graph-server/engine/engine.hpp	/^    std::string layerConfigFile;$/;"	m	class:Engine
layer_config	miscs/check-correctness/check-correctness.py	/^layer_config = (602, 1000, 41)$/;"	v
leakyReLU	src/funcs/gat/ops/forward_ops.cpp	/^leakyReLU(Matrix& mat) {$/;"	f
leakyReLU	src/graph-server/engine/ops/tensors.cpp	/^FeatType Engine::leakyReLU(FeatType f) {$/;"	f	class:Engine
leakyReLU	src/graph-server/engine/ops/tensors.cpp	/^FeatType* Engine::leakyReLU(FeatType* matxData, unsigned vecSize) {$/;"	f	class:Engine
leakyReLUDerivative	src/funcs/gat/ops/backward_ops.cpp	/^leakyReLUDerivative(Matrix& mat) {$/;"	f
leakyRelu	src/graph-server/commmanager/CPU_comm.cpp	/^Matrix leakyRelu(Matrix &mat) {$/;"	f
leakyReluBackward	src/graph-server/commmanager/CPU_comm.cpp	/^Matrix leakyReluBackward(Matrix &mat) {$/;"	f
learning_rate	miscs/check-correctness/check-correctness.py	/^learning_rate = 0.1$/;"	v
learning_rate	src/weight-server/AdamOptimizer.hpp	/^    float learning_rate;$/;"	m	class:AdamOptimizer
learning_rate	src/weight-server/weightserver.hpp	/^    float learning_rate;$/;"	m	class:WeightServer
line	miscs/check-correctness/check-correctness.py	/^        line = line.strip()$/;"	v
line_sum1	miscs/compare_output.py	/^        line_sum1 = sum_line(lines1[l])$/;"	v
line_sum2	miscs/compare_output.py	/^        line_sum2 = sum_line(lines2[l])$/;"	v
lines1	miscs/compare_output.py	/^lines1 = f1.read().split('\\n')$/;"	v
lines2	miscs/compare_output.py	/^lines2 = f2.read().split('\\n')$/;"	v
listenerPort	src/weight-server/weightserver.hpp	/^    unsigned listenerPort;$/;"	m	class:WeightServer
lk	src/graph-server/engine/engine.hpp	/^    Lock lk;$/;"	m	class:LockChunkQueue
lm	miscs/dgl-sampling/train_dist_unsupervised.py	/^import sklearn.linear_model as lm$/;"	i
load	miscs/dgl-sampling/load_amazon.py	/^    def load(self):$/;"	m	class:AmazonDataset
load	miscs/dgl-sampling/load_reddit_large.py	/^    def load(self):$/;"	m	class:RedditLargeDataset
loadChunks	src/graph-server/engine/utils.cpp	/^void Engine::loadChunks() {$/;"	f	class:Engine
loadWServerIps	src/graph-server/commmanager/lambda_comm.cpp	/^void LambdaComm::loadWServerIps(std::string wsFile) {$/;"	f	class:LambdaComm
loadWeightServers	src/graph-server/commmanager/CPU_comm.cpp	/^void loadWeightServers(std::vector<char *> &addresses,$/;"	f
load_data	miscs/dgl-sampling/train_dist.py	/^from dgl.data import register_data_args, load_data$/;"	i
load_data	miscs/dgl-sampling/train_dist_unsupervised.py	/^from dgl.data import register_data_args, load_data$/;"	i
load_data	miscs/numpy-gnn/check.py	/^from load_data import load_data, load_weights$/;"	i
load_data	miscs/numpy-gnn/load_data.py	/^def load_data(base_dir, dataset, binary=True):$/;"	f
load_data	miscs/numpy-gnn/train.py	/^from load_data import load_data, load_weights$/;"	i
load_graph	miscs/aligraph/train_supervised.py	/^def load_graph(config):$/;"	f
load_graphs	miscs/dgl-sampling/load_amazon.py	/^from dgl.data.utils import _get_dgl_url, generate_mask_tensor, load_graphs, save_graphs, deprecate_property$/;"	i
load_graphs	miscs/dgl-sampling/load_reddit_large.py	/^from dgl.data.utils import _get_dgl_url, generate_mask_tensor, load_graphs, save_graphs, deprecate_property$/;"	i
load_graphs	miscs/dgl-sampling/train_dist.py	/^from dgl.data.utils import load_graphs$/;"	i
load_graphs	miscs/dgl-sampling/train_dist_unsupervised.py	/^from dgl.data.utils import load_graphs$/;"	i
load_subtensor	miscs/dgl-sampling/train_dist.py	/^def load_subtensor(g, seeds, input_nodes, device):$/;"	f
load_subtensor	miscs/dgl-sampling/train_dist_unsupervised.py	/^def load_subtensor(g, input_nodes, device):$/;"	f
load_weights	miscs/numpy-gnn/check.py	/^from load_data import load_data, load_weights$/;"	i
load_weights	miscs/numpy-gnn/load_data.py	/^def load_weights(weights_file, layer_config):$/;"	f
load_weights	miscs/numpy-gnn/train.py	/^from load_data import load_data, load_weights$/;"	i
localId	src/common/utils.hpp	/^    unsigned localId;$/;"	m	struct:Chunk
localId	src/graph-server/graph/vertex.hpp	/^    unsigned localId;     \/\/ Added to serve as the index in the static values region.$/;"	m	class:GhostVertex
localId	src/graph-server/graph/vertex.hpp	/^    unsigned localId;$/;"	m	class:Vertex
localInEdgeCnt	src/graph-server/graph/graph.hpp	/^    unsigned long long localInEdgeCnt = 0;$/;"	m	class:Graph
localOutEdgeCnt	src/graph-server/graph/graph.hpp	/^    unsigned long long localOutEdgeCnt = 0;$/;"	m	class:Graph
localToGlobalId	src/graph-server/graph/graph.hpp	/^    std::map<unsigned, unsigned> localToGlobalId;$/;"	m	class:RawGraph
localToGlobalId	src/graph-server/graph/graph.hpp	/^    std::vector<unsigned> localToGlobalId;$/;"	m	class:Graph
localUpdCnt	src/weight-server/weighttensor.hpp	/^    unsigned localUpdCnt;$/;"	m	struct:WeightTensor
localUpdMat	src/weight-server/weighttensor.hpp	/^    Matrix localUpdMat;$/;"	m	struct:WeightTensor
localUpdTot	src/weight-server/weighttensor.hpp	/^    unsigned localUpdTot;$/;"	m	struct:WeightTensor
localUpdate	src/weight-server/weighttensor.cpp	/^unsigned WeightTensor::localUpdate(FeatType *updTensor) {$/;"	f	class:WeightTensor
localVertexLabelsPtr	src/graph-server/engine/engine.hpp	/^    inline FeatType *localVertexLabelsPtr(unsigned lvid) {$/;"	f	class:Engine
localVerticesLabels	src/graph-server/engine/engine.hpp	/^    FeatType *localVerticesLabels = NULL;$/;"	m	class:Engine
localVtxCnt	src/graph-server/graph/graph.hpp	/^    unsigned localVtxCnt;$/;"	m	class:Graph
locations	src/graph-server/graph/graph.hpp	/^    char *locations;                \/\/ edge locations vector$/;"	m	class:CSCMatrix
locations	src/graph-server/graph/graph.hpp	/^    char *locations;             \/\/ edge locations vector$/;"	m	class:CSRMatrix
lock	src/graph-server/engine/engine.hpp	/^    void lock() { lk.lock(); }$/;"	f	class:LockChunkQueue
lock	src/graph-server/graph/vertex.hpp	/^    RWLock lock;$/;"	m	class:GhostVertex
lock	src/graph-server/graph/vertex.hpp	/^    RWLock lock;$/;"	m	class:Vertex
lock	src/graph-server/parallel/lock.hpp	/^    void lock() {$/;"	f	class:Lock
lockControlPublishers	src/graph-server/commmanager/commmanager.hpp	/^    Lock *lockControlPublishers = NULL;$/;"	m	class:CommManager
lockControlSubscribers	src/graph-server/commmanager/commmanager.hpp	/^    Lock *lockControlSubscribers = NULL;$/;"	m	class:CommManager
lockDataPublisher	src/graph-server/commmanager/commmanager.hpp	/^    Lock lockDataPublisher;$/;"	m	class:CommManager
lockDataSubscriber	src/graph-server/commmanager/commmanager.hpp	/^    Lock lockDataSubscriber;$/;"	m	class:CommManager
log	src/common/utils.hpp	/^log(const unsigned nodeId, const char *format, ...) {$/;"	f
log	src/common/utils.hpp	/^log(std::ofstream& outfile, const char *msg, ...) {$/;"	f
logs_command	miscs/awslogs/calc-ec2-cost.py	/^logs_command = []$/;"	v
logs_command	miscs/awslogs/sum_lambda_time.py	/^logs_command = []$/;"	v
loss	src/graph-server/commmanager/lambda_comm.hpp	/^        float loss = 0.0;$/;"	m	struct:LambdaComm::AccLoss
loss	src/weight-server/weightserver.hpp	/^        float loss = 0.0;$/;"	m	struct:WeightServer::AccLoss
lowBound	src/common/utils.hpp	/^    unsigned lowBound;$/;"	m	struct:Chunk
lrDecay	src/weight-server/weightserver.cpp	/^void WeightServer::lrDecay() {$/;"	f	class:WeightServer
lr_t	src/weight-server/AdamOptimizer.hpp	/^    float lr_t;$/;"	m	class:AdamOptimizer
mCond	src/graph-server/parallel/cond.hpp	/^    pthread_cond_t mCond;$/;"	m	class:Cond
mFileMutex	src/common/utils.cpp	/^std::mutex mFileMutex;$/;"	v
mLock	src/graph-server/parallel/lock.hpp	/^    pthread_mutex_t mLock;$/;"	m	class:Lock
mLock_ptr	src/graph-server/parallel/cond.hpp	/^    pthread_mutex_t *mLock_ptr;$/;"	m	class:Cond
m_client	src/graph-server/commmanager/lambda_comm.hpp	/^    std::shared_ptr<Aws::Lambda::LambdaClient> m_client;$/;"	m	class:LambdaComm
main	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^int main(int argc, char* argv[])$/;"	f
main	build/CMakeFiles/FindOpenMP/OpenMPCheckVersion.cpp	/^int main(void)$/;"	f
main	build/CMakeFiles/FindOpenMP/OpenMPTryFlag.cpp	/^int main(void) {$/;"	f
main	ec2man/__init__.py	/^def main(args):$/;"	f
main	inputs/convert2csc.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	inputs/featuresToBinary.cpp	/^main(int argc, char *argv[]) {$/;"	f
main	inputs/gen-feats.cc	/^int main(int argc, char* argv[]) {$/;"	f
main	inputs/gen-labels.cc	/^int main(int argc, char* argv[]) {$/;"	f
main	inputs/generateFeatues.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	inputs/generateLabels.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	inputs/graphToBinary.cpp	/^main(int argc, char* argv[]) {$/;"	f
main	inputs/labelsToBinary.cpp	/^main(int argc, char *argv[]) {$/;"	f
main	inputs/partitioner.cpp	/^main(int argc, char *argv[]) {$/;"	f
main	miscs/aligraph/train_supervised.py	/^def main():$/;"	f
main	miscs/dgl-non-sampling/header.c	/^int main()$/;"	f
main	miscs/dgl-non-sampling/train.py	/^def main(args):$/;"	f
main	miscs/dgl-sampling/train_dist.py	/^def main(args):$/;"	f
main	miscs/dgl-sampling/train_dist_unsupervised.py	/^def main(args):$/;"	f
main	miscs/numpy-gnn/check.py	/^def main():$/;"	f
main	miscs/numpy-gnn/train.py	/^def main():$/;"	f
main	src/funcs/dnnl-forward-gcn/forward.cpp	/^main(int argc, char *argv[]) {$/;"	f
main	src/funcs/gat/main.cpp	/^main(int argc, char *argv[]) {$/;"	f
main	src/funcs/gcn/main-new-identity.cpp	/^main(int argc, char *argv[]) {$/;"	f
main	src/funcs/gcn/main.cpp	/^main(int argc, char *argv[]) {$/;"	f
main	src/graph-server/main.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	src/weight-server/main.cpp	/^main(int argc, char *argv[]) {$/;"	f
makeBarrier	src/graph-server/engine/utils.cpp	/^void Engine::makeBarrier() { nodeManager.barrier(); }$/;"	f	class:Engine
manager	src/graph-server/commmanager/lambdaworker.hpp	/^    LambdaComm *manager;$/;"	m	class:LambdaWorker
markFinish	src/graph-server/commmanager/lambdaworker.cpp	/^void LambdaWorker::markFinish(zmq::message_t& client_id, Chunk &chunk) {$/;"	f	class:LambdaWorker
maskout	src/funcs/gcn/ops/backward_ops.cpp	/^void maskout(Matrix &preds, Matrix &labels) {$/;"	f
maskout	src/graph-server/commmanager/CPU_comm.cpp	/^void CPUComm::maskout(Matrix &preds, Matrix &labels) {$/;"	f	class:CPUComm
master	src/graph-server/engine/utils.cpp	/^bool Engine::master() { return nodeManager.amIMaster(); }$/;"	f	class:Engine
master	src/graph-server/nodemanager/nodemanager.hpp	/^    bool master;$/;"	m	struct:node
masterId	src/graph-server/nodemanager/nodemanager.hpp	/^    unsigned masterId;$/;"	m	class:NodeManager
mat	src/weight-server/weighttensor.hpp	/^    Matrix mat;$/;"	m	struct:RefMat
mat_cnt	miscs/check-correctness/check-correctness.py	/^    mat_cnt = -1$/;"	v
math	miscs/aligraph/convert-to-aligraph.py	/^import math$/;"	i
math	miscs/dgl-non-sampling/graphconv.py	/^import math$/;"	i
math	miscs/dgl-non-sampling/zeroopt.py	/^import math$/;"	i
math	miscs/dgl-sampling/train_dist.py	/^import argparse, time, math$/;"	i
math	miscs/dgl-sampling/train_dist_unsupervised.py	/^import argparse, time, math$/;"	i
matrixFile	src/common/utils.cpp	/^std::ofstream matrixFile;$/;"	v
matrixToFile	src/common/utils.cpp	/^void matrixToFile(std::string name, FeatType* fptr, unsigned start, unsigned end, unsigned c) {$/;"	f
maxEpoch	src/graph-server/engine/engine.hpp	/^    unsigned maxEpoch;$/;"	m	class:Engine
me	src/graph-server/nodemanager/nodemanager.hpp	/^    Node me;$/;"	m	class:NodeManager
mem_to_price	miscs/awslogs/sum_lambda_time.py	/^mem_to_price = { "128"  :  0.0000002083,$/;"	v
messageType	src/graph-server/commmanager/commmanager.hpp	/^    ControlMessageType messageType;$/;"	m	struct:controlMessage
messageType	src/graph-server/nodemanager/nodemanager.hpp	/^    NodeMessageType messageType;$/;"	m	struct:nodeMessage
message_t	src/common/zmq.hpp	/^        inline explicit message_t (size_t size_)$/;"	f	class:zmq::message_t
message_t	src/common/zmq.hpp	/^        inline message_t ()$/;"	f	class:zmq::message_t
message_t	src/common/zmq.hpp	/^        inline message_t (message_t &&rhs): msg (rhs.msg)$/;"	f	class:zmq::message_t
message_t	src/common/zmq.hpp	/^        inline message_t (void *data_, size_t size_, free_fn *ffn_,$/;"	f	class:zmq::message_t
message_t	src/common/zmq.hpp	/^        template<typename I> message_t(I first, I last):$/;"	f	class:zmq::message_t
message_t	src/common/zmq.hpp	/^    class message_t$/;"	c	namespace:zmq
mili_duration	src/common/utils.hpp	/^typedef std::chrono::duration<double, std::milli> mili_duration;$/;"	t
minEpoch	src/graph-server/engine/engine.hpp	/^    unsigned minEpoch;$/;"	m	class:Engine
mode	src/graph-server/engine/engine.hpp	/^    unsigned mode = 0;$/;"	m	class:Engine
model_fn	miscs/aligraph/train_supervised.py	/^  def model_fn():$/;"	f	function:train
momentum	src/weight-server/AdamOptimizer.hpp	/^    std::vector<FeatType *> momentum;$/;"	m	class:AdamOptimizer
monitor	src/common/zmq.hpp	/^        void monitor(socket_t &socket, const char *addr_, int events = ZMQ_EVENT_ALL)$/;"	f	class:zmq::socket_type::monitor_t
monitor	src/common/zmq.hpp	/^        void monitor(socket_t &socket, std::string const& addr, int events = ZMQ_EVENT_ALL)$/;"	f	class:zmq::socket_type::monitor_t
monitor_t	src/common/zmq.hpp	/^        monitor_t() : socketPtr(NULL) {}$/;"	f	class:zmq::socket_type::monitor_t
monitor_t	src/common/zmq.hpp	/^    class monitor_t$/;"	c	class:zmq::socket_type
move	src/common/zmq.hpp	/^        inline void move (message_t const *msg_)$/;"	f	class:zmq::message_t
mp	miscs/dgl-sampling/train_dist.py	/^import torch.multiprocessing as mp$/;"	i
mp	miscs/dgl-sampling/train_dist_unsupervised.py	/^import torch.multiprocessing as mp$/;"	i
msg	src/common/zmq.hpp	/^        zmq_msg_t msg;$/;"	m	class:zmq::message_t
msgService	src/graph-server/commmanager/CPU_comm.hpp	/^    MessageService msgService;$/;"	m	class:CPUComm
msgService	src/graph-server/commmanager/GPU_comm.hpp	/^    MessageService msgService;$/;"	m	class:GPUComm
multiprocessing	ec2man/__init__.py	/^import multiprocessing$/;"	i
myPrIpFile	src/graph-server/engine/engine.hpp	/^    std::string myPrIpFile;$/;"	m	class:Engine
myPubIpFile	src/graph-server/engine/engine.hpp	/^    std::string myPubIpFile;$/;"	m	class:Engine
my_handler	src/funcs/dnnl-forward-gcn/forward.cpp	/^my_handler(invocation_request const& request) {$/;"	f	file:
my_handler	src/funcs/gat/main.cpp	/^my_handler(invocation_request const& request) {$/;"	f
my_handler	src/funcs/gcn/main-new-identity.cpp	/^my_handler(invocation_request const& request) {$/;"	f
my_handler	src/funcs/gcn/main.cpp	/^my_handler(invocation_request const& request) {$/;"	f
nChunkEdges	src/common/matrix.hpp	/^    unsigned nChunkEdges;$/;"	m	struct:EdgeInfo
n_graph	miscs/awslogs/calc-ec2-cost.py	/^    n_graph = int(sys.argv[2])$/;"	v
n_weight	miscs/awslogs/calc-ec2-cost.py	/^    n_weight = int(sys.argv[4])$/;"	v
name	src/common/matrix.cpp	/^std::string Matrix::name() { return tensorName; }$/;"	f	class:Matrix
name	src/common/utils.hpp	/^    string name;$/;"	m	struct:TimerPlus
name	src/funcs/operators.hpp	/^    std::string name;$/;"	m	struct:Operator
nextIteration	src/weight-server/AdamOptimizer.cpp	/^void AdamOptimizer::nextIteration() {$/;"	f	class:AdamOptimizer
nn	miscs/dgl-non-sampling/gcn.py	/^import torch.nn as nn$/;"	i
nn	miscs/dgl-non-sampling/graphconv.py	/^from torch import nn$/;"	i
nn	miscs/dgl-non-sampling/train.py	/^import torch.nn as nn$/;"	i
nn	miscs/dgl-non-sampling/train.py	/^import torch.nn.functional as F$/;"	i
nn	miscs/dgl-sampling/train_dist.py	/^import dgl.nn.pytorch as dglnn$/;"	i
nn	miscs/dgl-sampling/train_dist.py	/^import torch.nn as nn$/;"	i
nn	miscs/dgl-sampling/train_dist.py	/^import torch.nn.functional as F$/;"	i
nn	miscs/dgl-sampling/train_dist_unsupervised.py	/^import dgl.nn.pytorch as dglnn$/;"	i
nn	miscs/dgl-sampling/train_dist_unsupervised.py	/^import torch.nn as nn$/;"	i
nn	miscs/dgl-sampling/train_dist_unsupervised.py	/^import torch.nn.functional as F$/;"	i
nnz	src/graph-server/graph/graph.hpp	/^    unsigned long long nnz;         \/\/ number of non-zero elements$/;"	m	class:CSCMatrix
nnz	src/graph-server/graph/graph.hpp	/^    unsigned long long nnz;      \/\/ number of non-zero elements$/;"	m	class:CSRMatrix
node	src/graph-server/nodemanager/nodemanager.hpp	/^    node() { }$/;"	f	struct:node
node	src/graph-server/nodemanager/nodemanager.hpp	/^    node(unsigned i, std::string *ip_, bool mtr) {$/;"	f	struct:node
node	src/graph-server/nodemanager/nodemanager.hpp	/^typedef struct node {$/;"	s
nodeContext	src/graph-server/nodemanager/nodemanager.hpp	/^    zmq::context_t nodeContext;$/;"	m	class:NodeManager
nodeId	src/graph-server/commmanager/CPU_comm.hpp	/^    unsigned nodeId;$/;"	m	class:CPUComm
nodeId	src/graph-server/commmanager/GPU_comm.hpp	/^    unsigned nodeId;$/;"	m	class:GPUComm
nodeId	src/graph-server/commmanager/commmanager.hpp	/^    unsigned nodeId = 0;$/;"	m	class:CommManager
nodeId	src/graph-server/commmanager/lambda_comm.cpp	/^unsigned LambdaComm::nodeId;$/;"	m	class:LambdaComm	file:
nodeId	src/graph-server/commmanager/lambda_comm.hpp	/^    static unsigned nodeId;$/;"	m	class:LambdaComm
nodeId	src/graph-server/commmanager/message_service.hpp	/^    unsigned nodeId;$/;"	m	class:MessageService
nodeId	src/graph-server/engine/engine.hpp	/^    unsigned nodeId;$/;"	m	class:Engine
nodeId	src/graph-server/graph/dataloader.hpp	/^    unsigned nodeId;$/;"	m	class:DataLoader
nodeId	src/weight-server/weightserver.hpp	/^    unsigned nodeId;$/;"	m	class:WeightServer
nodeIp	src/graph-server/commmanager/lambda_comm.hpp	/^    string nodeIp;$/;"	m	class:LambdaComm
nodeManager	src/graph-server/engine/engine.hpp	/^    NodeManager nodeManager;$/;"	m	class:Engine
nodeMessage	src/graph-server/nodemanager/nodemanager.hpp	/^    nodeMessage(NodeMessageType mType, unsigned _info = 0, unsigned _id = UINT_MAX)$/;"	f	struct:nodeMessage
nodeMessage	src/graph-server/nodemanager/nodemanager.hpp	/^typedef struct nodeMessage {$/;"	s
nodePort	src/graph-server/nodemanager/nodemanager.hpp	/^    unsigned nodePort;$/;"	m	class:NodeManager
nodePublisher	src/graph-server/nodemanager/nodemanager.hpp	/^    zmq::socket_t *nodePublisher = NULL;$/;"	m	class:NodeManager
nodeSubscriber	src/graph-server/nodemanager/nodemanager.hpp	/^    zmq::socket_t *nodeSubscriber = NULL;$/;"	m	class:NodeManager
nodesFinishedEpoch	src/graph-server/engine/engine.hpp	/^    std::vector<unsigned> nodesFinishedEpoch;$/;"	m	class:Engine
nofree	src/graph-server/commmanager/lambdaworker.cpp	/^static void nofree(void* data, void* hint) {}$/;"	f	file:
nofree	src/weight-server/serverworker.cpp	/^static void nofree(void* data, void* hint) {}$/;"	f	file:
normFactor	src/graph-server/graph/vertex.hpp	/^    EdgeType normFactor;$/;"	m	class:Vertex
normed_deg_mat	miscs/check-correctness/check-correctness.py	/^normed_deg_mat = fractional_matrix_power(deg_mat, -0.5)$/;"	v
np	miscs/aligraph/convert-to-aligraph.py	/^import numpy as np$/;"	i
np	miscs/check-correctness/check-correctness.py	/^import numpy as np$/;"	i
np	miscs/dgl-non-sampling/train.py	/^import numpy as np$/;"	i
np	miscs/dgl-sampling/load_amazon.py	/^import numpy as np$/;"	i
np	miscs/dgl-sampling/load_reddit_large.py	/^import numpy as np$/;"	i
np	miscs/dgl-sampling/train_dist.py	/^import numpy as np$/;"	i
np	miscs/dgl-sampling/train_dist_unsupervised.py	/^import numpy as np$/;"	i
np	miscs/numpy-gnn/check.py	/^import numpy as np$/;"	i
np	miscs/numpy-gnn/layers.py	/^import numpy as np$/;"	i
np	miscs/numpy-gnn/load_data.py	/^import numpy as np$/;"	i
np	miscs/numpy-gnn/loss.py	/^import numpy as np$/;"	i
np	miscs/numpy-gnn/solve_net.py	/^import numpy as np$/;"	i
np	miscs/numpy-gnn/train.py	/^import numpy as np$/;"	i
np	miscs/numpy-gnn/utils.py	/^import numpy as np$/;"	i
num	src/common/zmq.hpp	/^        int num () const$/;"	f	class:zmq::error_t
numAsyncEpochs	src/graph-server/engine/engine.hpp	/^    unsigned numAsyncEpochs = 0;$/;"	m	class:Engine
numChunk	src/graph-server/commmanager/lambda_comm.hpp	/^    unsigned numChunk;$/;"	m	class:LambdaComm
numEdges	inputs/convert2csc.cpp	/^    unsigned long long numEdges;$/;"	m	struct:BELHeaderType	file:
numEdges	inputs/graphToBinary.cpp	/^	unsigned long long numEdges;$/;"	m	struct:HeaderType	file:
numEdges	inputs/partitioner.cpp	/^    unsigned long long numEdges;$/;"	m	struct:BELHeaderType	file:
numEdges	src/common/matrix.hpp	/^    unsigned numEdges;$/;"	m	struct:EdgeTensor
numEdges	src/graph-server/graph/dataloader.hpp	/^    unsigned long long numEdges;$/;"	m	struct:BSHeaderType
numEpochs	src/graph-server/engine/engine.hpp	/^    unsigned numEpochs = 0;$/;"	m	class:Engine
numFeatures	src/graph-server/engine/engine.hpp	/^    unsigned numFeatures;$/;"	m	struct:FeaturesHeaderType
numFeautures	inputs/featuresToBinary.cpp	/^    unsigned int numFeautures;$/;"	m	struct:FeaturesHeader	file:
numFinishedEpoch	src/graph-server/engine/engine.hpp	/^    std::vector<unsigned> numFinishedEpoch;$/;"	m	class:Engine
numGlobalEdges	src/graph-server/graph/graph.hpp	/^    unsigned long long numGlobalEdges = 0;$/;"	m	class:RawGraph
numGlobalVertices	src/graph-server/graph/graph.hpp	/^    unsigned numGlobalVertices;$/;"	m	class:RawGraph
numInEdgeGhostVertices	src/graph-server/graph/graph.hpp	/^    unsigned numInEdgeGhostVertices;$/;"	m	class:RawGraph
numLambdas	src/weight-server/weightserver.hpp	/^    unsigned numLambdas; \/\/ Number of update sent back from lambdas at backprop.$/;"	m	class:WeightServer
numLambdasForward	src/graph-server/engine/engine.hpp	/^    unsigned numLambdasForward = 0;$/;"	m	class:Engine
numLayers	src/graph-server/commmanager/message_service.hpp	/^    unsigned numLayers;$/;"	m	class:MessageService
numLayers	src/graph-server/engine/engine.hpp	/^    unsigned numLayers = 0;$/;"	m	class:Engine
numListeners	src/graph-server/commmanager/lambda_comm.hpp	/^    unsigned numListeners;$/;"	m	class:LambdaComm
numLocalInEdges	src/graph-server/graph/graph.hpp	/^    unsigned long long numLocalInEdges = 0;$/;"	m	class:RawGraph
numLocalOutEdges	src/graph-server/graph/graph.hpp	/^    unsigned long long numLocalOutEdges = 0;$/;"	m	class:RawGraph
numLocalVertices	src/graph-server/commmanager/CPU_comm.hpp	/^    unsigned numLocalVertices;$/;"	m	class:CPUComm
numLocalVertices	src/graph-server/commmanager/GPU_comm.hpp	/^    unsigned numLocalVertices;$/;"	m	class:GPUComm
numLocalVertices	src/graph-server/graph/graph.hpp	/^    unsigned numLocalVertices;$/;"	m	class:RawGraph
numLvids	src/common/matrix.hpp	/^    unsigned numLvids;$/;"	m	struct:EdgeInfo
numLvids	src/common/matrix.hpp	/^    unsigned numLvids;$/;"	m	struct:EdgeTensor
numNode	src/weight-server/weightserver.hpp	/^    unsigned numNode;$/;"	m	class:WeightServer
numNodes	src/graph-server/commmanager/CPU_comm.hpp	/^    unsigned numNodes;$/;"	m	class:CPUComm
numNodes	src/graph-server/commmanager/GPU_comm.hpp	/^    unsigned numNodes;$/;"	m	class:GPUComm
numNodes	src/graph-server/commmanager/commmanager.hpp	/^    unsigned numNodes = 0;$/;"	m	class:CommManager
numNodes	src/graph-server/commmanager/lambda_comm.hpp	/^    unsigned numNodes;$/;"	m	class:LambdaComm
numNodes	src/graph-server/engine/engine.hpp	/^    unsigned numNodes;$/;"	m	class:Engine
numNodes	src/graph-server/graph/dataloader.hpp	/^    unsigned numNodes;$/;"	m	class:DataLoader
numNodes	src/graph-server/nodemanager/nodemanager.hpp	/^    unsigned numNodes;$/;"	m	class:NodeManager
numOutEdgeGhostVertices	src/graph-server/graph/graph.hpp	/^    unsigned numOutEdgeGhostVertices;$/;"	m	class:RawGraph
numRvids	src/common/matrix.hpp	/^    unsigned numRvids;$/;"	m	struct:EdgeTensor
numSyncEpochs	src/graph-server/engine/engine.hpp	/^    unsigned numSyncEpochs = 0;$/;"	m	class:Engine
numThreads	src/graph-server/parallel/threadpool.hpp	/^    unsigned numThreads;$/;"	m	class:ThreadPool
numVertices	inputs/convert2csc.cpp	/^    VertexType numVertices;$/;"	m	struct:BELHeaderType	file:
numVertices	inputs/graphToBinary.cpp	/^	VertexType numVertices;$/;"	m	struct:HeaderType	file:
numVertices	inputs/partitioner.cpp	/^    VertexType numVertices;$/;"	m	struct:BELHeaderType	file:
numVertices	src/graph-server/graph/dataloader.hpp	/^    unsigned numVertices;$/;"	m	struct:BSHeaderType
num_classes	miscs/dgl-sampling/load_amazon.py	/^    def num_classes(self):$/;"	m	class:AmazonDataset
num_classes	miscs/dgl-sampling/load_reddit_large.py	/^    def num_classes(self):$/;"	m	class:RedditLargeDataset
num_feats	miscs/check-correctness/feat-bsnap-to-text.py	/^    num_feats = struct.unpack("I", read_data[:4])[0]$/;"	v
num_features	miscs/check-correctness/feat-bsnap-to-text.py	/^num_features = 6$/;"	v
num_features	miscs/generate-dataset/generate.py	/^num_features = 602$/;"	v
num_labels	miscs/dgl-sampling/load_amazon.py	/^    def num_labels(self):$/;"	m	class:AmazonDataset
num_labels	miscs/dgl-sampling/load_reddit_large.py	/^    def num_labels(self):$/;"	m	class:RedditLargeDataset
num_vertices	miscs/check-correctness/check-correctness.py	/^num_vertices = 4039$/;"	v
num_vertices	miscs/check-correctness/feat-bsnap-to-text.py	/^num_vertices = 4039$/;"	v
num_vertices	miscs/generate-dataset/generate.py	/^num_vertices = 120000$/;"	v
nx	miscs/dgl-non-sampling/train.py	/^import networkx as nx$/;"	i
ompver_str	build/CMakeFiles/FindOpenMP/OpenMPCheckVersion.cpp	/^const char ompver_str[] = { 'I', 'N', 'F', 'O', ':', 'O', 'p', 'e', 'n', 'M',$/;"	v
on_event_accept_failed	src/common/zmq.hpp	/^        virtual void on_event_accept_failed(const zmq_event_t &event_, const char* addr_) { (void)event_; (void)addr_; }$/;"	f	class:zmq::socket_type::monitor_t
on_event_accepted	src/common/zmq.hpp	/^        virtual void on_event_accepted(const zmq_event_t &event_, const char* addr_) { (void)event_; (void)addr_; }$/;"	f	class:zmq::socket_type::monitor_t
on_event_bind_failed	src/common/zmq.hpp	/^        virtual void on_event_bind_failed(const zmq_event_t &event_, const char* addr_) { (void)event_; (void)addr_; }$/;"	f	class:zmq::socket_type::monitor_t
on_event_close_failed	src/common/zmq.hpp	/^        virtual void on_event_close_failed(const zmq_event_t &event_, const char* addr_) { (void)event_; (void)addr_; }$/;"	f	class:zmq::socket_type::monitor_t
on_event_closed	src/common/zmq.hpp	/^        virtual void on_event_closed(const zmq_event_t &event_, const char* addr_) { (void)event_; (void)addr_; }$/;"	f	class:zmq::socket_type::monitor_t
on_event_connect_delayed	src/common/zmq.hpp	/^        virtual void on_event_connect_delayed(const zmq_event_t &event_, const char* addr_) { (void)event_; (void)addr_; }$/;"	f	class:zmq::socket_type::monitor_t
on_event_connect_retried	src/common/zmq.hpp	/^        virtual void on_event_connect_retried(const zmq_event_t &event_, const char* addr_) { (void)event_; (void)addr_; }$/;"	f	class:zmq::socket_type::monitor_t
on_event_connected	src/common/zmq.hpp	/^        virtual void on_event_connected(const zmq_event_t &event_, const char* addr_) { (void)event_; (void)addr_; }$/;"	f	class:zmq::socket_type::monitor_t
on_event_disconnected	src/common/zmq.hpp	/^        virtual void on_event_disconnected(const zmq_event_t &event_, const char* addr_) { (void)event_; (void)addr_; }$/;"	f	class:zmq::socket_type::monitor_t
on_event_listening	src/common/zmq.hpp	/^        virtual void on_event_listening(const zmq_event_t &event_, const char* addr_) { (void)event_; (void)addr_; }$/;"	f	class:zmq::socket_type::monitor_t
on_event_unknown	src/common/zmq.hpp	/^        virtual void on_event_unknown(const zmq_event_t &event_, const char* addr_) { (void)event_; (void)addr_; }$/;"	f	class:zmq::socket_type::monitor_t
on_monitor_started	src/common/zmq.hpp	/^        virtual void on_monitor_started() {}$/;"	f	class:zmq::socket_type::monitor_t
onehot_encoding	miscs/numpy-gnn/solve_net.py	/^from utils import LOG_INFO, onehot_encoding, calculate_acc$/;"	i
onehot_encoding	miscs/numpy-gnn/utils.py	/^def onehot_encoding(label, max_num_class):$/;"	f
opTimes	src/graph-server/engine/utils.cpp	/^typedef std::vector<std::vector<unsigned>> opTimes;$/;"	t	file:
operator *	src/common/matrix.cpp	/^Matrix Matrix::operator*(Matrix& M) {$/;"	f	class:Matrix
operator *	src/common/matrix.cpp	/^Matrix Matrix::operator*(float rhs) {$/;"	f	class:Matrix
operator *	src/common/matrix.cpp	/^Matrix operator*(float lhs, Matrix& rhs) {$/;"	f
operator *=	src/common/matrix.cpp	/^void Matrix::operator*=(Matrix& M) {$/;"	f	class:Matrix
operator *=	src/common/matrix.cpp	/^void Matrix::operator*=(float rhs) {$/;"	f	class:Matrix
operator +	src/common/matrix.cpp	/^Matrix Matrix::operator+(Matrix& M) {$/;"	f	class:Matrix
operator +	src/common/matrix.cpp	/^Matrix Matrix::operator+(float rhs) {$/;"	f	class:Matrix
operator +	src/common/matrix.cpp	/^Matrix operator+(float lhs, Matrix& rhs) {$/;"	f
operator +=	src/common/matrix.cpp	/^void Matrix::operator+=(Matrix& M) {$/;"	f	class:Matrix
operator +=	src/common/matrix.cpp	/^void Matrix::operator+=(float rhs) {$/;"	f	class:Matrix
operator -	src/common/matrix.cpp	/^Matrix Matrix::operator-(Matrix& M) {$/;"	f	class:Matrix
operator -	src/common/matrix.cpp	/^Matrix Matrix::operator-(float rhs) {$/;"	f	class:Matrix
operator -=	src/common/matrix.cpp	/^void Matrix::operator-=(Matrix& M) {$/;"	f	class:Matrix
operator -=	src/common/matrix.cpp	/^void Matrix::operator-=(float rhs) {$/;"	f	class:Matrix
operator /	src/common/matrix.cpp	/^Matrix Matrix::operator\/(Matrix& M) {$/;"	f	class:Matrix
operator /	src/common/matrix.cpp	/^Matrix Matrix::operator\/(float rhs) {$/;"	f	class:Matrix
operator /=	src/common/matrix.cpp	/^void Matrix::operator\/=(Matrix& M) {$/;"	f	class:Matrix
operator /=	src/common/matrix.cpp	/^void Matrix::operator\/=(float rhs) {$/;"	f	class:Matrix
operator <	src/common/utils.hpp	/^    bool operator<(const Chunk &rhs) const {$/;"	f	struct:Chunk
operator ^	src/common/matrix.cpp	/^Matrix Matrix::operator^(float rhs) {$/;"	f	class:Matrix
operator ^=	src/common/matrix.cpp	/^void Matrix::operator^=(float rhs) {$/;"	f	class:Matrix
optim	miscs/dgl-sampling/train_dist.py	/^import torch.optim as optim$/;"	i
optim	miscs/dgl-sampling/train_dist_unsupervised.py	/^import torch.optim as optim$/;"	i
options	src/graph-server/commmanager/lambda_comm.hpp	/^    Aws::SDKOptions options;$/;"	m	class:LambdaComm
os	ec2man/__init__.py	/^import os$/;"	i
os	ec2man/classes.py	/^import os$/;"	i
os	ec2man/instance_manager.py	/^import os$/;"	i
os	miscs/aligraph/convert-to-aligraph.py	/^import os$/;"	i
os	miscs/aligraph/train_supervised.py	/^import os$/;"	i
os	miscs/dgl-sampling/load_amazon.py	/^import os$/;"	i
os	miscs/dgl-sampling/load_reddit_large.py	/^import os$/;"	i
os	miscs/dgl-sampling/train_dist.py	/^import os$/;"	i
os	miscs/dgl-sampling/train_dist_unsupervised.py	/^import os$/;"	i
os	miscs/numpy-gnn/load_data.py	/^import os$/;"	i
otherId	src/graph-server/graph/edge.hpp	/^    unsigned otherId;     \/\/ Id stores local_edge ? local_vid : global_vid.$/;"	m	class:Edge
outDim	src/funcs/operators.hpp	/^    unsigned inDim, outDim;$/;"	m	struct:Linear
outEdgeGhostVertices	src/graph-server/graph/graph.hpp	/^    std::map<unsigned, GhostVertex> outEdgeGhostVertices;$/;"	m	class:RawGraph
outEdges	src/graph-server/graph/vertex.hpp	/^    std::vector<OutEdge> outEdges;$/;"	m	class:Vertex
outFile	src/graph-server/engine/engine.hpp	/^    std::string outFile;$/;"	m	class:Engine
outfile	src/weight-server/weightserver.hpp	/^    std::ofstream outfile;$/;"	m	class:WeightServer
output	src/graph-server/engine/utils.cpp	/^void Engine::output() {$/;"	f	class:Engine
outputFile	src/common/utils.cpp	/^FILE* outputFile;$/;"	v
outputToFile	src/graph-server/engine/utils.cpp	/^void outputToFile(std::ofstream &outfile, std::string str) {$/;"	f
pair	src/common/zmq.hpp	/^        pair = ZMQ_PAIR$/;"	m	class:zmq::socket_type
parentId	src/graph-server/graph/vertex.hpp	/^    unsigned parentId;$/;"	m	class:Vertex
parse	miscs/awslogs/calc-ec2-cost.py	/^from dateutil.parser import parse$/;"	i
parse	src/common/utils.hpp	/^parse(const char *buf, unsigned offset) {$/;"	f
parse	src/common/utils.hpp	/^parse(const void* data, unsigned offset) {$/;"	f
parseArgs	src/graph-server/engine/utils.cpp	/^Engine::parseArgs(int argc, char *argv[]) {$/;"	f	class:Engine
parseHeader	src/weight-server/weightserver.cpp	/^void WeightServer::parseHeader(zmq::message_t &header, unsigned &sender, unsigned &topic) {$/;"	f	class:WeightServer
parseName	src/common/utils.hpp	/^parseName(const char* buf) {$/;"	f
parseName	src/common/utils.hpp	/^parseName(const void* data) {$/;"	f
parseNodeConfig	src/graph-server/nodemanager/nodemanager.cpp	/^NodeManager::parseNodeConfig(const std::string dshMachinesFile) {$/;"	f	class:NodeManager
parseNodeConfig	src/weight-server/weightserver.cpp	/^std::vector<std::string> WeightServer::parseNodeConfig(std::string &configFile, std::string &wserverFile,$/;"	f	class:WeightServer
parseNodeMsg	src/graph-server/nodemanager/nodemanager.cpp	/^inline bool NodeManager::parseNodeMsg(NodeMessage &nMsg) {$/;"	f	class:NodeManager
parseTensorDescriber	src/weight-server/weightserver.cpp	/^void WeightServer::parseTensorDescriber(zmq::message_t &td, std::string &name, unsigned &layer) {$/;"	f	class:WeightServer
parse_edge	miscs/aligraph/convert-to-aligraph.py	/^def parse_edge(edge_bin):$/;"	f
parse_header	miscs/aligraph/convert-to-aligraph.py	/^def parse_header(header):$/;"	f
parser	miscs/dgl-non-sampling/train.py	/^    parser = argparse.ArgumentParser(description='GCN')$/;"	v
parser	miscs/dgl-sampling/train_dist.py	/^    parser = argparse.ArgumentParser(description='GCN')$/;"	v
parser	miscs/dgl-sampling/train_dist_unsupervised.py	/^    parser = argparse.ArgumentParser(description='GCN')$/;"	v
parts	miscs/dgl-non-sampling/gendata.py	/^parts = 60$/;"	v
partsFile	src/graph-server/graph/dataloader.hpp	/^    std::string partsFile;$/;"	m	class:DataLoader
peek	src/common/utils.hpp	/^    double peek() {$/;"	f	struct:Timer
perform	src/graph-server/parallel/threadpool.cpp	/^ThreadPool::perform(std::function<void(unsigned, void *)> func) {$/;"	f	class:ThreadPool
perform	src/graph-server/parallel/threadpool.cpp	/^ThreadPool::perform(std::function<void(unsigned, void *)> func, void *args) {$/;"	f	class:ThreadPool
pickle	ec2man/__init__.py	/^import pickle$/;"	i
pipeline	src/graph-server/engine/engine.hpp	/^    bool pipeline = false;$/;"	m	class:Engine
pipelineHalt	src/graph-server/engine/engine.hpp	/^    bool pipelineHalt = false;$/;"	m	class:Engine
poll	src/common/zmq.hpp	/^    inline int poll (zmq_pollitem_t const* items_, int nitems_, long timeout_ = -1)$/;"	f	namespace:zmq
poll	src/common/zmq.hpp	/^    inline int poll(std::vector<zmq_pollitem_t> const& items, long timeout_ = -1)$/;"	f	namespace:zmq
poll	src/common/zmq.hpp	/^    inline int poll(std::vector<zmq_pollitem_t> const& items, std::chrono::milliseconds timeout)$/;"	f	namespace:zmq
poll	src/common/zmq.hpp	/^    inline int poll(zmq_pollitem_t const* items, size_t nitems)$/;"	f	namespace:zmq
poll	src/common/zmq.hpp	/^    inline int poll(zmq_pollitem_t const* items, size_t nitems, std::chrono::milliseconds timeout)$/;"	f	namespace:zmq
pollitem_t	src/common/zmq.hpp	/^    typedef zmq_pollitem_t pollitem_t;$/;"	t	namespace:zmq
pop	src/graph-server/engine/engine.hpp	/^    void pop() { cq.pop(); }$/;"	f	class:LockChunkQueue
populateHeader	src/common/utils.hpp	/^populateHeader(char* header, unsigned op, unsigned field1 = 0, unsigned field2 = 0, unsigned field3 = 0, unsigned field4 = 0) {$/;"	f
populateHeader	src/common/utils.hpp	/^populateHeader(void* header, unsigned op, const char* tensorName, unsigned field1 = 0,$/;"	f
populateHeader	src/common/utils.hpp	/^populateHeader(void* ptr, unsigned op, unsigned field1 = 0, unsigned field2 = 0, unsigned field3 = 0, unsigned field4 = 0) {$/;"	f
populateHeader	src/funcs/gat/ops/network_ops.hpp	/^populateHeader(void* header, unsigned op, Chunk &chunk) {$/;"	f
populateHeader	src/funcs/gcn/ops/network_ops.hpp	/^populateHeader(void* header, unsigned op, Chunk &chunk) {$/;"	f
populateHeader	src/graph-server/commmanager/message_service.cpp	/^static inline void populateHeader(void *header, unsigned op, Chunk &chunk) {$/;"	f	file:
preallocateGAT	src/graph-server/engine/ops/gat_ops.cpp	/^void Engine::preallocateGAT() {$/;"	f	class:Engine
preallocateGCN	src/graph-server/engine/ops/gcn_ops.cpp	/^void Engine::preallocateGCN() {$/;"	f	class:Engine
preallocate_tensors	src/graph-server/engine/engine.cpp	/^void Engine::preallocate_tensors(GNN gnn_type) {$/;"	f	class:Engine
predictGAT	src/graph-server/engine/ops/gat_ops.cpp	/^void Engine::predictGAT(Chunk &c) {$/;"	f	class:Engine
prefetchWeights	src/graph-server/commmanager/CPU_comm.hpp	/^    void prefetchWeights() { msgService.prefetchWeightsMatrix(); };$/;"	f	class:CPUComm
prefetchWeights	src/graph-server/commmanager/resource_comm.hpp	/^    virtual void prefetchWeights() {};$/;"	f	class:ResourceComm
prefetchWeightsMatrix	src/graph-server/commmanager/message_service.cpp	/^void MessageService::prefetchWeightsMatrix() {$/;"	f	class:MessageService
preprocess	src/graph-server/graph/dataloader.cpp	/^void DataLoader::preprocess() {$/;"	f	class:DataLoader
print	src/graph-server/graph/graph.cpp	/^void Graph::print() {$/;"	f	class:Graph
printEngineMetrics	src/graph-server/engine/utils.cpp	/^void Engine::printEngineMetrics() {$/;"	f	class:Engine
printGraphMetrics	src/graph-server/engine/utils.cpp	/^void Engine::printGraphMetrics() {$/;"	f	class:Engine
printLog	src/graph-server/utils/utils.cpp	/^printLog(const unsigned nodeId, const char *msg, ...) {$/;"	f
print_function	miscs/aligraph/gcn.py	/^from __future__ import print_function$/;"	i
print_function	miscs/aligraph/train_supervised.py	/^from __future__ import print_function$/;"	i
print_function	miscs/numpy-gnn/utils.py	/^from __future__ import print_function$/;"	i
prip	src/graph-server/nodemanager/nodemanager.hpp	/^    std::string prip;$/;"	m	struct:node
process	miscs/dgl-sampling/load_amazon.py	/^    def process(self):$/;"	m	class:AmazonDataset
process	miscs/dgl-sampling/load_reddit_large.py	/^    def process(self):$/;"	m	class:RedditLargeDataset
processEdge	src/graph-server/graph/dataloader.cpp	/^void DataLoader::processEdge(unsigned &from, unsigned &to) {$/;"	f	class:DataLoader
process_setup	ec2man/__init__.py	/^def process_setup(machine_list = 'machines'):$/;"	f
process_target	ec2man/__init__.py	/^def process_target(ctx, target, args):$/;"	f
processedGraphFile	src/graph-server/graph/dataloader.hpp	/^    std::string processedGraphFile;$/;"	m	class:DataLoader
profile_name	ec2man/__init__.py	/^        profile_name = None$/;"	v
profile_name	ec2man/__init__.py	/^    profile_name = fprofile.readline().strip().split()[0]$/;"	v
profile_name	ec2man/__init__.py	/^profile_name = ''$/;"	v
proxy	src/common/zmq.hpp	/^    inline void proxy (void *frontend, void *backend, void *capture)$/;"	f	namespace:zmq
proxy_steerable	src/common/zmq.hpp	/^    inline void proxy_steerable (void *frontend, void *backend, void *capture, void *control)$/;"	f	namespace:zmq
ptr	src/common/zmq.hpp	/^        inline context_t (context_t &&rhs) ZMQ_NOTHROW : ptr (rhs.ptr)$/;"	f	class:zmq::context_t
ptr	src/common/zmq.hpp	/^        inline socket_t(socket_t&& rhs) ZMQ_NOTHROW : ptr(rhs.ptr)$/;"	f	class:zmq::socket_type::socket_t
ptr	src/common/zmq.hpp	/^        void *ptr;$/;"	m	class:zmq::context_t
ptr	src/common/zmq.hpp	/^        void *ptr;$/;"	m	class:zmq::socket_type::socket_t
pub	src/common/zmq.hpp	/^        pub = ZMQ_PUB,$/;"	m	class:zmq::socket_type
pubMtx	src/weight-server/weightserver.hpp	/^    std::mutex pubMtx;$/;"	m	class:WeightServer
publisher	src/weight-server/weightserver.hpp	/^    zmq::socket_t publisher;$/;"	m	class:WeightServer
pull	src/common/zmq.hpp	/^        pull = ZMQ_PULL,$/;"	m	class:zmq::socket_type
push	src/common/zmq.hpp	/^        push = ZMQ_PUSH,$/;"	m	class:zmq::socket_type
push	src/graph-server/engine/engine.hpp	/^    void push(const Chunk &chunk) { cq.push(chunk); }$/;"	f	class:LockChunkQueue
push_atomic	src/graph-server/engine/engine.hpp	/^    void push_atomic(const Chunk &chunk) {$/;"	f	class:LockChunkQueue
pushoutMsg	src/weight-server/weightserver.cpp	/^void WeightServer::pushoutMsg(zmq::message_t &msg) {$/;"	f	class:WeightServer
pushoutMsgs	src/weight-server/weightserver.cpp	/^void WeightServer::pushoutMsgs(std::vector<zmq::message_t *> &msgs) {$/;"	f	class:WeightServer
qnxnto	build/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v
random	miscs/generate-dataset/generate.py	/^import random$/;"	i
randomInitializer	src/weight-server/weightserver.cpp	/^WeightServer::randomInitializer(unsigned dim1, unsigned dim2,$/;"	f	class:WeightServer
rawGraph	src/graph-server/graph/dataloader.hpp	/^    RawGraph rawGraph;$/;"	m	class:DataLoader
rawMsgPushOut	src/graph-server/commmanager/commmanager.cpp	/^CommManager::rawMsgPushOut(zmq::message_t &msg) {$/;"	f	class:CommManager
readEpochUpdates	src/graph-server/nodemanager/nodemanager.cpp	/^void NodeManager::readEpochUpdates() {$/;"	f	class:NodeManager
readFeaturesFile	src/graph-server/engine/utils.cpp	/^void Engine::readFeaturesFile(std::string &featuresFileName) {$/;"	f	class:Engine
readFile	inputs/graphToBinary.cpp	/^readFile(std::string snapFile) {$/;"	f
readLabelsFile	src/graph-server/engine/utils.cpp	/^void Engine::readLabelsFile(std::string &labelsFileName) {$/;"	f	class:Engine
readLayerConfigFile	src/graph-server/engine/utils.cpp	/^void Engine::readLayerConfigFile(std::string &layerConfigFileName) {$/;"	f	class:Engine
readLock	src/graph-server/graph/vertex.hpp	/^    void readLock() { lock.readLock(); }$/;"	f	class:GhostVertex
readLock	src/graph-server/graph/vertex.hpp	/^    void readLock() { lock.readLock(); }$/;"	f	class:Vertex
readLock	src/graph-server/parallel/rwlock.hpp	/^    void readLock() {$/;"	f	class:RWLock
readPartsFile	src/graph-server/graph/dataloader.cpp	/^void DataLoader::readPartsFile() {$/;"	f	class:DataLoader
readWriteFile	inputs/featuresToBinary.cpp	/^readWriteFile(std::string featuresFileName) {$/;"	f
readWriteFile	inputs/graphToBinary.cpp	/^readWriteFile(std::string snapFile, std::string bSFile, bool undirected, bool withheader) {$/;"	f
readWriteFile	inputs/labelsToBinary.cpp	/^readWriteFile(std::string labelsFileName) {$/;"	f
read_data	miscs/check-correctness/feat-bsnap-to-text.py	/^    read_data = fbsnap.read()$/;"	v
rebuild	src/common/zmq.hpp	/^        inline void rebuild ()$/;"	f	class:zmq::message_t
rebuild	src/common/zmq.hpp	/^        inline void rebuild (size_t size_)$/;"	f	class:zmq::message_t
rebuild	src/common/zmq.hpp	/^        inline void rebuild (void *data_, size_t size_, free_fn *ffn_,$/;"	f	class:zmq::message_t
receiver	src/weight-server/weightserver.cpp	/^void WeightServer::receiver() {$/;"	f	class:WeightServer
recordTable	src/graph-server/commmanager/lambda_comm.hpp	/^    std::map<unsigned, unsigned> recordTable; \/\/ map layer -> (avg_time)$/;"	m	class:LambdaComm
recv	src/common/zmq.hpp	/^        inline bool recv (message_t *msg_, int flags_ = 0)$/;"	f	class:zmq::socket_type::socket_t
recv	src/common/zmq.hpp	/^        inline size_t recv (void *buf_, size_t len_, int flags_ = 0)$/;"	f	class:zmq::socket_type::socket_t
recvCnt	src/graph-server/engine/engine.hpp	/^    int recvCnt = 0;$/;"	m	class:Engine
recvCntCond	src/graph-server/engine/engine.hpp	/^    Cond recvCntCond;$/;"	m	class:Engine
recvCntLock	src/graph-server/engine/engine.hpp	/^    Lock recvCntLock;$/;"	m	class:Engine
recvETensor	src/graph-server/commmanager/lambdaworker.cpp	/^int LambdaWorker::recvETensor(Chunk& chunk) {$/;"	f	class:LambdaWorker
recvETensors	src/graph-server/commmanager/lambdaworker.cpp	/^void LambdaWorker::recvETensors(zmq::message_t& client_id, Chunk& chunk) {$/;"	f	class:LambdaWorker
recvEvalData	src/graph-server/commmanager/lambdaworker.cpp	/^void LambdaWorker::recvEvalData(zmq::message_t &client_id, Chunk &chunk) {$/;"	f	class:LambdaWorker
recvEvalData	src/weight-server/serverworker.cpp	/^void ServerWorker::recvEvalData(zmq::message_t& client_id, Chunk &chunk) {$/;"	f	class:ServerWorker
recvTS	src/graph-server/commmanager/lambdaworker.hpp	/^    unsigned recvTS;$/;"	m	class:LambdaWorker
recvTensor	src/funcs/gat/ops/network_ops.cpp	/^int recvTensor(zmq::socket_t& socket, Matrix &mat) {$/;"	f
recvTensor	src/funcs/gcn/ops/network_ops.cpp	/^int recvTensor(zmq::socket_t& socket, Matrix &mat) {$/;"	f
recvTensor	src/graph-server/commmanager/lambdaworker.cpp	/^int LambdaWorker::recvTensor(Chunk &chunk) {$/;"	f	class:LambdaWorker
recvTensor	src/graph-server/commmanager/message_service.cpp	/^Matrix recvTensor(zmq::socket_t &socket) {$/;"	f
recvTensors	src/graph-server/commmanager/lambdaworker.cpp	/^void LambdaWorker::recvTensors(zmq::message_t& client_id, Chunk &chunk) {$/;"	f	class:LambdaWorker
recvTensors	src/weight-server/serverworker.cpp	/^void ServerWorker::recvTensors(zmq::message_t& client_id, Chunk &chunk) {$/;"	f	class:ServerWorker
recvThd	src/weight-server/weightserver.hpp	/^    std::thread *recvThd;$/;"	m	class:WeightServer
recvUpdateTensor	src/weight-server/serverworker.cpp	/^void ServerWorker::recvUpdateTensor(Chunk &chunk, WeightTensorMap& weights) {$/;"	f	class:ServerWorker
reduce	src/funcs/gat/ops/backward_ops.cpp	/^Matrix reduce(Matrix &mat) {$/;"	f
reduce	src/graph-server/commmanager/CPU_comm.cpp	/^Matrix reduce(Matrix &mat) {$/;"	f
refCnt	src/weight-server/weighttensor.hpp	/^    unsigned refCnt = 0;$/;"	m	struct:RefMat
ref_forward	miscs/dgl-non-sampling/graphconv.py	/^    def ref_forward(self, graph, feat, weight=None):$/;"	m	class:GraphConv
ref_step	miscs/dgl-non-sampling/zeroopt.py	/^    def ref_step(self, closure=None):$/;"	m	class:ZeroAdam
region	ec2man/__init__.py	/^    region = fprofile.readline().strip()$/;"	v
region	ec2man/__init__.py	/^region = 'us-east-2'$/;"	v
register_data_args	miscs/dgl-non-sampling/train.py	/^from dgl.data import register_data_args$/;"	i
register_data_args	miscs/dgl-sampling/train_dist.py	/^from dgl.data import register_data_args, load_data$/;"	i
register_data_args	miscs/dgl-sampling/train_dist_unsupervised.py	/^from dgl.data import register_data_args, load_data$/;"	i
relaunchCnt	src/graph-server/commmanager/lambda_comm.hpp	/^    unsigned relaunchCnt;$/;"	m	class:LambdaComm
relaunchLambda	src/graph-server/commmanager/lambda_comm.cpp	/^void LambdaComm::relaunchLambda(const Chunk &chunk) {$/;"	f	class:LambdaComm
relaunchThd	src/graph-server/commmanager/lambda_comm.hpp	/^    std::thread *relaunchThd;$/;"	m	class:LambdaComm
relaunching	src/graph-server/commmanager/lambda_comm.hpp	/^static const bool relaunching = true;$/;"	v
remaining	src/graph-server/nodemanager/nodemanager.hpp	/^    unsigned remaining;$/;"	m	class:NodeManager
rep	src/common/zmq.hpp	/^        rep = ZMQ_REP,$/;"	m	class:zmq::socket_type
report	src/common/utils.hpp	/^    void report() {$/;"	f	struct:GPUTimers
report	src/common/utils.hpp	/^    void report() {$/;"	f	struct:TimerPlus
req	src/common/zmq.hpp	/^        req = ZMQ_REQ,$/;"	m	class:zmq::socket_type
reqEdgeInfo	src/funcs/gat/ops/network_ops.cpp	/^EdgeInfo reqEdgeInfo(zmq::socket_t& socket, Chunk& chunk) {$/;"	f
reqEdgeTensor	src/funcs/gat/ops/network_ops.cpp	/^Matrix reqEdgeTensor(zmq::socket_t& socket, Chunk& chunk, std::string name) {$/;"	f
reqTensors	src/funcs/gat/ops/network_ops.cpp	/^std::vector<Matrix> reqTensors(zmq::socket_t& socket, Chunk &chunk,$/;"	f
reqTensors	src/funcs/gcn/ops/network_ops.cpp	/^std::vector<Matrix> reqTensors(zmq::socket_t& socket, Chunk &chunk,$/;"	f
reqTensors	src/graph-server/commmanager/message_service.cpp	/^std::vector<Matrix> reqTensors(zmq::socket_t &socket, Chunk &chunk,$/;"	f
requestMatrix	src/funcs/dnnl-forward-gcn/forward.cpp	/^requestMatrix(zmq::socket_t& socket, OP op, unsigned id, bool data = false) {$/;"	f	file:
requestMatrix	src/funcs/utils.hpp	/^requestMatrix(zmq::socket_t& socket, OP op, unsigned id, bool data = false) {$/;"	f
requestWeightsMatrix	src/funcs/utils.hpp	/^requestWeightsMatrix(zmq::socket_t& socket, unsigned layer) {$/;"	f
required	miscs/dgl-non-sampling/zeroopt.py	/^from torch.optim.optimizer import Optimizer, required$/;"	i
resComm	src/graph-server/engine/engine.hpp	/^    ResourceComm *resComm;$/;"	m	class:Engine
reset	src/common/utils.hpp	/^    void reset() {$/;"	f	struct:BackoffSleeper
reset_parameters	miscs/dgl-non-sampling/graphconv.py	/^    def reset_parameters(self):$/;"	m	class:GraphConv
response	calculate-price.py	/^response = client.get_function_configuration(FunctionName=lambda_name)$/;"	v
router	src/common/zmq.hpp	/^        router = ZMQ_ROUTER,$/;"	m	class:zmq::socket_type
rowCnt	src/graph-server/graph/graph.hpp	/^    unsigned rowCnt;$/;"	m	class:CSRMatrix
rowIdxs	src/graph-server/graph/graph.hpp	/^    unsigned *rowIdxs;              \/\/ indices of nz elements in each column$/;"	m	class:CSCMatrix
rowPtrs	src/graph-server/graph/graph.hpp	/^    unsigned long long *rowPtrs; \/\/ pointers to the start of each row$/;"	m	class:CSRMatrix
row_idx	miscs/check-correctness/check-correctness.py	/^            row_idx = 0$/;"	v
row_idx	miscs/check-correctness/check-correctness.py	/^    row_idx = 0$/;"	v
rows	src/common/matrix.hpp	/^    unsigned rows;$/;"	m	class:Matrix
run	miscs/dgl-sampling/train_dist.py	/^def run(args, device, data):$/;"	f
run	miscs/dgl-sampling/train_dist_unsupervised.py	/^def run(args, device, data):$/;"	f
run	src/graph-server/engine/engine.cpp	/^void Engine::run() {$/;"	f	class:Engine
run	src/weight-server/weightserver.cpp	/^WeightServer::run() {$/;"	f	class:WeightServer
runPipeline	src/graph-server/engine/engine.cpp	/^void Engine::runPipeline() {$/;"	f	class:Engine
running	src/graph-server/parallel/threadpool.hpp	/^    bool running;$/;"	m	class:ThreadPool
rwlock	src/graph-server/parallel/rwlock.hpp	/^    pthread_rwlock_t rwlock;$/;"	m	class:RWLock
sample_blocks	miscs/dgl-sampling/train_dist.py	/^    def sample_blocks(self, seeds):$/;"	m	class:NeighborSampler
sample_blocks	miscs/dgl-sampling/train_dist_unsupervised.py	/^    def sample_blocks(self, seed_edges):$/;"	m	class:NeighborSampler
sample_blocks	miscs/dgl-sampling/train_dist_unsupervised.py	/^    def sample_blocks(self, seeds):$/;"	m	class:PosNeighborSampler
save	miscs/dgl-sampling/load_amazon.py	/^    def save(self):$/;"	m	class:AmazonDataset
save	miscs/dgl-sampling/load_reddit_large.py	/^    def save(self):$/;"	m	class:RedditLargeDataset
save_graphs	miscs/dgl-sampling/load_amazon.py	/^from dgl.data.utils import _get_dgl_url, generate_mask_tensor, load_graphs, save_graphs, deprecate_property$/;"	i
save_graphs	miscs/dgl-sampling/load_reddit_large.py	/^from dgl.data.utils import _get_dgl_url, generate_mask_tensor, load_graphs, save_graphs, deprecate_property$/;"	i
savedETensors	src/graph-server/commmanager/lambda_comm.hpp	/^    std::vector<ETensorMap>& savedETensors;$/;"	m	class:LambdaComm
savedEdgeTensors	src/graph-server/engine/engine.hpp	/^    std::vector< ETensorMap > savedEdgeTensors;$/;"	m	class:Engine
savedNNTensors	src/graph-server/commmanager/CPU_comm.hpp	/^    std::vector<TensorMap> &savedNNTensors;$/;"	m	class:CPUComm
savedNNTensors	src/graph-server/commmanager/GPU_comm.hpp	/^    std::vector<TensorMap> &savedNNTensors;$/;"	m	class:GPUComm
savedNNTensors	src/graph-server/commmanager/lambda_comm.hpp	/^    std::vector<TensorMap>& savedNNTensors;$/;"	m	class:LambdaComm
savedNNTensors	src/graph-server/engine/engine.hpp	/^    std::vector< TensorMap > savedNNTensors;$/;"	m	class:Engine
scatterGAT	src/graph-server/engine/ops/gat_ops.cpp	/^void Engine::scatterGAT(Chunk &c) {$/;"	f	class:Engine
scatterGCN	src/graph-server/engine/ops/gcn_ops.cpp	/^void Engine::scatterGCN(Chunk &c) {$/;"	f	class:Engine
scatterWorkFunc	src/graph-server/engine/ops/pipeline.cpp	/^void Engine::scatterWorkFunc(unsigned tid) {$/;"	f	class:Engine
schQueue	src/graph-server/engine/engine.hpp	/^    LockChunkQueue schQueue;$/;"	m	class:Engine
scheduleAsyncFunc	src/graph-server/engine/ops/pipeline.cpp	/^void Engine::scheduleAsyncFunc(unsigned tid) {$/;"	f	class:Engine
scheduleFunc	src/graph-server/engine/ops/pipeline.cpp	/^void Engine::scheduleFunc(unsigned tid) {$/;"	f	class:Engine
scipy	miscs/dgl-sampling/load_amazon.py	/^import scipy.sparse as sp$/;"	i
scipy	miscs/dgl-sampling/load_reddit_large.py	/^import scipy.sparse as sp$/;"	i
selectWeightServer	src/graph-server/commmanager/lambda_comm.cpp	/^const char* LambdaComm::selectWeightServer(unsigned chunkId) {$/;"	f	class:LambdaComm
send	src/common/zmq.hpp	/^        inline bool send (message_t &&msg_, int flags_ = 0)$/;"	f	class:zmq::socket_type::socket_t
send	src/common/zmq.hpp	/^        inline bool send (message_t &msg_, int flags_ = 0)$/;"	f	class:zmq::socket_type::socket_t
send	src/common/zmq.hpp	/^        inline size_t send (const void *buf_, size_t len_, int flags_ = 0)$/;"	f	class:zmq::socket_type::socket_t
send	src/common/zmq.hpp	/^        template<typename I> bool send(I first, I last, int flags_=0)$/;"	f	class:zmq::socket_type::socket_t
sendAccLoss	src/funcs/gat/ops/network_ops.cpp	/^void sendAccLoss(zmq::socket_t &dsocket, zmq::socket_t &wsocket, Matrix &predicts, Matrix &labels, Chunk &chunk) {$/;"	f
sendAccLoss	src/funcs/gcn/ops/network_ops.cpp	/^void sendAccLoss(zmq::socket_t &dsocket, zmq::socket_t &wsocket, Matrix &predicts, Matrix &labels, Chunk &chunk) {$/;"	f
sendAccloss	src/graph-server/commmanager/message_service.cpp	/^void MessageService::sendAccloss(float acc, float loss, unsigned vtcsCnt) {$/;"	f	class:MessageService
sendEdgeInfo	src/graph-server/commmanager/lambdaworker.cpp	/^void LambdaWorker::sendEdgeInfo(zmq::message_t& client_id, Chunk& chunk) {$/;"	f	class:LambdaWorker
sendEdgeTensor	src/graph-server/commmanager/lambdaworker.cpp	/^void LambdaWorker::sendEdgeTensor(zmq::message_t& client_id, Chunk& chunk) {$/;"	f	class:LambdaWorker
sendEdgeTensorChunk	src/graph-server/commmanager/lambdaworker.cpp	/^void LambdaWorker::sendEdgeTensorChunk(Matrix& eTensor, Chunk& chunk) {$/;"	f	class:LambdaWorker
sendEdgeTensors	src/funcs/gat/ops/network_ops.cpp	/^int sendEdgeTensors(zmq::socket_t& socket, Chunk &chunk,$/;"	f
sendEpochUpdate	src/graph-server/engine/utils.cpp	/^void Engine::sendEpochUpdate(unsigned currEpoch) {$/;"	f	class:Engine
sendEpochUpdate	src/graph-server/nodemanager/nodemanager.cpp	/^void NodeManager::sendEpochUpdate(unsigned epoch) {$/;"	f	class:NodeManager
sendFinMsg	src/funcs/gat/ops/network_ops.cpp	/^int sendFinMsg(zmq::socket_t& socket, Chunk &chunk) {$/;"	f
sendFinMsg	src/funcs/gcn/ops/network_ops.cpp	/^int sendFinMsg(zmq::socket_t& socket, Chunk &chunk) {$/;"	f
sendInfoMessage	src/graph-server/commmanager/weight_comm.cpp	/^void sendInfoMessage(zmq::socket_t& wsocket, unsigned cnt) {$/;"	f
sendMatrices	src/funcs/dnnl-forward-gcn/forward.cpp	/^sendMatrices(Matrix& zResult, Matrix& actResult, zmq::socket_t& socket, unsigned id) {$/;"	f	file:
sendMatrices	src/funcs/utils.hpp	/^sendMatrices(Matrix& zResult, Matrix& actResult, zmq::socket_t& socket, unsigned id) {$/;"	f
sendTS	src/graph-server/commmanager/lambdaworker.hpp	/^    unsigned sendTS;$/;"	m	class:LambdaWorker
sendTensor	src/graph-server/commmanager/lambdaworker.cpp	/^void LambdaWorker::sendTensor(Matrix &tensor, Chunk &chunk, unsigned& more) {$/;"	f	class:LambdaWorker
sendTensor	src/weight-server/serverworker.cpp	/^void ServerWorker::sendTensor(Matrix& tensor, unsigned& more) {$/;"	f	class:ServerWorker
sendTensors	src/funcs/gat/ops/network_ops.cpp	/^int sendTensors(zmq::socket_t& socket, Chunk &chunk,$/;"	f
sendTensors	src/funcs/gcn/ops/network_ops.cpp	/^int sendTensors(zmq::socket_t& socket, Chunk &chunk,$/;"	f
sendTensors	src/graph-server/commmanager/lambdaworker.cpp	/^void LambdaWorker::sendTensors(zmq::message_t& client_id, Chunk &chunk) {$/;"	f	class:LambdaWorker
sendTensors	src/graph-server/commmanager/message_service.cpp	/^void sendTensors(zmq::socket_t &socket, Chunk &chunk,$/;"	f
sendTensors	src/weight-server/serverworker.cpp	/^void ServerWorker::sendTensors(zmq::message_t& client_id, Chunk &chunk) {$/;"	f	class:ServerWorker
sendWeightUpdate	src/graph-server/commmanager/message_service.cpp	/^void MessageService::sendWeightUpdate(Matrix &matrix, unsigned layer) {$/;"	f	class:MessageService
sendWeightUpdates	src/funcs/dnnl-forward-gcn/forward.cpp	/^sendWeightUpdates(zmq::socket_t& socket, Matrix& weightUpdates, unsigned layer) {$/;"	f	file:
sendaUpdate	src/graph-server/commmanager/message_service.cpp	/^void MessageService::sendaUpdate(Matrix &matrix, unsigned layer) {$/;"	f	class:MessageService
serialize	src/common/utils.hpp	/^serialize(char *buf, unsigned offset, T val) {$/;"	f
serverLog	src/weight-server/weightserver.cpp	/^WeightServer::serverLog(std::string info) {$/;"	f	class:WeightServer
serverPort	src/weight-server/weightserver.hpp	/^    unsigned serverPort;$/;"	m	class:WeightServer
setCols	src/common/matrix.cpp	/^void Matrix::setCols(unsigned _cols) { cols = _cols; }$/;"	f	class:Matrix
setControlPortStart	src/graph-server/commmanager/commmanager.hpp	/^    void setControlPortStart(unsigned cPort) { controlPortStart = cPort; }$/;"	f	class:CommManager
setData	src/common/matrix.cpp	/^void Matrix::setData(FeatType *_data) { data = _data; }$/;"	f	class:Matrix
setData	src/graph-server/graph/edge.hpp	/^    void setData(EdgeType value) { edgeData = value; }$/;"	f	class:Edge
setDataPort	src/graph-server/commmanager/commmanager.hpp	/^    void setDataPort(unsigned dPort) { dataPort = dPort; }$/;"	f	class:CommManager
setDestId	src/graph-server/graph/edge.hpp	/^    void setDestId(unsigned dId) { otherId = dId; }$/;"	f	class:OutEdge
setDims	src/common/matrix.cpp	/^void Matrix::setDims(unsigned _rows, unsigned _cols) { rows = _rows; cols = _cols; }$/;"	f	class:Matrix
setEdgeLocation	src/graph-server/graph/edge.hpp	/^    void setEdgeLocation(EdgeLocationType eLoc) { edgeLocation = eLoc; }$/;"	f	class:Edge
setEdgeNormalizations	src/graph-server/graph/dataloader.cpp	/^void DataLoader::setEdgeNormalizations() {$/;"	f	class:DataLoader
setGhostUpdTot	src/weight-server/weightserver.cpp	/^void WeightServer::setGhostUpdTot(unsigned ghostUpdTot) {$/;"	f	class:WeightServer
setGhostUpdTot	src/weight-server/weighttensor.hpp	/^    void setGhostUpdTot(unsigned gut) {$/;"	f	struct:WeightTensor
setGlobalId	src/graph-server/graph/vertex.hpp	/^    void setGlobalId(unsigned gvid) { globalId = gvid; }$/;"	f	class:Vertex
setGraphPtr	src/graph-server/graph/vertex.hpp	/^    void setGraphPtr(RawGraph *ptr) { graph_ptr = ptr; }$/;"	f	class:Vertex
setLR	src/weight-server/AdamOptimizer.hpp	/^    void setLR(float lr) { learning_rate = lr; };$/;"	f	class:AdamOptimizer
setLocalId	src/graph-server/graph/vertex.hpp	/^    void setLocalId(unsigned id) { localId = id; }$/;"	f	class:GhostVertex
setLocalId	src/graph-server/graph/vertex.hpp	/^    void setLocalId(unsigned lvid) { localId = lvid; }$/;"	f	class:Vertex
setLocalUpdTot	src/weight-server/weightserver.cpp	/^void WeightServer::setLocalUpdTot(unsigned localUpdTot) {$/;"	f	class:WeightServer
setLocalUpdTot	src/weight-server/weighttensor.hpp	/^    void setLocalUpdTot(unsigned lut) {$/;"	f	struct:WeightTensor
setName	src/common/matrix.cpp	/^void Matrix::setName(const char* _name) { tensorName = _name; }$/;"	f	class:Matrix
setNodePort	src/graph-server/nodemanager/nodemanager.hpp	/^    void setNodePort(unsigned nPort) { nodePort = nPort; }$/;"	f	class:NodeManager
setNormFactor	src/graph-server/graph/vertex.hpp	/^    void setNormFactor(EdgeType factor) { normFactor = factor; }$/;"	f	class:Vertex
setNumGlobalVertices	src/graph-server/graph/graph.hpp	/^    void setNumGlobalVertices(unsigned num) { numGlobalVertices = num; }$/;"	f	class:RawGraph
setNumInEdgeGhostVertices	src/graph-server/graph/graph.hpp	/^    void setNumInEdgeGhostVertices(unsigned num)  { numInEdgeGhostVertices = num; }$/;"	f	class:RawGraph
setNumLambdas	src/weight-server/serverworker.cpp	/^ServerWorker::setNumLambdas(zmq::message_t& client_id, unsigned numLambdas) {$/;"	f	class:ServerWorker
setNumLocalVertices	src/graph-server/graph/graph.hpp	/^    void setNumLocalVertices(unsigned num) { numLocalVertices = num; }$/;"	f	class:RawGraph
setNumOutEdgeGhostVertices	src/graph-server/graph/graph.hpp	/^    void setNumOutEdgeGhostVertices(unsigned num) { numOutEdgeGhostVertices = num; }$/;"	f	class:RawGraph
setParent	src/graph-server/graph/vertex.hpp	/^    void setParent(unsigned p) { parentId = p; }$/;"	f	class:Vertex
setRows	src/common/matrix.cpp	/^void Matrix::setRows(unsigned _rows) { rows = _rows; }$/;"	f	class:Matrix
setSourceId	src/graph-server/graph/edge.hpp	/^    void setSourceId(unsigned sId) { otherId = sId; }$/;"	f	class:InEdge
setTSinCfm	src/graph-server/commmanager/lambdaworker.hpp	/^    void setTSinCfm(void *cfm_buf) {$/;"	f	class:LambdaWorker
setTSinHdr	src/graph-server/commmanager/lambdaworker.hpp	/^    void setTSinHdr(void *hdr_buf) {$/;"	f	class:LambdaWorker
setUpWeightSocket	src/graph-server/commmanager/message_service.cpp	/^void MessageService::setUpWeightSocket(char *addr) {$/;"	f	class:MessageService
setVertexLocation	src/graph-server/graph/vertex.hpp	/^    void setVertexLocation(VertexLocationType loc) { vertexLocation = loc; }$/;"	f	class:Vertex
set_W	miscs/numpy-gnn/layers.py	/^    def set_W(self, weight):$/;"	m	class:Linear
set_pub_ip	ec2man/command.py	/^def set_pub_ip(ec2_cli, instance):$/;"	f
set_user_key	ec2man/classes.py	/^    def set_user_key(self, user_key_tuple):$/;"	m	class:Instance
setsockopt	src/common/zmq.hpp	/^        inline void setsockopt (int option_, const void *optval_,$/;"	f	class:zmq::socket_type::socket_t
setsockopt	src/common/zmq.hpp	/^        template<typename T> void setsockopt(int option_, T const& optval)$/;"	f	class:zmq::socket_type::socket_t
setupAwsClient	src/graph-server/commmanager/lambda_comm.cpp	/^void LambdaComm::setupAwsClient() {$/;"	f	class:LambdaComm
setupSockets	src/graph-server/commmanager/lambda_comm.cpp	/^void LambdaComm::setupSockets() {$/;"	f	class:LambdaComm
setupSockets	src/weight-server/weightserver.cpp	/^void WeightServer::setupSockets() {$/;"	f	class:WeightServer
shape	src/common/matrix.cpp	/^std::string Matrix::shape() { return "(" + std::to_string(rows) + ", " + std::to_string(cols) + ")"; }$/;"	f	class:Matrix
show_error	ec2man/__init__.py	/^def show_error(msg):$/;"	f
shutdown	src/graph-server/commmanager/weight_comm.cpp	/^void WeightComm::shutdown() {$/;"	f	class:WeightComm
signal	src/graph-server/parallel/cond.hpp	/^    void signal() {$/;"	f	class:Cond
signature	src/common/matrix.cpp	/^std::string Matrix::signature() {$/;"	f	class:Matrix
size	src/graph-server/engine/engine.hpp	/^    size_t size() const { return cq.size(); }$/;"	f	class:LockChunkQueue
sizeOfVertexType	inputs/convert2csc.cpp	/^    int sizeOfVertexType;$/;"	m	struct:BELHeaderType	file:
sizeOfVertexType	inputs/graphToBinary.cpp	/^	int sizeOfVertexType;$/;"	m	struct:HeaderType	file:
sizeOfVertexType	inputs/partitioner.cpp	/^    int sizeOfVertexType;$/;"	m	struct:BELHeaderType	file:
sizeOfVertexType	src/graph-server/graph/dataloader.hpp	/^    int sizeOfVertexType;$/;"	m	struct:BSHeaderType
sklearn	miscs/dgl-sampling/train_dist_unsupervised.py	/^import sklearn.linear_model as lm$/;"	i
sklearn	miscs/dgl-sampling/train_dist_unsupervised.py	/^import sklearn.metrics as skm$/;"	i
skm	miscs/dgl-sampling/train_dist_unsupervised.py	/^import sklearn.metrics as skm$/;"	i
sleep	src/common/utils.hpp	/^    void sleep() {$/;"	f	struct:BackoffSleeper
sleep_ms	src/common/utils.hpp	/^sleep_ms(unsigned t) {$/;"	f
snap_file	miscs/check-correctness/check-correctness.py	/^snap_file = file_dir + "fb.graph"$/;"	v
socketPtr	src/common/zmq.hpp	/^        void* socketPtr;$/;"	m	class:zmq::socket_type::monitor_t
socket_t	src/common/zmq.hpp	/^        inline socket_t(context_t& context_, int type_)$/;"	f	class:zmq::socket_type::socket_t
socket_t	src/common/zmq.hpp	/^        inline socket_t(context_t& context_, socket_type type_)$/;"	f	class:zmq::socket_type::socket_t
socket_t	src/common/zmq.hpp	/^    class socket_t$/;"	c	class:zmq::socket_type
socket_type	src/common/zmq.hpp	/^    enum class socket_type: int$/;"	c	namespace:zmq
softmax	miscs/check-correctness/check-correctness.py	/^from scipy.special import softmax$/;"	i
softmax	src/funcs/dnnl-forward-gcn/forward.cpp	/^softmax(Matrix& mat) {$/;"	f	file:
softmax	src/funcs/gat/ops/forward_ops.cpp	/^softmax(Matrix& mat) {$/;"	f
softmax	src/funcs/gcn/ops/forward_ops.cpp	/^softmax(Matrix& mat) {$/;"	f
softmax	src/graph-server/commmanager/CPU_comm.cpp	/^Matrix softmax(Matrix &mat) {$/;"	f
softmax	src/graph-server/engine/ops/tensors.cpp	/^FeatType* Engine::softmax(FeatType* inputTensor, FeatType* result, unsigned rows, unsigned cols) {$/;"	f	class:Engine
softmax_prime	src/graph-server/engine/ops/tensors.cpp	/^Matrix Engine::softmax_prime(FeatType* valuesTensor, FeatType* softmaxOutput, unsigned size) {$/;"	f	class:Engine
softmax_row	miscs/check-correctness/check-correctness.py	/^def softmax_row(mat):$/;"	f
sp	calculate-price.py	/^import subprocess as sp$/;"	i
sp	miscs/awslogs/calc-ec2-cost.py	/^import subprocess as sp$/;"	i
sp	miscs/awslogs/sum_lambda_time.py	/^import subprocess as sp$/;"	i
sp	miscs/dgl-sampling/load_amazon.py	/^import scipy.sparse as sp$/;"	i
sp	miscs/dgl-sampling/load_reddit_large.py	/^import scipy.sparse as sp$/;"	i
sparse_dense_elemtwise_mult	src/graph-server/engine/ops/tensors.cpp	/^Matrix Engine::sparse_dense_elemtwise_mult(CSCMatrix<EdgeType>& csc,$/;"	f	class:Engine
srcGhostCnt	src/graph-server/graph/graph.hpp	/^    unsigned srcGhostCnt;$/;"	m	class:Graph
srcGhostVtcs	src/graph-server/graph/graph.hpp	/^    std::map<unsigned, unsigned> srcGhostVtcs;$/;"	m	class:Graph
srcVFeats2eFeats	src/graph-server/engine/utils.cpp	/^FeatType **Engine::srcVFeats2eFeats(FeatType *vtcsTensor, FeatType *ghostTensor,$/;"	f	class:Engine
ssh_key	ec2man/__init__.py	/^    ssh_key = fprofile.readline().strip().split()[0]$/;"	v
staleness	src/graph-server/engine/engine.hpp	/^    unsigned staleness;$/;"	m	class:Engine
standAlone	src/graph-server/nodemanager/nodemanager.hpp	/^    bool standAlone;$/;"	m	class:NodeManager
standAloneMode	src/graph-server/nodemanager/nodemanager.cpp	/^bool NodeManager::standAloneMode() {$/;"	f	class:NodeManager
start	src/common/utils.hpp	/^    void start() { begin = std::chrono::high_resolution_clock::now(); }$/;"	f	struct:Timer
start	src/common/utils.hpp	/^    void start() {$/;"	f	struct:TimerPlus
startRelaunchThd	src/graph-server/commmanager/lambda_comm.cpp	/^void LambdaComm::startRelaunchThd() {$/;"	f	class:LambdaComm
start_time	calculate-price.py	/^            start_time = " ".join(start_time)$/;"	v
start_time	calculate-price.py	/^            start_time = line.split()[8:]$/;"	v
start_time	calculate-price.py	/^start_time=0$/;"	v
start_time	src/graph-server/engine/engine.hpp	/^    std::time_t start_time;$/;"	m	class:Engine
startdt	miscs/awslogs/calc-ec2-cost.py	/^    startdt = parse(sys.argv[5])$/;"	v
step	miscs/dgl-non-sampling/zeroopt.py	/^    def step(self, closure=None):$/;"	m	class:ZeroAdam
step	miscs/dgl-non-sampling/zeroopt.py	/^    def step(self, closure=None):$/;"	m	class:ZeroSGD
stop	src/common/utils.hpp	/^    void stop() { end = std::chrono::high_resolution_clock::now(); }$/;"	f	struct:Timer
stop	src/common/utils.hpp	/^    void stop() {$/;"	f	struct:TimerPlus
stop	src/weight-server/weighttensor.hpp	/^    bool stop;$/;"	m	struct:WeightTensor
stopRelaunchThd	src/graph-server/commmanager/lambda_comm.cpp	/^void LambdaComm::stopRelaunchThd() {$/;"	f	class:LambdaComm
stopUpdate	src/weight-server/weighttensor.cpp	/^void WeightTensor::stopUpdate() {$/;"	f	class:WeightTensor
stopWorkers	src/graph-server/commmanager/lambda_comm.cpp	/^void LambdaComm::stopWorkers() {$/;"	f	class:LambdaComm
stopWorkers	src/weight-server/weightserver.cpp	/^void WeightServer::stopWorkers() {$/;"	f	class:WeightServer
storeMtx	src/weight-server/weightserver.hpp	/^    std::mutex storeMtx;$/;"	m	class:WeightServer
str	src/common/matrix.cpp	/^std::string Matrix::str() {$/;"	f	class:Matrix
str	src/common/utils.hpp	/^    std::string str() const {$/;"	f	struct:Chunk
str_backward	miscs/numpy-gnn/layers.py	/^    def str_backward(self, str_grad):$/;"	m	class:Aggregate
str_backward	miscs/numpy-gnn/layers.py	/^    def str_backward(self, str_grad):$/;"	m	class:Layer
str_backward	miscs/numpy-gnn/layers.py	/^    def str_backward(self, str_grad):$/;"	m	class:Linear
str_backward	miscs/numpy-gnn/layers.py	/^    def str_backward(self, str_grad):$/;"	m	class:Relu
str_backward	miscs/numpy-gnn/layers.py	/^    def str_backward(self, str_grad):$/;"	m	class:Sigmoid
str_backward	miscs/numpy-gnn/layers.py	/^    def str_backward(self, str_grad):$/;"	m	class:Tanh
str_backward	miscs/numpy-gnn/loss.py	/^    def str_backward(self):$/;"	m	class:EuclideanLoss
str_backward	miscs/numpy-gnn/loss.py	/^    def str_backward(self):$/;"	m	class:SoftmaxCrossEntropyLoss
str_backward	miscs/numpy-gnn/network.py	/^    def str_backward(self, str_outgrad):$/;"	m	class:Network
str_forward	miscs/numpy-gnn/layers.py	/^    def str_forward(self, str_input):$/;"	m	class:Aggregate
str_forward	miscs/numpy-gnn/layers.py	/^    def str_forward(self, str_input):$/;"	m	class:Layer
str_forward	miscs/numpy-gnn/layers.py	/^    def str_forward(self, str_input):$/;"	m	class:Linear
str_forward	miscs/numpy-gnn/layers.py	/^    def str_forward(self, str_input):$/;"	m	class:Relu
str_forward	miscs/numpy-gnn/layers.py	/^    def str_forward(self, str_input):$/;"	m	class:Sigmoid
str_forward	miscs/numpy-gnn/layers.py	/^    def str_forward(self, str_input):$/;"	m	class:Tanh
str_forward	miscs/numpy-gnn/network.py	/^    def str_forward(self, str_input):$/;"	m	class:Network
str_update	miscs/numpy-gnn/layers.py	/^    def str_update(self):$/;"	m	class:Linear
str_update	miscs/numpy-gnn/layers.py	/^    def str_update(self, config):$/;"	m	class:Layer
str_update	miscs/numpy-gnn/network.py	/^    def str_update(self):$/;"	m	class:Network
struct	miscs/aligraph/convert-to-aligraph.py	/^import struct$/;"	i
struct	miscs/check-correctness/feat-bsnap-to-text.py	/^import struct$/;"	i
sub	src/common/zmq.hpp	/^        sub = ZMQ_SUB,$/;"	m	class:zmq::socket_type
subMtx	src/weight-server/weightserver.hpp	/^    std::mutex subMtx;$/;"	m	class:WeightServer
subprocess	ec2man/__init__.py	/^import subprocess$/;"	i
subprocess	ec2man/command.py	/^import subprocess$/;"	i
subscriber	src/weight-server/weightserver.hpp	/^    zmq::socket_t subscriber;$/;"	m	class:WeightServer
sum	src/common/matrix.cpp	/^float Matrix::sum() {$/;"	f	class:Matrix
sumTensor	src/common/utils.hpp	/^sumTensor(unsigned rows, unsigned cols, FeatType* tensor) {$/;"	f
sumTensor	src/common/utils.hpp	/^sumTensor(unsigned rows, unsigned cols, FeatType** tensor) {$/;"	f
sum_line	miscs/compare_output.py	/^def sum_line(line):$/;"	f
switch_threshold	src/weight-server/weightserver.hpp	/^    float switch_threshold;$/;"	m	class:WeightServer
sync	src/graph-server/parallel/threadpool.cpp	/^ThreadPool::sync() {$/;"	f	class:ThreadPool
sync	src/weight-server/weightserver.hpp	/^    bool sync; \/\/ sync mode or async pipeline$/;"	m	class:WeightServer
sync	src/weight-server/weighttensor.hpp	/^    bool sync;$/;"	m	struct:WeightTensor
syncCurrEpoch	src/graph-server/nodemanager/nodemanager.cpp	/^unsigned NodeManager::syncCurrEpoch(unsigned epoch) {$/;"	f	class:NodeManager
sys	calculate-price.py	/^import sys$/;"	i
sys	ec2man/__init__.py	/^import sys$/;"	i
sys	ec2man/__main__.py	/^import sys$/;"	i
sys	miscs/aligraph/convert-to-aligraph.py	/^import sys$/;"	i
sys	miscs/awslogs/calc-ec2-cost.py	/^import sys$/;"	i
sys	miscs/awslogs/sum_lambda_time.py	/^import sys$/;"	i
sys	miscs/compare_output.py	/^import sys$/;"	i
tanh	src/funcs/gat/ops/forward_ops.cpp	/^tanh(Matrix& mat) {$/;"	f
tanh	src/funcs/gcn/ops/forward_ops.cpp	/^tanh(Matrix& mat) {$/;"	f
tanhDerivative	src/funcs/gat/ops/backward_ops.cpp	/^tanhDerivative(Matrix& mat) {$/;"	f
tanhDerivative	src/funcs/gcn/ops/backward_ops.cpp	/^tanhDerivative(Matrix& mat) {$/;"	f
targetAcc	src/weight-server/weightserver.hpp	/^    float targetAcc;$/;"	m	class:WeightServer
target_labels	miscs/check-correctness/check-correctness.py	/^target_labels = np.empty(shape=(num_vertices, layer_config[2]), dtype=float)$/;"	v
tensorName	src/common/matrix.hpp	/^    std::string tensorName;$/;"	m	class:Matrix
term	src/weight-server/weightserver.hpp	/^    bool term;$/;"	m	class:WeightServer
termCV	src/weight-server/weightserver.hpp	/^    std::condition_variable termCV;$/;"	m	class:WeightServer
termMtx	src/weight-server/weightserver.hpp	/^    std::mutex termMtx;$/;"	m	class:WeightServer
terminateServer	src/weight-server/serverworker.cpp	/^ServerWorker::terminateServer(zmq::message_t& client_id) {$/;"	f	class:ServerWorker
test_acc	miscs/aligraph/gcn.py	/^  def test_acc(self):$/;"	m	class:GCN
test_end	miscs/dgl-non-sampling/gendata.py	/^    test_end = min(vtcs, test_end)$/;"	v
test_end	miscs/dgl-non-sampling/gendata.py	/^    test_end = test_stt + int(block_size * TEST_PORTION)$/;"	v
test_mask	miscs/dgl-non-sampling/gendata.py	/^test_mask  = torch.zeros(vtcs, dtype=bool)$/;"	v
test_mask	miscs/dgl-sampling/load_amazon.py	/^    def test_mask(self):$/;"	m	class:AmazonDataset
test_mask	miscs/dgl-sampling/load_reddit_large.py	/^    def test_mask(self):$/;"	m	class:RedditLargeDataset
test_net	miscs/numpy-gnn/check.py	/^from solve_net import train_net, test_net$/;"	i
test_net	miscs/numpy-gnn/solve_net.py	/^def test_net(model, loss, input_feats, labels, test_mask, label_kind):$/;"	f
test_net	miscs/numpy-gnn/train.py	/^from solve_net import train_net, test_net$/;"	i
test_stt	miscs/dgl-non-sampling/gendata.py	/^    test_stt = val_end$/;"	v
tf	miscs/aligraph/gcn.py	/^import tensorflow as tf$/;"	i
tf	miscs/aligraph/train_supervised.py	/^import tensorflow as tf$/;"	i
th	miscs/dgl-non-sampling/graphconv.py	/^import torch as th$/;"	i
th	miscs/dgl-sampling/train_dist.py	/^import torch as th$/;"	i
th	miscs/dgl-sampling/train_dist_unsupervised.py	/^import torch as th$/;"	i
thisPtr	src/graph-server/parallel/threadpool.hpp	/^    ThreadPool *thisPtr;$/;"	m	struct:threadInfo
threadHandle	src/graph-server/parallel/threadpool.hpp	/^    pthread_t threadHandle;$/;"	m	struct:threadInfo
threadId	src/graph-server/parallel/threadpool.hpp	/^    unsigned threadId;$/;"	m	struct:threadInfo
threadInfo	src/graph-server/parallel/threadpool.hpp	/^typedef struct threadInfo {$/;"	s
thread_handler	ec2man/__init__.py	/^            def thread_handler(tid):$/;"	f	function:process_target
threads	src/graph-server/parallel/threadpool.hpp	/^    ThreadInfo *threads;$/;"	m	class:ThreadPool
threshold	miscs/compare_output.py	/^threshold = .0001$/;"	v
tid	src/weight-server/serverworker.hpp	/^    unsigned tid;$/;"	m	class:ServerWorker
time	ec2man/command.py	/^import time$/;"	i
time	miscs/aligraph/convert-to-aligraph.py	/^import time$/;"	i
time	miscs/dgl-non-sampling/train.py	/^import argparse, time$/;"	i
time	miscs/dgl-sampling/train_dist.py	/^import argparse, time, math$/;"	i
time	miscs/dgl-sampling/train_dist_unsupervised.py	/^import argparse, time, math$/;"	i
timeBackwardProcess	src/graph-server/engine/engine.hpp	/^    double timeBackwardProcess = 0.0;$/;"	m	class:Engine
timeForwardProcess	src/graph-server/engine/engine.hpp	/^    double timeForwardProcess = 0.0;$/;"	m	class:Engine
timeInit	src/graph-server/engine/engine.hpp	/^    double timeInit = 0.0;$/;"	m	class:Engine
timeoutMtx	src/graph-server/commmanager/lambda_comm.hpp	/^    std::mutex timeoutMtx;$/;"	m	class:LambdaComm
timeoutRatio	src/graph-server/commmanager/lambda_comm.hpp	/^    int timeoutRatio;$/;"	m	class:LambdaComm
timeoutRatio	src/graph-server/engine/engine.hpp	/^    unsigned timeoutRatio;$/;"	m	class:Engine
timeoutTable	src/graph-server/commmanager/lambda_comm.hpp	/^    std::map<Chunk, unsigned> timeoutTable;$/;"	m	class:LambdaComm
timers	src/common/utils.hpp	/^    std::map<string, TimerPlus*> timers;$/;"	m	struct:GPUTimers
times	calculate-price.py	/^times = get_logs(lambda_name)$/;"	v
times	miscs/awslogs/sum_lambda_time.py	/^    times = get_logs("gcn")$/;"	v
timestamp_ms	miscs/aligraph/convert-to-aligraph.py	/^def timestamp_ms():$/;"	f
timestamp_ms	src/common/utils.hpp	/^timestamp_ms() {$/;"	f
toFile	src/common/matrix.cpp	/^void Matrix::toFile(std::string filename) {$/;"	f	class:Matrix
top	src/graph-server/engine/engine.hpp	/^    const Chunk &top() const { return cq.top(); }$/;"	f	class:LockChunkQueue
topic	src/graph-server/commmanager/commmanager.hpp	/^    char topic;$/;"	m	struct:controlMessage
topic	src/graph-server/nodemanager/nodemanager.hpp	/^    char topic;$/;"	m	struct:nodeMessage
torch	miscs/dgl-non-sampling/gcn.py	/^import torch$/;"	i
torch	miscs/dgl-non-sampling/gcn.py	/^import torch.nn as nn$/;"	i
torch	miscs/dgl-non-sampling/gendata.py	/^import torch$/;"	i
torch	miscs/dgl-non-sampling/train.py	/^import torch$/;"	i
torch	miscs/dgl-non-sampling/train.py	/^import torch.nn as nn$/;"	i
torch	miscs/dgl-non-sampling/train.py	/^import torch.nn.functional as F$/;"	i
torch	miscs/dgl-non-sampling/zeroopt.py	/^import torch$/;"	i
torch	miscs/dgl-sampling/train_dist.py	/^import torch.multiprocessing as mp$/;"	i
torch	miscs/dgl-sampling/train_dist.py	/^import torch.nn as nn$/;"	i
torch	miscs/dgl-sampling/train_dist.py	/^import torch.nn.functional as F$/;"	i
torch	miscs/dgl-sampling/train_dist.py	/^import torch.optim as optim$/;"	i
torch	miscs/dgl-sampling/train_dist_unsupervised.py	/^import torch.multiprocessing as mp$/;"	i
torch	miscs/dgl-sampling/train_dist_unsupervised.py	/^import torch.nn as nn$/;"	i
torch	miscs/dgl-sampling/train_dist_unsupervised.py	/^import torch.nn.functional as F$/;"	i
torch	miscs/dgl-sampling/train_dist_unsupervised.py	/^import torch.optim as optim$/;"	i
totalLayers	src/graph-server/commmanager/CPU_comm.hpp	/^    unsigned totalLayers;$/;"	m	class:CPUComm
totalLayers	src/graph-server/commmanager/GPU_comm.hpp	/^    unsigned totalLayers;$/;"	m	class:GPUComm
total_time	calculate-price.py	/^total_time = sum(times)$/;"	v
tqdm	miscs/dgl-sampling/train_dist.py	/^import tqdm$/;"	i
tqdm	miscs/dgl-sampling/train_dist_unsupervised.py	/^import tqdm$/;"	i
trails	src/common/utils.hpp	/^    unsigned trails = 0;$/;"	m	struct:BackoffSleeper
train	miscs/aligraph/train_supervised.py	/^def train(config, graph):$/;"	f
train	miscs/numpy-gnn/train.py	/^def train(adj, input_feats, target_labels, config, weights=None):$/;"	f
train_end	miscs/dgl-non-sampling/gendata.py	/^    train_end = min(vtcs, train_end)$/;"	v
train_end	miscs/dgl-non-sampling/gendata.py	/^    train_end = train_stt + int(block_size * TRAIN_PORTION)$/;"	v
train_mask	miscs/dgl-non-sampling/gendata.py	/^train_mask = torch.zeros(vtcs, dtype=bool)$/;"	v
train_mask	miscs/dgl-sampling/load_amazon.py	/^    def train_mask(self):$/;"	m	class:AmazonDataset
train_mask	miscs/dgl-sampling/load_reddit_large.py	/^    def train_mask(self):$/;"	m	class:RedditLargeDataset
train_net	miscs/numpy-gnn/check.py	/^from solve_net import train_net, test_net$/;"	i
train_net	miscs/numpy-gnn/solve_net.py	/^def train_net(model, loss, config, input_feats, labels, train_mask, label_kind):$/;"	f
train_net	miscs/numpy-gnn/train.py	/^from solve_net import train_net, test_net$/;"	i
train_stt	miscs/dgl-non-sampling/gendata.py	/^    train_stt = i * block_size$/;"	v
trainable	src/funcs/operators.hpp	/^    bool trainable;$/;"	m	struct:Operator
tryApplyUpdate	src/weight-server/weighttensor.cpp	/^std::string WeightTensor::tryApplyUpdate(AdamOptimizer *adamOpt, unsigned layer, FeatType *updTensor) {$/;"	f	class:WeightTensor
tryApplyUpdate	src/weight-server/weighttensor.cpp	/^std::string WeightTensor::tryApplyUpdate(float lr, FeatType *updTensor) {$/;"	f	class:WeightTensor
tryApplyUpdateFake	src/weight-server/weighttensor.cpp	/^std::string WeightTensor::tryApplyUpdateFake(AdamOptimizer *adamOpt, unsigned layer, FeatType *updTensor) {$/;"	f	class:WeightTensor
tryApplyUpdateFake	src/weight-server/weighttensor.cpp	/^std::string WeightTensor::tryApplyUpdateFake(float lr, FeatType *updTensor) {$/;"	f	class:WeightTensor
tryEarlyStop	src/weight-server/weightserver.cpp	/^void WeightServer::tryEarlyStop(AccLoss &accloss) {$/;"	f	class:WeightServer
type_to_price	miscs/awslogs/calc-ec2-cost.py	/^type_to_price = { "c5.xlarge"   :  0.17,$/;"	v
uMtxs	src/weight-server/weightserver.hpp	/^    std::vector<MutexMap> uMtxs;$/;"	m	class:WeightServer
umtx	src/weight-server/weighttensor.hpp	/^    std::mutex *umtx;$/;"	m	struct:WeightTensor
unbind	src/common/zmq.hpp	/^        inline void unbind (const char *addr_)$/;"	f	class:zmq::socket_type::socket_t
unbind	src/common/zmq.hpp	/^        inline void unbind(std::string const& addr)$/;"	f	class:zmq::socket_type::socket_t
undirected	src/graph-server/engine/engine.hpp	/^    bool undirected = false;$/;"	m	class:Engine
undirected	src/graph-server/graph/dataloader.hpp	/^    bool undirected;$/;"	m	class:DataLoader
unlock	src/graph-server/engine/engine.hpp	/^    void unlock() { lk.unlock(); }$/;"	f	class:LockChunkQueue
unlock	src/graph-server/graph/vertex.hpp	/^    void unlock() { lock.unlock(); }$/;"	f	class:GhostVertex
unlock	src/graph-server/graph/vertex.hpp	/^    void unlock() { lock.unlock(); }$/;"	f	class:Vertex
unlock	src/graph-server/parallel/lock.hpp	/^    void unlock() {$/;"	f	class:Lock
unlock	src/graph-server/parallel/rwlock.hpp	/^    void unlock() {$/;"	f	class:RWLock
upBound	src/common/utils.hpp	/^    unsigned upBound;$/;"	m	struct:Chunk
update	miscs/numpy-gnn/layers.py	/^    def update(self, config):$/;"	m	class:Layer
update	miscs/numpy-gnn/layers.py	/^    def update(self, config):$/;"	m	class:Linear
update	miscs/numpy-gnn/network.py	/^    def update(self, config):$/;"	m	class:Network
update	src/weight-server/AdamOptimizer.cpp	/^void AdamOptimizer::update(unsigned layer, FeatType *weight, FeatType *gradient) {$/;"	f	class:AdamOptimizer
updateChunkCnt	src/graph-server/commmanager/weight_comm.cpp	/^void WeightComm::updateChunkCnt(unsigned chunkCnt) {$/;"	f	class:WeightComm
updateGlobalAccLoss	src/weight-server/weightserver.cpp	/^void WeightServer::updateGlobalAccLoss(unsigned node, AccLoss &accloss) {$/;"	f	class:WeightServer
updateLocalAccLoss	src/weight-server/weightserver.cpp	/^void WeightServer::updateLocalAccLoss(Chunk &chunk, float acc, float loss) {$/;"	f	class:WeightServer
updateVersion	src/weight-server/weighttensor.cpp	/^Matrix& WeightTensor::updateVersion(bool withLock) {$/;"	f	class:WeightTensor
user_name	ec2man/__init__.py	/^    user_name = fprofile.readline().strip().split()[0]$/;"	v
user_name	ec2man/__init__.py	/^user_name = ''$/;"	v
valFreq	src/graph-server/engine/engine.hpp	/^    unsigned valFreq = 0;$/;"	m	class:Engine
val_acc	miscs/aligraph/gcn.py	/^  def val_acc(self):$/;"	m	class:GCN
val_end	miscs/dgl-non-sampling/gendata.py	/^    val_end = min(vtcs, val_end)$/;"	v
val_end	miscs/dgl-non-sampling/gendata.py	/^    val_end = val_stt + int(block_size * VAL_PORTION)$/;"	v
val_mask	miscs/dgl-non-sampling/gendata.py	/^val_mask   = torch.zeros(vtcs, dtype=bool)$/;"	v
val_mask	miscs/dgl-sampling/load_amazon.py	/^    def val_mask(self):$/;"	m	class:AmazonDataset
val_mask	miscs/dgl-sampling/load_reddit_large.py	/^    def val_mask(self):$/;"	m	class:RedditLargeDataset
val_stt	miscs/dgl-non-sampling/gendata.py	/^    val_stt = train_end$/;"	v
value	src/common/zmq.hpp	/^    int32_t  value ; \/\/ value is either error code, fd or reconnect interval$/;"	m	struct:__anon3
values	src/graph-server/graph/graph.hpp	/^    T *values;                      \/\/ non-zero elements$/;"	m	class:CSCMatrix
values	src/graph-server/graph/graph.hpp	/^    T *values;                   \/\/ non-zero elements$/;"	m	class:CSRMatrix
vecTimeAggregate	src/graph-server/engine/engine.hpp	/^    std::vector<double> vecTimeAggregate;$/;"	m	class:Engine
vecTimeApplyEdg	src/graph-server/engine/engine.hpp	/^    std::vector<double> vecTimeApplyEdg;$/;"	m	class:Engine
vecTimeApplyVtx	src/graph-server/engine/engine.hpp	/^    std::vector<double> vecTimeApplyVtx;$/;"	m	class:Engine
vecTimeLambdaInvoke	src/graph-server/engine/engine.hpp	/^    std::vector<double> vecTimeLambdaInvoke;$/;"	m	class:Engine
vecTimeLambdaWait	src/graph-server/engine/engine.hpp	/^    std::vector<double> vecTimeLambdaWait;$/;"	m	class:Engine
vecTimeScatter	src/graph-server/engine/engine.hpp	/^    std::vector<double> vecTimeScatter;$/;"	m	class:Engine
ver2Mat	src/weight-server/weighttensor.hpp	/^    std::map<unsigned, RefMat> ver2Mat;$/;"	m	struct:WeightTensor
version	src/common/zmq.hpp	/^    inline std::tuple<int, int, int> version()$/;"	f	namespace:zmq
version	src/common/zmq.hpp	/^    inline void version (int *major_, int *minor_, int *patch_)$/;"	f	namespace:zmq
vertex	src/common/utils.hpp	/^    bool vertex;$/;"	m	struct:Chunk
vertexLocation	src/graph-server/graph/vertex.hpp	/^    VertexLocationType vertexLocation;$/;"	m	class:Vertex
vertexPartitionIds	src/graph-server/graph/graph.hpp	/^    std::vector<short> vertexPartitionIds;$/;"	m	class:RawGraph
vertices	src/graph-server/graph/graph.hpp	/^    std::vector<Vertex> vertices;$/;"	m	class:RawGraph
verticesPushOut	src/graph-server/engine/utils.cpp	/^void Engine::verticesPushOut(unsigned receiver, unsigned totCnt,$/;"	f	class:Engine
vtcs	miscs/dgl-non-sampling/gendata.py	/^vtcs = 232965$/;"	v
vtcsCnt	src/graph-server/commmanager/lambda_comm.hpp	/^        unsigned vtcsCnt = 0;$/;"	m	struct:LambdaComm::AccLoss
vtcsCnt	src/weight-server/weightserver.hpp	/^        unsigned vtcsCnt = 0;$/;"	m	struct:WeightServer::AccLoss
vtxDataVec	src/graph-server/graph/graph.hpp	/^    std::vector<EdgeType> vtxDataVec;$/;"	m	class:Graph
vtxNNBackward	src/graph-server/commmanager/CPU_comm.cpp	/^void CPUComm::vtxNNBackward(unsigned layer) {$/;"	f	class:CPUComm
vtxNNBackwardGAT	src/graph-server/commmanager/CPU_comm.cpp	/^void CPUComm::vtxNNBackwardGAT(unsigned layer) {$/;"	f	class:CPUComm
vtxNNBackwardGCN	src/graph-server/commmanager/CPU_comm.cpp	/^void CPUComm::vtxNNBackwardGCN(unsigned layer) {$/;"	f	class:CPUComm
vtxNNForward	src/graph-server/commmanager/CPU_comm.cpp	/^void CPUComm::vtxNNForward(unsigned layer, bool lastLayer) {$/;"	f	class:CPUComm
vtxNNForwardGAT	src/graph-server/commmanager/CPU_comm.cpp	/^void CPUComm::vtxNNForwardGAT(unsigned layer, bool lastLayer) {$/;"	f	class:CPUComm
vtxNNForwardGCN	src/graph-server/commmanager/CPU_comm.cpp	/^void CPUComm::vtxNNForwardGCN(unsigned layer, bool lastLayer) {$/;"	f	class:CPUComm
vtxNNSavedTensors	src/graph-server/engine/engine.hpp	/^    std::vector<Matrix> *vtxNNSavedTensors;$/;"	m	class:Engine
wFunc	src/graph-server/parallel/threadpool.hpp	/^    std::function<void(unsigned, void *)> wFunc;$/;"	m	class:ThreadPool
wMtxs	src/weight-server/weightserver.hpp	/^    std::vector<MutexMap> wMtxs;$/;"	m	class:WeightServer
wPort	src/graph-server/commmanager/CPU_comm.hpp	/^    unsigned wPort;$/;"	m	class:CPUComm
wPort	src/graph-server/commmanager/GPU_comm.hpp	/^    unsigned wPort;$/;"	m	class:GPUComm
wPort	src/graph-server/commmanager/message_service.hpp	/^    unsigned wPort;$/;"	m	class:MessageService
wReqThread	src/graph-server/commmanager/message_service.hpp	/^    std::thread wReqThread;$/;"	m	class:MessageService
wServersFile	src/graph-server/commmanager/CPU_comm.hpp	/^    std::string wServersFile;$/;"	m	class:CPUComm
wServersFile	src/graph-server/commmanager/GPU_comm.hpp	/^    std::string wServersFile;$/;"	m	class:GPUComm
wSndThread	src/graph-server/commmanager/message_service.hpp	/^    std::thread wSndThread;$/;"	m	class:MessageService
wait	src/graph-server/parallel/barrier.hpp	/^    void wait() {$/;"	f	class:Barrier
wait	src/graph-server/parallel/cond.hpp	/^    void wait() {$/;"	f	class:Cond
wctx	src/graph-server/commmanager/message_service.hpp	/^    zmq::context_t wctx;$/;"	m	class:MessageService
weightComm	src/graph-server/engine/engine.hpp	/^    WeightComm *weightComm;$/;"	m	class:Engine
weightServerAddrs	src/graph-server/commmanager/CPU_comm.hpp	/^    std::vector<char *> weightServerAddrs;$/;"	m	class:CPUComm
weight_type	miscs/awslogs/calc-ec2-cost.py	/^    weight_type = sys.argv[3]$/;"	v
weight_updates1	miscs/check-correctness/check-correctness.py	/^weight_updates1 = learning_rate * np.matmul(act_mat0.transpose(), gd_mat1)$/;"	v
weight_updates2	miscs/check-correctness/check-correctness.py	/^weight_updates2 = learning_rate * np.matmul(act_mat1.transpose(), gd_mat2)$/;"	v
weights	miscs/check-correctness/check-correctness.py	/^weights = [np.empty(shape=(layer_config[0], layer_config[1]), dtype=float),$/;"	v
weights	src/graph-server/commmanager/message_service.hpp	/^    std::vector<Matrix> weights;$/;"	m	class:MessageService
weightsStore	src/weight-server/weightserver.hpp	/^    std::vector<WeightTensorMap> weightsStore;$/;"	m	class:WeightServer
weights_file	miscs/check-correctness/check-correctness.py	/^weights_file = ".\/weights-602-1000-41"$/;"	v
weightserverIPFile	src/graph-server/engine/engine.hpp	/^    std::string weightserverIPFile;$/;"	m	class:Engine
weightserverPort	src/graph-server/engine/engine.hpp	/^    unsigned weightserverPort;$/;"	m	class:Engine
what	src/common/zmq.hpp	/^        virtual const char *what () const throw ()$/;"	f	class:zmq::error_t
wid	src/graph-server/commmanager/lambdaworker.hpp	/^    unsigned wid;$/;"	m	class:LambdaWorker
wmtx	src/weight-server/weighttensor.hpp	/^    std::mutex *wmtx;$/;"	m	struct:WeightTensor
work	src/graph-server/commmanager/lambdaworker.cpp	/^LambdaWorker::work(unsigned _wid) {$/;"	f	class:LambdaWorker
work	src/weight-server/serverworker.cpp	/^ServerWorker::work() {$/;"	f	class:ServerWorker
worker	src/graph-server/parallel/threadpool.cpp	/^ThreadPool::worker(void *args) {$/;"	f	class:ThreadPool
worker_threads	src/graph-server/commmanager/lambda_comm.hpp	/^    std::vector<std::thread *> worker_threads;$/;"	m	class:LambdaComm
worker_threads	src/weight-server/weightserver.hpp	/^    std::vector<std::thread *> worker_threads;$/;"	m	class:WeightServer
workers	src/graph-server/commmanager/lambda_comm.hpp	/^    std::vector<LambdaWorker *> workers;$/;"	m	class:LambdaComm
workers	src/weight-server/weightserver.hpp	/^    std::vector<ServerWorker *> workers;$/;"	m	class:WeightServer
workersocket	src/graph-server/commmanager/lambdaworker.hpp	/^    zmq::socket_t workersocket;$/;"	m	class:LambdaWorker
workersocket	src/weight-server/serverworker.hpp	/^    zmq::socket_t workersocket;$/;"	m	class:ServerWorker
wport	src/graph-server/commmanager/lambda_comm.hpp	/^    unsigned wport;$/;"	m	class:LambdaComm
wraps	miscs/dgl-sampling/train_dist.py	/^from functools import wraps$/;"	i
wraps	miscs/dgl-sampling/train_dist_unsupervised.py	/^from functools import wraps$/;"	i
writeLock	src/graph-server/graph/vertex.hpp	/^    void writeLock() { lock.writeLock(); }$/;"	f	class:GhostVertex
writeLock	src/graph-server/graph/vertex.hpp	/^    void writeLock() { lock.writeLock(); }$/;"	f	class:Vertex
writeLock	src/graph-server/parallel/rwlock.hpp	/^    void writeLock() {$/;"	f	class:RWLock
ws	src/weight-server/serverworker.hpp	/^    WeightServer& ws;$/;"	m	class:ServerWorker
wsAccTable	src/weight-server/weightserver.hpp	/^    std::map<unsigned, AccLoss> wsAccTable; \/\/ nodeId -> accloss$/;"	m	class:WeightServer
wserverCnt	src/graph-server/commmanager/weight_comm.hpp	/^    unsigned wserverCnt;$/;"	m	class:WeightComm
wserverPort	src/graph-server/commmanager/weight_comm.hpp	/^    unsigned wserverPort;$/;"	m	class:WeightComm
wservers	src/graph-server/commmanager/lambda_comm.hpp	/^    std::vector<std::string> wservers;$/;"	m	class:LambdaComm
wsocket	src/graph-server/commmanager/message_service.hpp	/^    zmq::socket_t wsocket;$/;"	m	class:MessageService
wsockets	src/graph-server/commmanager/weight_comm.hpp	/^    std::vector<zmq::socket_t> wsockets;$/;"	m	class:WeightComm
wsocktReady	src/graph-server/commmanager/message_service.hpp	/^    bool wsocktReady;$/;"	m	class:MessageService
xavierInitializer	src/weight-server/weightserver.cpp	/^WeightServer::xavierInitializer(unsigned dim1, unsigned dim2) {$/;"	f	class:WeightServer
xavier_uniform_	miscs/dgl-non-sampling/graphconv.py	/^def xavier_uniform_(tensor, gain=1.):$/;"	f
xpub	src/common/zmq.hpp	/^        xpub = ZMQ_XPUB,$/;"	m	class:zmq::socket_type
xsub	src/common/zmq.hpp	/^        xsub = ZMQ_XSUB,$/;"	m	class:zmq::socket_type
z_mat1	miscs/check-correctness/check-correctness.py	/^z_mat1 = np.dot(S_mat, np.dot(act_mat0, weights[0]))$/;"	v
z_mat2	miscs/check-correctness/check-correctness.py	/^z_mat2 = np.dot(S_mat, np.dot(act_mat1, weights[1]))$/;"	v
zmq	src/common/zmq.hpp	/^namespace zmq$/;"	n
zmq_event_t	src/common/zmq.hpp	/^} zmq_event_t;$/;"	t	typeref:struct:__anon3
~AdamOptimizer	src/weight-server/AdamOptimizer.cpp	/^AdamOptimizer::~AdamOptimizer() {$/;"	f	class:AdamOptimizer
~CSCMatrix	src/graph-server/graph/graph.hpp	/^    ~CSCMatrix() {$/;"	f	class:CSCMatrix
~CSRMatrix	src/graph-server/graph/graph.hpp	/^    ~CSRMatrix() {$/;"	f	class:CSRMatrix
~DataLoader	src/graph-server/graph/dataloader.cpp	/^DataLoader::~DataLoader() {$/;"	f	class:DataLoader
~GPUComm	src/graph-server/commmanager/GPU_comm.cpp	/^GPUComm::~GPUComm() {}/;"	f	class:GPUComm
~GhostVertex	src/graph-server/graph/vertex.hpp	/^    ~GhostVertex() { lock.destroy(); }$/;"	f	class:GhostVertex
~LambdaComm	src/graph-server/commmanager/lambda_comm.cpp	/^LambdaComm::~LambdaComm() {$/;"	f	class:LambdaComm
~LambdaWorker	src/graph-server/commmanager/lambdaworker.cpp	/^LambdaWorker::~LambdaWorker() {$/;"	f	class:LambdaWorker
~ResourceComm	src/graph-server/commmanager/resource_comm.hpp	/^    virtual ~ResourceComm() {};$/;"	f	class:ResourceComm
~ServerWorker	src/weight-server/serverworker.cpp	/^ServerWorker::~ServerWorker() {$/;"	f	class:ServerWorker
~ThreadPool	src/graph-server/parallel/threadpool.cpp	/^ThreadPool::~ThreadPool() {$/;"	f	class:ThreadPool
~Vertex	src/graph-server/graph/vertex.hpp	/^    ~Vertex() { lock.destroy(); }$/;"	f	class:Vertex
~WeightComm	src/graph-server/commmanager/weight_comm.cpp	/^WeightComm::~WeightComm() {$/;"	f	class:WeightComm
~WeightServer	src/weight-server/weightserver.cpp	/^WeightServer::~WeightServer() {$/;"	f	class:WeightServer
~monitor_t	src/common/zmq.hpp	/^        virtual ~monitor_t() {}$/;"	f	class:zmq::socket_type::monitor_t
